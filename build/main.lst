
./build/main.elf:     формат файла elf32-avr

Разделы:
Инд Имя           Размер    VMA       LMA       Файл      Вырав
  0 .data         00000762  00800200  000097b6  0000986a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000097b6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000dd5  00800962  00800962  00009fcc  2**0
                  ALLOC
  3 .eeprom       00000f19  00810000  00810000  00009fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000f024  00000000  00000000  0000aee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000a9bf  00000000  00000000  00019f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000248cb  2**0
                  CONTENTS, READONLY

Дизассемблирование раздела .text:

00000000 <__vectors>:
       0:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <__ctors_end>
       4:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
       8:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
       c:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      10:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      14:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      18:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      1c:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      20:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      24:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      28:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      2c:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      30:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      34:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      38:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      3c:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      40:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      44:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__vector_17>
      48:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      4c:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      50:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      54:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      58:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      5c:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      60:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      64:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      68:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      6c:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      70:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      74:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      78:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      7c:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      80:	0c 94 77 21 	jmp	0x42ee	; 0x42ee <__vector_32>
      84:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      88:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      8c:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      90:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      94:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      98:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      9c:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      a0:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      a4:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      a8:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      ac:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      b0:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      b4:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      b8:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      bc:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      c0:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      c4:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      c8:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      cc:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      d0:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      d4:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      d8:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      dc:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      e0:	0c 94 f3 1e 	jmp	0x3de6	; 0x3de6 <__bad_interrupt>
      e4:	41 3a       	cpi	r20, 0xA1	; 161
      e6:	41 3a       	cpi	r20, 0xA1	; 161
      e8:	16 3a       	cpi	r17, 0xA6	; 166
      ea:	41 3a       	cpi	r20, 0xA1	; 161
      ec:	1a 3a       	cpi	r17, 0xAA	; 170
      ee:	27 3a       	cpi	r18, 0xA7	; 167
      f0:	27 3a       	cpi	r18, 0xA7	; 167
      f2:	27 3a       	cpi	r18, 0xA7	; 167
      f4:	34 3a       	cpi	r19, 0xA4	; 164
      f6:	34 3a       	cpi	r19, 0xA4	; 164

000000f8 <_ZL9font12x16>:
	...
     110:	00 00 f0 03 0c 0c 02 10 32 11 31 22 01 22 31 22     ........2.1"."1"
     120:	32 11 02 10 0c 0c f0 03 00 00 f0 03 fc 0f fe 1f     2...............
     130:	ce 1e cf 3d ff 3d cf 3d ce 1e fe 1f fc 0f f0 03     ...=.=.=........
     140:	00 00 00 00 f0 00 f8 01 f8 03 f0 07 e0 0f f0 07     ................
     150:	f8 03 f8 01 f0 00 00 00 00 00 00 00 80 00 c0 01     ................
     160:	e0 03 f0 07 f8 0f f0 07 e0 03 c0 01 80 00 00 00     ................
     170:	00 00 80 03 c0 07 c0 07 b8 13 fc 1b fc 1f fc 1b     ................
     180:	b8 13 c0 07 c0 07 80 03 00 00 00 00 80 03 c0 07     ................
     190:	e0 17 f0 1b fc 1f f0 1b e0 17 c0 07 80 03 00 00     ................
	...
     1a8:	80 01 c0 03 c0 03 80 01 00 00 00 00 00 00 00 00     ................
     1b8:	ff ff ff ff ff ff ff ff 7f fe 3f fc 3f fc 7f fe     ..........?.?...
     1c8:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 c0 03     ................
     1d8:	20 04 10 08 10 08 20 04 c0 03 00 00 00 00 00 00      ..... .........
     1e8:	ff ff ff ff ff ff 3f fc df fb ef f7 ef f7 df fb     ......?.........
     1f8:	3f fc ff ff ff ff ff ff 00 00 80 03 c0 07 60 0c     ?.............`.
     208:	20 08 20 08 60 0c c8 07 a8 03 18 00 78 00 00 00      . .`.......x...
     218:	00 00 00 00 00 00 70 00 f8 08 8c 09 04 3f 04 3f     ......p......?.?
     228:	8c 09 f8 08 70 00 00 00 00 00 00 00 00 00 00 0c     ....p...........
     238:	00 1e 00 1e ff 0f 0e 00 7c 00 38 00 00 00 00 00     ........|.8.....
     248:	00 00 00 06 00 0f 00 0f ff 07 33 00 66 30 cc 78     ..........3.f0.x
     258:	98 79 f0 3f 00 00 00 00 00 00 80 00 c8 09 f0 07     .y.?............
     268:	30 06 18 0c 1e 3c 18 0c 30 06 f0 07 c8 09 80 00     0....<..0.......
     278:	00 00 00 00 00 00 fc 1f f8 0f f0 07 e0 03 c0 01     ................
     288:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00     ................
     298:	c0 01 e0 03 f0 07 f8 0f fc 1f 00 00 00 00 00 00     ................
     2a8:	00 00 00 00 00 00 10 04 18 0c 1c 1c fe 3f 1c 1c     .............?..
     2b8:	18 0c 10 04 00 00 00 00 00 00 00 00 00 00 fe 37     ...............7
     2c8:	fe 37 00 00 00 00 fe 37 fe 37 00 00 00 00 00 00     .7.....7.7......
     2d8:	00 00 38 00 7c 00 c6 00 82 00 fe 3f fe 3f 02 00     ..8.|......?.?..
     2e8:	fe 3f fe 3f 02 00 00 00 00 00 00 00 dc 08 fe 19     .?.?............
     2f8:	22 11 22 11 22 11 22 11 e6 1f c4 0e 00 00 00 00     ".".".".........
     308:	00 00 00 00 00 00 00 38 00 38 00 38 00 38 00 38     .......8.8.8.8.8
     318:	00 38 00 38 00 38 00 00 00 00 00 00 00 00 08 44     .8.8.8.........D
     328:	0c 4c 0e 5c ff 7f 0e 5c 0c 4c 08 44 00 00 00 00     .L.\...\.L.D....
     338:	00 00 00 00 00 00 10 00 18 00 1c 00 fe 3f 1c 00     .............?..
     348:	18 00 10 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
     358:	00 0c 00 1c fe 3f 00 1c 00 0c 00 04 00 00 00 00     .....?..........
     368:	00 00 00 00 80 00 80 00 80 00 80 00 80 00 f0 07     ................
     378:	e0 03 c0 01 80 00 00 00 00 00 00 00 80 00 c0 01     ................
     388:	e0 03 f0 07 80 00 80 00 80 00 80 00 80 00 00 00     ................
     398:	00 00 00 3f 00 20 00 20 00 20 00 20 00 20 00 20     ...?. . . . . . 
     3a8:	00 20 00 20 00 20 00 00 00 00 80 00 c0 01 e0 03     . . . ..........
     3b8:	f0 07 80 00 80 00 80 00 f0 07 e0 03 c0 01 80 00     ................
     3c8:	00 00 00 04 00 06 00 07 80 07 c0 07 e0 07 c0 07     ................
     3d8:	80 07 00 07 00 06 00 04 00 00 20 00 60 00 e0 00     .......... .`...
     3e8:	e0 01 e0 03 e0 07 e0 03 e0 01 e0 00 60 00 20 00     ............`. .
	...
     418:	7c 00 ff 33 ff 33 7c 00 00 00 00 00 00 00 00 00     |..3.3|.........
     428:	00 00 00 00 00 00 3c 00 3c 00 00 00 00 00 3c 00     ......<.<.....<.
     438:	3c 00 00 00 00 00 00 00 00 00 00 02 10 1e 90 1f     <...............
     448:	f0 03 7e 02 1e 1e 90 1f f0 03 7e 02 1e 00 10 00     ..~.......~.....
     458:	00 00 00 00 78 04 fc 0c cc 0c ff 3f ff 3f cc 0c     ....x......?.?..
     468:	cc 0f 88 07 00 00 00 00 00 00 00 30 38 38 38 1c     ...........0888.
     478:	38 0e 00 07 80 03 c0 01 e0 38 70 38 38 38 1c 00     8........8p888..
     488:	00 00 00 00 00 1f b8 3f fc 31 c6 21 e2 37 3e 1e     .......?.1.!.7>.
     498:	1c 1c 00 36 00 22 00 00 00 00 00 00 00 00 00 00     ...6."..........
     4a8:	27 00 3f 00 1f 00 00 00 00 00 00 00 00 00 00 00     '.?.............
     4b8:	00 00 00 00 00 00 f0 03 fc 0f fe 1f 07 38 01 20     .............8. 
     4c8:	01 20 00 00 00 00 00 00 00 00 00 00 00 00 01 20     . ............. 
     4d8:	01 20 07 38 fe 1f fc 0f f0 03 00 00 00 00 00 00     . .8............
     4e8:	00 00 00 00 98 0c b8 0e e0 03 f8 0f f8 0f e0 03     ................
     4f8:	b8 0e 98 0c 00 00 00 00 00 00 00 00 80 01 80 01     ................
     508:	80 01 f0 0f f0 0f 80 01 80 01 80 01 00 00 00 00     ................
	...
     520:	00 b8 00 f8 00 78 00 00 00 00 00 00 00 00 00 00     .....x..........
     530:	00 00 00 00 80 01 80 01 80 01 80 01 80 01 80 01     ................
     540:	80 01 80 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     550:	00 38 00 38 00 38 00 00 00 00 00 00 00 00 00 00     .8.8.8..........
     560:	00 00 00 18 00 1c 00 0e 00 07 80 03 c0 01 e0 00     ................
     570:	70 00 38 00 1c 00 0e 00 00 00 f8 07 fe 1f 06 18     p.8.............
     580:	03 30 03 30 03 30 03 30 03 30 06 18 fe 1f f8 07     .0.0.0.0.0......
     590:	00 00 00 00 00 00 0c 30 0c 30 0e 30 ff 3f ff 3f     .......0.0.0.?.?
     5a0:	00 30 00 30 00 30 00 00 00 00 1c 30 1e 38 07 3c     .0.0.0.....0.8.<
     5b0:	03 3e 03 37 83 33 c3 31 e3 30 77 30 3e 30 1c 30     .>.7.3.1.0w0>0.0
     5c0:	00 00 0c 0c 0e 1c 07 38 c3 30 c3 30 c3 30 c3 30     .......8.0.0.0.0
     5d0:	c3 30 e7 39 7e 1f 3c 0e 00 00 c0 03 e0 03 70 03     .0.9~.<.......p.
     5e0:	38 03 1c 03 0e 03 07 03 ff 3f ff 3f 00 03 00 03     8........?.?....
     5f0:	00 00 3f 0c 7f 1c 63 38 63 30 63 30 63 30 63 30     ..?...c8c0c0c0c0
     600:	63 30 e3 38 c3 1f 83 0f 00 00 c0 0f f0 1f f8 39     c0.8...........9
     610:	dc 30 ce 30 c7 30 c3 30 c3 30 c3 39 80 1f 00 0f     .0.0.0.0.0.9....
     620:	00 00 03 00 03 00 03 00 03 30 03 3c 03 0f c3 03     .........0.<....
     630:	f3 00 3f 00 0f 00 03 00 00 00 00 0f bc 1f fe 39     ..?............9
     640:	e7 30 c3 30 c3 30 c3 30 e7 30 fe 39 bc 1f 00 0f     .0.0.0.0.0.9....
     650:	00 00 3c 00 7e 00 e7 30 c3 30 c3 30 c3 38 c3 1c     ..<.~..0.0.0.8..
     660:	c3 0e e7 07 fe 03 fc 00 00 00 00 00 00 00 00 00     ................
     670:	70 1c 70 1c 70 1c 00 00 00 00 00 00 00 00 00 00     p.p.p...........
	...
     688:	70 9c 70 fc 70 7c 00 00 00 00 00 00 00 00 00 00     p.p.p|..........
     698:	00 00 00 00 c0 00 e0 01 f0 03 38 07 1c 0e 0e 1c     ..........8.....
     6a8:	07 38 03 30 00 00 00 00 00 00 00 00 60 06 60 06     .8.0........`.`.
     6b8:	60 06 60 06 60 06 60 06 60 06 60 06 60 06 00 00     `.`.`.`.`.`.`...
     6c8:	00 00 00 00 03 30 07 38 0e 1c 1c 0e 38 07 f0 03     .....0.8....8...
     6d8:	e0 01 c0 00 00 00 00 00 00 00 1c 00 1e 00 07 00     ................
     6e8:	03 00 83 37 c3 37 e3 00 77 00 3e 00 1c 00 00 00     ...7.7..w.>.....
     6f8:	00 00 f8 0f fe 1f 07 18 f3 33 fb 37 1b 36 fb 37     .........3.7.6.7
     708:	fb 37 07 36 fe 03 f8 01 00 00 00 38 00 3f e0 07     .7.6.......8.?..
     718:	fc 06 1f 06 1f 06 fc 06 e0 07 00 3f 00 38 00 00     ...........?.8..
     728:	00 00 ff 3f ff 3f c3 30 c3 30 c3 30 c3 30 e7 30     ...?.?.0.0.0.0.0
     738:	fe 39 bc 1f 00 0f 00 00 00 00 f0 03 fc 0f 0e 1c     .9..............
     748:	07 38 03 30 03 30 03 30 07 38 0e 1c 0c 0c 00 00     .8.0.0.0.8......
     758:	00 00 ff 3f ff 3f 03 30 03 30 03 30 03 30 07 38     ...?.?.0.0.0.0.8
     768:	0e 1c fc 0f f0 03 00 00 00 00 ff 3f ff 3f c3 30     ...........?.?.0
     778:	c3 30 c3 30 c3 30 c3 30 c3 30 03 30 03 30 00 00     .0.0.0.0.0.0.0..
     788:	00 00 ff 3f ff 3f c3 00 c3 00 c3 00 c3 00 c3 00     ...?.?..........
     798:	c3 00 03 00 03 00 00 00 00 00 f0 03 fc 0f 0e 1c     ................
     7a8:	07 38 03 30 c3 30 c3 30 c3 30 c7 3f c6 3f 00 00     .8.0.0.0.0.?.?..
     7b8:	00 00 ff 3f ff 3f c0 00 c0 00 c0 00 c0 00 c0 00     ...?.?..........
     7c8:	c0 00 ff 3f ff 3f 00 00 00 00 00 00 00 00 03 30     ...?.?.........0
     7d8:	03 30 ff 3f ff 3f 03 30 03 30 00 00 00 00 00 00     .0.?.?.0.0......
     7e8:	00 00 00 0e 00 1e 00 38 00 30 00 30 00 30 00 30     .......8.0.0.0.0
     7f8:	00 38 ff 1f ff 07 00 00 00 00 ff 3f ff 3f c0 00     .8.........?.?..
     808:	e0 01 f0 03 38 07 1c 0e 0e 1c 07 38 03 30 00 00     ....8......8.0..
     818:	00 00 ff 3f ff 3f 00 30 00 30 00 30 00 30 00 30     ...?.?.0.0.0.0.0
     828:	00 30 00 30 00 30 00 00 00 00 ff 3f ff 3f 1e 00     .0.0.0.....?.?..
     838:	78 00 e0 01 e0 01 78 00 1e 00 ff 3f ff 3f 00 00     x.....x....?.?..
     848:	00 00 ff 3f ff 3f 0e 00 38 00 f0 00 c0 03 00 07     ...?.?..8.......
     858:	00 1c ff 3f ff 3f 00 00 00 00 f0 03 fc 0f 0e 1c     ...?.?..........
     868:	07 38 03 30 03 30 07 38 0e 1c fc 0f f0 03 00 00     .8.0.0.8........
     878:	00 00 ff 3f ff 3f 83 01 83 01 83 01 83 01 83 01     ...?.?..........
     888:	c7 01 fe 00 7c 00 00 00 00 00 f0 03 fc 0f 0e 1c     ....|...........
     898:	07 38 03 30 03 36 07 3e 0e 1c fc 3f f0 33 00 00     .8.0.6.>...?.3..
     8a8:	00 00 ff 3f ff 3f 83 01 83 01 83 03 83 07 83 0f     ...?.?..........
     8b8:	c7 1d fe 38 7c 30 00 00 00 00 3c 0c 7e 1c e7 38     ...8|0....<.~..8
     8c8:	c3 30 c3 30 c3 30 c3 30 c7 39 8e 1f 0c 0f 00 00     .0.0.0.0.9......
     8d8:	00 00 00 00 03 00 03 00 03 00 ff 3f ff 3f 03 00     ...........?.?..
     8e8:	03 00 03 00 00 00 00 00 00 00 ff 07 ff 1f 00 38     ...............8
     8f8:	00 30 00 30 00 30 00 30 00 38 ff 1f ff 07 00 00     .0.0.0.0.8......
     908:	00 00 07 00 3f 00 f8 01 c0 0f 00 3e 00 3e c0 0f     ....?......>.>..
     918:	f8 01 3f 00 07 00 00 00 00 00 ff 3f ff 3f 00 1c     ..?........?.?..
     928:	00 06 80 03 80 03 00 06 00 1c ff 3f ff 3f 00 00     ...........?.?..
     938:	00 00 03 30 0f 3c 1c 0e 30 03 e0 01 e0 01 30 03     ...0.<..0.....0.
     948:	1c 0e 0f 3c 03 30 00 00 00 00 03 00 0f 00 3c 00     ...<.0........<.
     958:	f0 00 c0 3f c0 3f f0 00 3c 00 0f 00 03 00 00 00     ...?.?..<.......
     968:	00 00 03 30 03 3c 03 3e 03 33 c3 31 e3 30 33 30     ...0.<.>.3.1.030
     978:	1f 30 0f 30 03 30 00 00 00 00 00 00 00 00 ff 3f     .0.0.0.........?
     988:	ff 3f 03 30 03 30 03 30 03 30 00 00 00 00 00 00     .?.0.0.0.0......
     998:	00 00 0e 00 1c 00 38 00 70 00 e0 00 c0 01 80 03     ......8.p.......
     9a8:	00 07 00 0e 00 1c 00 18 00 00 00 00 00 00 03 30     ...............0
     9b8:	03 30 03 30 03 30 ff 3f ff 3f 00 00 00 00 00 00     .0.0.0.?.?......
     9c8:	00 00 60 00 70 00 38 00 1c 00 0e 00 07 00 0e 00     ..`.p.8.........
     9d8:	1c 00 38 00 70 00 60 00 00 00 00 c0 00 c0 00 c0     ..8.p.`.........
     9e8:	00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0     ................
	...
     a00:	00 00 3e 00 7e 00 4e 00 00 00 00 00 00 00 00 00     ..>.~.N.........
     a10:	00 00 00 1c 40 3e 60 33 60 33 60 33 60 33 60 33     ....@>`3`3`3`3`3
     a20:	60 33 e0 3f c0 3f 00 00 00 00 ff 3f ff 3f c0 30     `3.?.?.....?.?.0
     a30:	60 30 60 30 60 30 60 30 e0 38 c0 1f 80 0f 00 00     `0`0`0`0.8......
     a40:	00 00 80 0f c0 1f e0 38 60 30 60 30 60 30 60 30     .......8`0`0`0`0
     a50:	60 30 c0 18 80 08 00 00 00 00 80 0f c0 1f e0 38     `0.............8
     a60:	60 30 60 30 60 30 e0 30 c0 30 ff 3f ff 3f 00 00     `0`0`0.0.0.?.?..
     a70:	00 00 80 0f c0 1f e0 3b 60 33 60 33 60 33 60 33     .......;`3`3`3`3
     a80:	60 33 c0 13 80 01 00 00 00 00 c0 00 c0 00 fc 3f     `3.............?
     a90:	fe 3f c7 00 c3 00 c3 00 03 00 00 00 00 00 00 00     .?..............
     aa0:	00 00 80 03 c0 c7 e0 ce 60 cc 60 cc 60 cc 60 cc     ........`.`.`.`.
     ab0:	60 e6 e0 7f e0 3f 00 00 00 00 ff 3f ff 3f c0 00     `....?.....?.?..
     ac0:	60 00 60 00 60 00 e0 00 c0 3f 80 3f 00 00 00 00     `.`.`....?.?....
     ad0:	00 00 00 00 00 00 00 30 60 30 ec 3f ec 3f 00 30     .......0`0.?.?.0
     ae0:	00 30 00 00 00 00 00 00 00 00 00 00 00 00 00 60     .0.............`
     af0:	00 e0 00 c0 60 c0 ec ff ec 7f 00 00 00 00 00 00     ....`...........
     b00:	00 00 00 00 ff 3f ff 3f 00 03 80 07 c0 0f e0 1c     .....?.?........
     b10:	60 38 00 30 00 00 00 00 00 00 00 00 00 00 00 30     `8.0...........0
     b20:	03 30 ff 3f ff 3f 00 30 00 30 00 00 00 00 00 00     .0.?.?.0.0......
     b30:	00 00 e0 3f c0 3f e0 00 e0 00 c0 3f c0 3f e0 00     ...?.?.....?.?..
     b40:	e0 00 c0 3f 80 3f 00 00 00 00 00 00 e0 3f e0 3f     ...?.?.......?.?
     b50:	60 00 60 00 60 00 60 00 e0 00 c0 3f 80 3f 00 00     `.`.`.`....?.?..
     b60:	00 00 80 0f c0 1f e0 38 60 30 60 30 60 30 60 30     .......8`0`0`0`0
     b70:	e0 38 c0 1f 80 0f 00 00 00 00 e0 ff e0 ff 60 0c     .8............`.
     b80:	60 18 60 18 60 18 60 18 e0 1c c0 0f 80 07 00 00     `.`.`.`.........
     b90:	00 00 80 07 c0 0f e0 1c 60 18 60 18 60 18 60 18     ........`.`.`.`.
     ba0:	60 0c e0 ff e0 ff 00 00 00 00 00 00 e0 3f e0 3f     `............?.?
     bb0:	c0 00 60 00 60 00 60 00 60 00 e0 00 c0 00 00 00     ..`.`.`.`.......
     bc0:	00 00 c0 11 e0 33 60 33 60 33 60 33 60 33 60 3f     .....3`3`3`3`3`?
     bd0:	40 1e 00 00 00 00 00 00 00 00 60 00 60 00 fe 1f     @.........`.`...
     be0:	fe 3f 60 30 60 30 60 30 00 30 00 00 00 00 00 00     .?`0`0`0.0......
     bf0:	00 00 e0 0f e0 1f 00 38 00 30 00 30 00 30 00 30     .......8.0.0.0.0
     c00:	00 18 e0 3f e0 3f 00 00 00 00 60 00 e0 01 80 07     ...?.?....`.....
     c10:	00 1e 00 38 00 38 00 1e 80 07 e0 01 60 00 00 00     ...8.8......`...
     c20:	00 00 e0 07 e0 1f 00 38 00 1c e0 0f e0 0f 00 1c     .......8........
     c30:	00 38 e0 1f e0 07 00 00 00 00 60 30 e0 38 c0 1d     .8........`0.8..
     c40:	80 0f 00 07 80 0f c0 1d e0 38 60 30 00 00 00 00     .........8`0....
     c50:	00 00 00 00 60 00 e0 81 80 e7 00 7e 00 1e 80 07     ....`......~....
     c60:	e0 01 60 00 00 00 00 00 00 00 60 30 60 38 60 3c     ..`.......`0`8`<
     c70:	60 36 60 33 e0 31 e0 30 60 30 20 30 00 00 00 00     `6`3.1.0`0 0....
     c80:	00 00 00 00 80 00 c0 01 fc 1f 7e 3f 07 70 03 60     ..........~?.p.`
     c90:	03 60 03 60 00 00 00 00 00 00 00 00 00 00 00 00     .`.`............
     ca0:	00 00 ff 3f ff 3f 00 00 00 00 00 00 00 00 00 00     ...?.?..........
     cb0:	00 00 00 00 03 60 03 60 03 60 07 70 7e 3f fc 1f     .....`.`.`.p~?..
     cc0:	c0 01 80 00 00 00 00 00 00 00 10 00 18 00 0c 00     ................
     cd0:	04 00 0c 00 18 00 10 00 18 00 0c 00 04 00 00 00     ................
     ce0:	00 00 00 0f 80 0f c0 0c 60 0c 30 0c 30 0c 60 0c     ........`.0.0.`.
     cf0:	c0 0c 80 0f 00 0f 00 00 55 55 00 00 aa aa 00 00     ........UU......
     d00:	55 55 00 00 aa aa 00 00 55 55 00 00 aa aa 00 00     UU......UU......
     d10:	aa aa 55 55 aa aa 55 55 aa aa 55 55 aa aa 55 55     ..UU..UU..UU..UU
     d20:	aa aa 55 55 aa aa 55 55 aa aa ff ff 55 55 ff ff     ..UU..UU....UU..
     d30:	aa aa ff ff 55 55 ff ff aa aa ff ff 55 55 ff ff     ....UU......UU..
	...
     d48:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     d58:	80 01 80 01 80 01 80 01 80 01 ff ff ff ff 00 00     ................
	...
     d70:	c0 06 c0 06 c0 06 c0 06 c0 06 ff ff ff ff 00 00     ................
	...
     d88:	80 01 80 01 ff ff ff ff 00 00 ff ff ff ff 00 00     ................
	...
     da0:	80 01 80 01 80 ff 80 ff 80 01 80 ff 80 ff 00 00     ................
	...
     db8:	c0 06 c0 06 c0 06 c0 06 c0 06 c0 ff c0 ff 00 00     ................
	...
     dd0:	c0 06 c0 06 ff fe ff fe 00 00 ff ff ff ff 00 00     ................
	...
     dec:	ff ff ff ff 00 00 ff ff ff ff 00 00 00 00 00 00     ................
     dfc:	00 00 00 00 c0 06 c0 06 c0 fe c0 fe c0 00 c0 ff     ................
     e0c:	c0 ff 00 00 00 00 00 00 00 00 00 00 c0 06 c0 06     ................
     e1c:	ff 06 ff 06 00 06 ff 07 ff 07 00 00 00 00 00 00     ................
     e2c:	00 00 00 00 80 01 80 01 ff 01 ff 01 80 01 ff 01     ................
     e3c:	ff 01 00 00 00 00 00 00 00 00 00 00 c0 06 c0 06     ................
     e4c:	c0 06 c0 06 c0 06 ff 07 ff 07 00 00 00 00 00 00     ................
     e5c:	00 00 00 00 80 01 80 01 80 01 80 01 80 01 80 ff     ................
     e6c:	80 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e7c:	00 00 00 00 00 00 ff 01 ff 01 80 01 80 01 80 01     ................
     e8c:	80 01 80 01 80 01 80 01 80 01 80 01 80 01 ff 01     ................
     e9c:	ff 01 80 01 80 01 80 01 80 01 80 01 80 01 80 01     ................
     eac:	80 01 80 01 80 01 80 ff 80 ff 80 01 80 01 80 01     ................
     ebc:	80 01 80 01 00 00 00 00 00 00 00 00 00 00 ff ff     ................
     ecc:	ff ff 80 01 80 01 80 01 80 01 80 01 80 01 80 01     ................
     edc:	80 01 80 01 80 01 80 01 80 01 80 01 80 01 80 01     ................
     eec:	80 01 80 01 80 01 80 01 80 01 80 01 80 01 ff ff     ................
     efc:	ff ff 80 01 80 01 80 01 80 01 80 01 00 00 00 00     ................
     f0c:	00 00 00 00 00 00 ff ff ff ff c0 06 c0 06 c0 06     ................
     f1c:	c0 06 c0 06 00 00 00 00 ff ff ff ff 00 00 ff ff     ................
     f2c:	ff ff 80 01 80 01 80 01 80 01 80 01 00 00 00 00     ................
     f3c:	ff 07 ff 07 00 06 ff 06 ff 06 c0 06 c0 06 c0 06     ................
     f4c:	c0 06 c0 06 00 00 00 00 c0 ff c0 ff c0 00 c0 fe     ................
     f5c:	c0 fe c0 06 c0 06 c0 06 c0 06 c0 06 c0 06 c0 06     ................
     f6c:	ff 06 ff 06 00 06 ff 06 ff 06 c0 06 c0 06 c0 06     ................
     f7c:	c0 06 c0 06 c0 06 c0 06 c0 fe c0 fe c0 00 c0 fe     ................
     f8c:	c0 fe c0 06 c0 06 c0 06 c0 06 c0 06 00 00 00 00     ................
     f9c:	ff ff ff ff 00 00 ff fe ff fe c0 06 c0 06 c0 06     ................
     fac:	c0 06 c0 06 c0 06 c0 06 c0 06 c0 06 c0 06 c0 06     ................
     fbc:	c0 06 c0 06 c0 06 c0 06 c0 06 c0 06 c0 06 c0 06     ................
     fcc:	ff fe ff fe 00 00 ff fe ff fe c0 06 c0 06 c0 06     ................
     fdc:	c0 06 c0 06 c0 06 c0 06 c0 06 c0 06 c0 06 ff 06     ................
     fec:	ff 06 c0 06 c0 06 c0 06 c0 06 c0 06 80 01 80 01     ................
     ffc:	ff 01 ff 01 80 01 ff 01 ff 01 80 01 80 01 80 01     ................
    100c:	80 01 80 01 c0 06 c0 06 c0 06 c0 06 c0 06 c0 fe     ................
    101c:	c0 fe c0 06 c0 06 c0 06 c0 06 c0 06 80 01 80 01     ................
    102c:	80 ff 80 ff 80 01 80 ff 80 ff 80 01 80 01 80 01     ................
    103c:	80 01 80 01 00 00 00 00 ff 01 ff 01 80 01 ff 01     ................
    104c:	ff 01 80 01 80 01 80 01 80 01 80 01 00 00 00 00     ................
    105c:	00 00 00 00 00 00 ff 07 ff 07 c0 06 c0 06 c0 06     ................
    106c:	c0 06 c0 06 00 00 00 00 00 00 00 00 00 00 c0 ff     ................
    107c:	c0 ff c0 06 c0 06 c0 06 c0 06 c0 06 00 00 00 00     ................
    108c:	80 ff 80 ff 80 01 80 ff 80 ff 80 01 80 01 80 01     ................
    109c:	80 01 80 01 80 01 80 01 ff ff ff ff 00 00 ff ff     ................
    10ac:	ff ff 80 01 80 01 80 01 80 01 80 01 00 00 f8 3f     ...............?
    10bc:	f8 3f 9b 31 9b 31 98 31 98 31 9b 31 9b 31 18 30     .?.1.1.1.1.1.1.0
    10cc:	18 30 00 00 c0 06 c0 06 c0 06 c0 06 c0 06 ff fe     .0..............
    10dc:	ff fe c0 06 c0 06 c0 06 c0 06 c0 06 80 01 80 01     ................
    10ec:	80 01 80 01 80 01 ff 01 ff 01 00 00 00 00 00 00     ................
	...
    1108:	00 00 80 ff 80 ff 80 01 80 01 80 01 80 01 80 01     ................
    1118:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1128:	ff ff ff ff ff ff ff ff 00 ff 00 ff 00 ff 00 ff     ................
    1138:	00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff     ................
    1148:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 00 00     ................
	...
    116c:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 ff 00     ................
    117c:	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
    118c:	ff 00 ff 00 00 00 00 00 f0 00 08 01 08 02 10 04     ................
    119c:	20 08 10 04 08 02 08 01 f0 00 00 00 00 00 e0 01      ...............
    11ac:	f0 03 f0 07 f0 07 e8 07 e4 07 e4 07 e4 07 e4 07     ................
    11bc:	e8 03 f0 01 00 00 e0 01 30 02 30 04 30 04 28 04     ........0.0.0.(.
    11cc:	24 04 24 04 24 04 24 04 28 02 f0 01 00 00 00 00     $.$.$.$.(.......
    11dc:	00 00 00 00 80 00 70 00 08 00 f8 00 00 00 00 00     ......p.........
    11ec:	00 00 00 00 00 00 80 00 80 00 80 00 a0 06 9c 08     ................
    11fc:	82 08 be 3e 80 00 80 00 80 00 00 00 00 00 00 00     ...>............
    120c:	60 00 e8 81 88 e7 10 7e 10 1e 88 07 e8 01 60 00     `......~......`.
	...
    1224:	00 00 1e 00 3f 00 33 00 33 00 3f 00 1e 00 00 00     ....?.3.3.?.....
    1234:	00 00 00 00 00 00 80 0f c0 1f ec 33 6c 33 60 33     ...........3l3`3
    1244:	60 33 6c 33 6c 33 c0 13 80 03 00 00 00 00 00 00     `3l3l3..........
    1254:	00 00 c0 03 e0 07 e0 07 e0 07 e0 07 c0 03 00 00     ................
	...
    1270:	00 00 80 01 c0 03 80 01 00 00 00 00 00 00 00 00     ................
    1280:	00 00 00 00 00 03 00 06 00 0c 00 18 fe 3f fe 3f     .............?.?
    1290:	06 00 06 00 06 00 06 00 ff 3f ff 3f 1e 00 f0 00     .........?.?....
    12a0:	80 03 00 1e ff 3f ff 3f 1c 03 36 03 36 03 1c 03     .....?.?..6.6...
    12b0:	00 00 f6 1b fe 1f 18 06 0c 0c 0c 0c 0c 0c 0c 0c     ................
    12c0:	18 06 fe 1f f6 1b 00 00 00 00 00 00 00 00 00 00     ................
    12d0:	f0 03 f0 03 f0 03 f0 03 00 00 00 00 00 00 00 00     ................
	...
    12f8:	00 00 f0 3f fc 3f 0e 03 07 03 03 03 03 03 03 03     ...?.?..........
    1308:	03 03 ff 3f ff 3f 00 00 00 00 ff 3f ff 3f c3 30     ...?.?.....?.?.0
    1318:	c3 30 c3 30 c3 30 c3 30 c3 39 83 1f 03 0f 00 00     .0.0.0.0.9......
    1328:	00 00 ff 3f ff 3f c3 30 c3 30 c3 30 c3 30 e7 30     ...?.?.0.0.0.0.0
    1338:	fe 39 bc 1f 00 0f 00 00 00 00 ff 3f ff 3f 03 00     .9.........?.?..
    1348:	03 00 03 00 03 00 03 00 03 00 03 00 03 00 00 00     ................
    1358:	00 f0 f0 ff fc 3f 0e 30 07 30 03 30 03 30 03 30     .....?.0.0.0.0.0
    1368:	03 30 ff 3f ff ff 00 f0 00 00 ff 3f ff 3f c3 30     .0.?.......?.?.0
    1378:	c3 30 c3 30 c3 30 c3 30 c3 30 03 30 03 30 00 00     .0.0.0.0.0.0.0..
    1388:	0f 3c 3e 1f f8 07 e0 01 c0 00 ff 3f ff 3f c0 00     .<>........?.?..
    1398:	e0 01 f8 07 1e 1f 07 3c 00 00 0c 0c 0e 1c 07 38     .......<.......8
    13a8:	c3 30 c3 30 c3 30 c3 30 c3 30 e7 39 7e 1f 3c 0e     .0.0.0.0.0.9~.<.
    13b8:	00 00 ff 3f ff 3f 00 1c 00 07 c0 03 f0 00 38 00     ...?.?........8.
    13c8:	0e 00 ff 3f ff 3f 00 00 00 00 ff 3f ff 3f 00 1c     ...?.?.....?.?..
    13d8:	00 07 c6 03 f3 00 38 00 0e 00 ff 3f ff 3f 00 00     ......8....?.?..
    13e8:	00 00 ff 3f ff 3f c0 00 e0 01 f0 03 38 07 1c 0e     ...?.?......8...
    13f8:	0e 1c 07 38 03 30 00 00 00 00 f0 3f fc 3f 0e 00     ...8.0.....?.?..
    1408:	07 00 03 00 03 00 03 00 03 00 ff 3f ff 3f 00 00     ...........?.?..
    1418:	00 00 ff 3f ff 3f 1e 00 78 00 e0 01 e0 01 78 00     ...?.?..x.....x.
    1428:	1e 00 ff 3f ff 3f 00 00 00 00 ff 3f ff 3f c0 00     ...?.?.....?.?..
    1438:	c0 00 c0 00 c0 00 c0 00 c0 00 ff 3f ff 3f 00 00     ...........?.?..
    1448:	00 00 f0 03 fc 0f 0e 1c 07 38 03 30 03 30 07 38     .........8.0.0.8
    1458:	0e 1c fc 0f f0 03 00 00 00 00 ff 3f ff 3f 03 00     ...........?.?..
    1468:	03 00 03 00 03 00 03 00 03 00 ff 3f ff 3f 00 00     ...........?.?..
    1478:	00 00 ff 3f ff 3f 83 01 83 01 83 01 83 01 83 01     ...?.?..........
    1488:	c7 01 fe 00 7c 00 00 00 00 00 f0 03 fc 0f 0e 1c     ....|...........
    1498:	07 38 03 30 03 30 03 30 07 38 0e 1c 0c 0c 00 00     .8.0.0.0.8......
    14a8:	00 00 00 00 03 00 03 00 03 00 ff 3f ff 3f 03 00     ...........?.?..
    14b8:	03 00 03 00 00 00 00 00 00 00 7f 18 ff 38 c0 30     .............8.0
    14c8:	c0 30 c0 30 c0 30 c0 30 c0 38 ff 1f ff 07 00 00     .0.0.0.0.8......
    14d8:	00 00 f8 03 fc 07 0c 06 0c 06 ff 3f ff 3f 0c 06     ...........?.?..
    14e8:	0c 06 fc 07 f8 03 00 00 00 00 03 30 0f 3c 1c 0e     ...........0.<..
    14f8:	30 03 e0 01 e0 01 30 03 1c 0e 0f 3c 03 30 00 00     0.....0....<.0..
    1508:	00 00 ff 3f ff 3f 00 30 00 30 00 30 00 30 00 30     ...?.?.0.0.0.0.0
    1518:	ff 3f ff ff 00 f0 00 00 00 00 7f 00 ff 00 c0 00     .?..............
    1528:	c0 00 c0 00 c0 00 c0 00 c0 00 ff 3f ff 3f 00 00     ...........?.?..
    1538:	00 00 ff 3f ff 3f 00 30 00 30 ff 3f ff 3f 00 30     ...?.?.0.0.?.?.0
    1548:	00 30 ff 3f ff 3f 00 00 00 00 ff 3f ff 3f 00 30     .0.?.?.....?.?.0
    1558:	00 30 ff 3f ff 3f 00 30 00 30 ff 3f ff ff 00 f0     .0.?.?.0.0.?....
    1568:	0f 00 0f 00 03 00 ff 3f ff 3f 60 30 60 30 60 30     .......?.?`0`0`0
    1578:	e0 38 c0 1f 80 0f 00 00 00 00 ff 3f ff 3f 60 30     .8.........?.?`0
    1588:	60 30 e0 38 c0 1f 80 0f 00 00 ff 3f ff 3f 00 00     `0.8.......?.?..
    1598:	00 00 ff 3f ff 3f 60 30 60 30 60 30 60 30 60 30     ...?.?`0`0`0`0`0
    15a8:	e0 38 c0 1f 80 0f 00 00 00 00 0c 0c 0e 1c 07 38     .8.............8
    15b8:	c3 30 c3 30 c3 30 c7 38 ce 1c fc 0f f0 03 00 00     .0.0.0.8........
    15c8:	ff 3f ff 3f c0 00 f0 03 fc 0f 0e 1c 07 38 03 30     .?.?.........8.0
    15d8:	07 38 0e 1c fc 0f f0 03 00 00 7c 30 fe 38 c7 1d     .8........|0.8..
    15e8:	83 0f 83 07 83 03 83 01 83 01 ff 3f ff 3f 00 00     ...........?.?..
    15f8:	00 00 00 1c 40 3e 60 33 60 33 60 33 60 33 60 33     ....@>`3`3`3`3`3
    1608:	60 33 e0 3f c0 3f 00 00 00 00 f0 1f f8 3f 98 31     `3.?.?.......?.1
    1618:	d8 30 d8 30 d8 30 d8 30 d8 39 8c 1f 00 0f 00 00     .0.0.0.0.9......
    1628:	00 00 00 00 e0 3f e0 3f 60 32 60 32 60 32 60 32     .....?.?`2`2`2`2
    1638:	e0 3f c0 1d 00 00 00 00 00 00 00 00 e0 3f e0 3f     .?...........?.?
    1648:	60 00 60 00 60 00 60 00 60 00 60 00 00 00 00 00     `.`.`.`.`.`.....
    1658:	00 00 00 f0 80 ff c0 3f 60 30 60 30 60 30 60 30     .......?`0`0`0`0
    1668:	e0 3f e0 ff 00 f0 00 00 00 00 80 0f c0 1f e0 3b     .?.............;
    1678:	60 33 60 33 60 33 60 33 60 33 c0 13 80 01 00 00     `3`3`3`3`3......
    1688:	60 30 e0 38 c0 1f 80 07 00 03 e0 3f e0 3f 00 03     `0.8.......?.?..
    1698:	80 07 c0 1f e0 38 60 30 00 00 00 00 80 08 c0 18     .....8`0........
    16a8:	60 30 60 32 60 32 60 32 c0 1f 80 0d 00 00 00 00     `0`2`2`2........
    16b8:	00 00 00 00 e0 3f e0 3f 00 18 00 0c 00 06 00 03     .....?.?........
    16c8:	80 01 e0 3f e0 3f 00 00 00 00 00 00 e0 3f e0 3f     ...?.?.......?.?
    16d8:	00 18 00 0c 18 06 0c 03 80 01 e0 3f e0 3f 00 00     ...........?.?..
    16e8:	00 00 00 00 e0 3f e0 3f 00 03 80 07 c0 0f e0 1c     .....?.?........
    16f8:	60 38 00 30 00 00 00 00 00 00 00 00 80 3f c0 3f     `8.0.........?.?
    1708:	60 00 60 00 60 00 60 00 e0 3f e0 3f 00 00 00 00     `.`.`.`..?.?....
    1718:	00 00 e0 3f e0 3f e0 00 c0 01 00 03 00 03 c0 01     ...?.?..........
    1728:	e0 00 e0 3f e0 3f 00 00 00 00 00 00 e0 3f e0 3f     ...?.?.......?.?
    1738:	00 06 00 06 00 06 00 06 00 06 e0 3f e0 3f 00 00     ...........?.?..
    1748:	00 00 80 0f c0 1f e0 38 60 30 60 30 60 30 60 30     .......8`0`0`0`0
    1758:	e0 38 c0 1f 80 0f 00 00 00 00 00 00 e0 3f e0 3f     .8...........?.?
    1768:	60 00 60 00 60 00 60 00 60 00 e0 3f e0 3f 00 00     `.`.`.`.`..?.?..
    1778:	00 00 e0 ff e0 ff 60 0c 60 18 60 18 60 18 60 18     ......`.`.`.`.`.
    1788:	e0 1c c0 0f 80 07 00 00 00 00 80 0f c0 1f e0 38     ...............8
    1798:	60 30 60 30 60 30 60 30 60 30 c0 18 80 08 00 00     `0`0`0`0`0......
    17a8:	00 00 00 00 60 00 60 00 60 00 e0 3f e0 3f 60 00     ....`.`.`..?.?`.
    17b8:	60 00 60 00 00 00 00 00 00 00 00 00 60 00 e0 81     `.`.........`...
    17c8:	80 e7 00 7e 00 1e 80 07 e0 01 60 00 00 00 00 00     ...~......`.....
    17d8:	00 00 80 1f c0 3f c0 30 c0 30 e0 ff e0 ff c0 30     .....?.0.0.....0
    17e8:	c0 30 c0 3f 80 1f 00 00 00 00 60 30 e0 38 c0 1d     .0.?......`0.8..
    17f8:	80 0f 00 07 80 0f c0 1d e0 38 60 30 00 00 00 00     .........8`0....
    1808:	00 00 00 00 e0 3f e0 3f 00 30 00 30 00 30 00 30     .....?.?.0.0.0.0
    1818:	e0 3f e0 ff 00 f0 00 00 00 00 00 00 e0 03 e0 07     .?..............
    1828:	00 06 00 06 00 06 00 06 e0 3f e0 3f 00 00 00 00     .........?.?....
    1838:	00 00 e0 3f e0 3f 00 30 00 30 e0 3f e0 3f 00 30     ...?.?.0.0.?.?.0
    1848:	00 30 e0 3f e0 3f 00 00 00 00 e0 3f e0 3f 00 30     .0.?.?.....?.?.0
    1858:	00 30 e0 3f e0 3f 00 30 00 30 e0 3f e0 ff 00 f0     .0.?.?.0.0.?....
    1868:	00 00 e0 00 e0 00 60 00 e0 3f e0 3f 00 33 00 33     ......`..?.?.3.3
    1878:	00 33 00 3f 00 1e 00 00 00 00 e0 3f e0 3f 00 33     .3.?.......?.?.3
    1888:	00 33 00 33 00 3f 00 1e 00 00 e0 3f e0 3f 00 00     .3.3.?.....?.?..
    1898:	00 00 00 00 e0 3f e0 3f 00 33 00 33 00 33 00 33     .....?.?.3.3.3.3
    18a8:	00 3f 00 1e 00 00 00 00 00 00 80 08 c0 18 60 30     .?............`0
    18b8:	60 30 60 33 60 33 60 3b c0 1f 80 0f 00 00 00 00     `0`3`3`;........
    18c8:	00 00 e0 3f e0 3f 00 03 80 0f c0 1f e0 38 60 30     ...?.?.......8`0
    18d8:	e0 38 c0 1f 80 0f 00 00 00 00 00 00 c0 31 e0 3b     .8...........1.;
    18e8:	60 1e 60 0e 60 06 60 02 e0 3f e0 3f 00 00 00 00     `.`.`.`..?.?....

000018f8 <_ZL8font8x12>:
	...
    1908:	fc 01 06 03 52 02 c2 02 c2 02 52 02 06 03 fc 01     ....R.....R.....
    1918:	fc 01 fe 03 ae 03 3e 03 3e 03 ae 03 fe 03 fc 01     ......>.>.......
    1928:	78 00 fc 00 f8 01 f0 03 f8 01 fc 00 78 00 00 00     x...........x...
    1938:	30 00 78 00 fc 00 fe 01 fc 00 78 00 30 00 00 00     0.x.......x.0...
    1948:	70 00 70 02 7c 02 9e 03 9e 03 7c 02 70 02 70 00     p.p.|.....|.p.p.
    1958:	30 00 78 02 7c 02 fe 03 fe 03 7c 02 78 02 30 00     0.x.|.....|.x.0.
    1968:	00 00 60 00 f0 00 f0 00 f0 00 f0 00 60 00 00 00     ..`.........`...
    1978:	ff 0f 9f 0f 0f 0f 0f 0f 0f 0f 0f 0f 9f 0f ff 0f     ................
	...
    19a8:	e0 01 f0 03 3a 02 3a 02 ee 03 c6 01 1e 00 00 00     ....:.:.........
    19b8:	00 00 9c 00 be 00 e2 03 e2 03 be 00 9c 00 00 00     ................
	...
    19d8:	00 07 fe 07 fe 03 0a 00 0a 00 8a 03 fe 03 fe 01     ................
    19e8:	68 01 f8 01 f0 00 9c 03 9c 03 f0 00 f8 01 68 01     h.............h.
    19f8:	fe 03 fc 01 f8 00 70 00 70 00 20 00 20 00 00 00     ......p.p. . ...
    1a08:	20 00 20 00 70 00 70 00 f8 00 fc 01 fe 03 00 00      . .p.p.........
    1a18:	00 00 88 00 8c 01 fe 03 fe 03 8c 01 88 00 00 00     ................
    1a28:	00 00 3e 03 3e 03 00 00 00 00 3e 03 3e 03 00 00     ..>.>.....>.>...
    1a38:	1c 00 3e 00 22 00 fe 03 fe 03 02 00 fe 03 fe 03     ..>."...........
    1a48:	00 02 66 06 fe 04 9a 04 92 05 f2 07 66 06 04 00     ..f.........f...
    1a58:	00 00 00 00 fc 03 fc 03 fc 03 fc 03 00 00 00 00     ................
    1a68:	00 00 88 04 8c 05 fe 07 fe 07 8c 05 88 04 00 00     ................
    1a78:	00 00 08 00 0c 00 fe 03 fe 03 0c 00 08 00 00 00     ................
    1a88:	00 00 80 00 80 01 fe 03 fe 03 80 01 80 00 00 00     ................
    1a98:	20 00 20 00 20 00 a8 00 f8 00 70 00 20 00 00 00      . . .....p. ...
    1aa8:	20 00 70 00 f8 00 a8 00 20 00 20 00 20 00 00 00      .p..... . . ...
    1ab8:	f0 00 f0 00 80 00 80 00 80 00 80 00 80 00 00 00     ................
    1ac8:	20 00 70 00 f8 00 20 00 20 00 f8 00 70 00 20 00      .p... . ...p. .
    1ad8:	00 03 c0 03 f0 03 fc 03 f0 03 c0 03 00 03 00 00     ................
    1ae8:	0c 00 3c 00 fc 00 fc 03 fc 00 3c 00 0c 00 00 00     ..<.......<.....
	...
    1b08:	00 00 1c 00 7e 03 7e 03 1c 00 00 00 00 00 00 00     ....~.~.........
    1b18:	00 00 0e 00 1e 00 00 00 00 00 1e 00 0e 00 00 00     ................
    1b28:	88 00 fe 03 fe 03 88 00 fe 03 fe 03 88 00 00 00     ................
    1b38:	18 01 3c 01 27 07 27 07 e4 01 c4 00 00 00 00 00     ..<.'.'.........
    1b48:	18 03 98 01 c0 00 60 00 30 03 18 03 00 00 00 00     ......`.0.......
    1b58:	ec 01 fe 03 32 02 7e 03 ec 01 c0 03 60 02 00 00     ....2.~.....`...
    1b68:	00 00 10 00 1e 00 0e 00 00 00 00 00 00 00 00 00     ................
    1b78:	00 00 70 00 f8 00 8c 01 06 03 02 02 00 00 00 00     ..p.............
    1b88:	00 00 02 02 06 03 8c 01 f8 00 70 00 00 00 00 00     ..........p.....
    1b98:	20 00 a8 00 f8 00 70 00 70 00 f8 00 a8 00 20 00      .....p.p..... .
    1ba8:	00 00 20 00 20 00 f8 00 f8 00 20 00 20 00 00 00     .. . ..... . ...
    1bb8:	00 00 00 04 00 07 00 03 00 03 00 00 00 00 00 00     ................
    1bc8:	20 00 20 00 20 00 20 00 20 00 20 00 20 00 00 00      . . . . . . ...
    1bd8:	00 00 00 00 00 03 00 03 00 03 00 00 00 00 00 00     ................
    1be8:	00 03 80 01 c0 00 60 00 30 00 18 00 0c 00 00 00     ......`.0.......
    1bf8:	fc 01 fe 03 02 02 fa 02 02 02 fe 03 fc 01 00 00     ................
    1c08:	08 02 08 02 fc 03 fe 03 00 02 00 02 00 00 00 00     ................
    1c18:	0c 03 8e 03 c2 02 62 02 3e 03 1c 03 00 00 00 00     ......b.>.......
    1c28:	04 01 06 03 22 02 22 02 fe 03 dc 01 00 00 00 00     ....".".........
    1c38:	60 00 70 00 58 00 4c 02 fe 03 fe 03 40 02 00 00     `.p.X.L.....@...
    1c48:	3e 01 3e 03 22 02 22 02 e2 03 c2 01 00 00 00 00     >.>.".".........
    1c58:	f8 01 fc 03 26 02 22 02 e2 03 c0 01 00 00 00 00     ....&.".........
    1c68:	0e 00 0e 00 82 03 c2 03 62 00 3e 00 1e 00 00 00     ........b.>.....
    1c78:	dc 01 fe 03 32 02 62 02 fe 03 dc 01 00 00 00 00     ....2.b.........
    1c88:	1c 00 3e 02 22 03 e2 03 fe 00 3c 00 00 00 00 00     ..>.".....<.....
    1c98:	00 00 00 00 98 01 98 01 98 01 00 00 00 00 00 00     ................
    1ca8:	00 00 00 00 98 05 98 07 98 03 00 00 00 00 00 00     ................
    1cb8:	20 00 70 00 d8 00 8c 01 06 03 02 02 00 00 00 00      .p.............
    1cc8:	00 00 50 00 50 00 50 00 50 00 50 00 50 00 00 00     ..P.P.P.P.P.P...
    1cd8:	00 00 02 02 06 03 8c 01 d8 00 70 00 20 00 00 00     ..........p. ...
    1ce8:	04 00 06 00 62 03 72 03 1e 00 0c 00 00 00 00 00     ....b.r.........
    1cf8:	fc 01 fe 03 02 02 72 02 72 02 7e 02 7c 00 00 00     ......r.r.~.|...
    1d08:	f8 03 fc 03 46 00 46 00 fc 03 f8 03 00 00 00 00     ....F.F.........
    1d18:	02 02 fe 03 fe 03 22 02 22 02 fe 03 dc 01 00 00     ......".".......
    1d28:	f8 00 fc 01 06 03 02 02 02 02 8e 03 8c 01 00 00     ................
    1d38:	02 02 fe 03 fe 03 02 02 06 03 fc 01 f8 00 00 00     ................
    1d48:	02 02 fe 03 fe 03 22 02 22 02 72 02 06 03 00 00     ......".".r.....
    1d58:	02 02 fe 03 fe 03 22 02 22 00 76 00 0e 00 00 00     ......".".v.....
    1d68:	f8 00 fc 01 06 03 02 02 42 02 ce 03 cc 03 00 00     ........B.......
    1d78:	fe 03 fe 03 20 00 20 00 fe 03 fe 03 00 00 00 00     .... . .........
    1d88:	00 00 02 02 fe 03 fe 03 02 02 00 00 00 00 00 00     ................
    1d98:	c0 01 c0 03 00 02 02 02 fe 03 fe 01 02 00 00 00     ................
    1da8:	02 02 fe 03 fe 03 20 00 f8 00 de 03 06 03 00 00     ...... .........
    1db8:	02 02 fe 03 fe 03 02 02 00 02 80 03 c0 03 00 00     ................
    1dc8:	fe 03 fe 03 1c 00 38 00 1c 00 fe 03 fe 03 00 00     ......8.........
    1dd8:	fe 03 fe 03 38 00 70 00 e0 00 fe 03 fe 03 00 00     ....8.p.........
    1de8:	f8 00 fc 01 06 03 02 02 06 03 fc 01 f8 00 00 00     ................
    1df8:	02 02 fe 03 fe 03 22 02 22 00 3e 00 1c 00 00 00     ......".".>.....
    1e08:	f8 00 fc 01 06 01 82 05 c6 07 fc 07 f8 04 00 00     ................
    1e18:	02 02 fe 03 fe 03 22 00 62 00 fe 03 9c 03 00 00     ......".b.......
    1e28:	9c 01 be 03 22 02 62 02 ce 03 8c 01 00 00 00 00     ....".b.........
    1e38:	06 00 02 02 fe 03 fe 03 02 02 06 00 00 00 00 00     ................
    1e48:	fe 01 fe 03 00 02 00 02 fe 03 fe 01 00 00 00 00     ................
    1e58:	fe 00 fe 01 00 03 00 03 fe 01 fe 00 00 00 00 00     ................
    1e68:	7e 00 fe 03 80 03 60 00 80 03 fe 03 7e 00 00 00     ~.....`.....~...
    1e78:	8e 03 de 03 70 00 70 00 de 03 8e 03 00 00 00 00     ....p.p.........
    1e88:	1e 00 3e 02 e0 03 e0 03 3e 02 1e 00 00 00 00 00     ..>.....>.......
    1e98:	0e 03 c6 03 e2 02 3a 02 1e 02 06 03 86 03 00 00     ......:.........
    1ea8:	00 00 00 00 fe 03 fe 03 02 02 02 02 00 00 00 00     ................
    1eb8:	0c 00 18 00 30 00 60 00 c0 00 80 01 00 03 00 00     ....0.`.........
    1ec8:	00 00 00 00 02 02 02 02 fe 03 fe 03 00 00 00 00     ................
    1ed8:	08 00 0c 00 06 00 03 00 06 00 0c 00 08 00 00 00     ................
    1ee8:	00 04 00 04 00 04 00 04 00 04 00 04 00 04 00 04     ................
    1ef8:	00 00 00 00 03 00 07 00 04 00 00 00 00 00 00 00     ................
    1f08:	80 01 d0 03 50 02 50 02 f0 01 e0 03 00 02 00 00     ....P.P.........
    1f18:	02 02 fe 03 fe 01 10 02 10 02 f0 03 e0 01 00 00     ................
    1f28:	e0 01 f0 03 10 02 10 02 30 03 20 01 00 00 00 00     ........0. .....
    1f38:	e0 01 f0 03 10 02 12 02 fe 01 fe 03 00 02 00 00     ................
    1f48:	e0 01 f0 03 50 02 50 02 70 03 60 01 00 00 00 00     ....P.P.p.`.....
    1f58:	20 02 fc 03 fe 03 22 02 26 00 04 00 00 00 00 00      .....".&.......
    1f68:	e0 04 f0 0d 10 09 10 09 e0 0f f0 07 10 00 00 00     ................
    1f78:	02 02 fe 03 fe 03 20 00 10 00 f0 03 e0 03 00 00     ...... .........
    1f88:	00 00 10 02 10 02 f6 03 f6 03 00 02 00 02 00 00     ................
    1f98:	00 06 00 0e 10 08 10 08 f6 0f f6 07 00 00 00 00     ................
    1fa8:	02 02 fe 03 fe 03 40 00 e0 00 b0 03 10 03 00 00     ......@.........
    1fb8:	00 00 02 02 02 02 fe 03 fe 03 00 02 00 02 00 00     ................
    1fc8:	f0 03 f0 03 10 00 f0 01 10 00 f0 03 e0 03 00 00     ................
    1fd8:	f0 03 f0 03 10 00 10 00 f0 03 e0 03 00 00 00 00     ................
    1fe8:	e0 01 f0 03 10 02 10 02 f0 03 e0 01 00 00 00 00     ................
    1ff8:	10 08 f0 0f e0 0f 10 0a 10 02 f0 03 e0 01 00 00     ................
    2008:	e0 01 f0 03 10 02 10 0a e0 0f f0 0f 10 08 00 00     ................
    2018:	10 02 f0 03 f0 03 40 02 30 00 70 00 60 00 00 00     ......@.0.p.`...
    2028:	20 01 70 03 50 02 90 02 b0 03 20 01 00 00 00 00      .p.P..... .....
    2038:	10 00 f8 01 fc 03 10 02 10 03 10 01 00 00 00 00     ................
    2048:	f0 01 f0 03 00 02 00 02 f0 01 f0 03 00 02 00 00     ................
    2058:	f0 00 f0 01 00 03 00 03 f0 01 f0 00 00 00 00 00     ................
    2068:	f0 00 f0 03 00 03 c0 00 00 03 f0 03 f0 00 00 00     ................
    2078:	10 02 30 03 e0 01 c0 00 e0 01 30 03 10 02 00 00     ..0.......0.....
    2088:	00 08 f0 08 f0 09 00 0d 00 07 f0 03 f0 00 00 00     ................
    2098:	30 03 90 03 90 02 50 02 70 02 30 03 00 00 00 00     0.....P.p.0.....
    20a8:	20 00 70 00 dc 01 8e 03 02 02 02 02 00 00 00 00      .p.............
    20b8:	00 00 00 00 00 00 de 03 de 03 00 00 00 00 00 00     ................
    20c8:	02 02 02 02 8e 03 dc 01 70 00 20 00 00 00 00 00     ........p. .....
    20d8:	0c 00 0e 00 02 00 06 00 0c 00 08 00 0e 00 02 00     ................
    20e8:	c0 01 e0 01 30 01 18 01 30 01 e0 01 c0 01 00 00     ....0...0.......
	...
    2118:	00 00 10 00 1e 00 0e 00 00 00 00 00 00 00 00 00     ................
	...
    2138:	00 00 0e 00 1e 00 00 00 00 00 1e 00 0e 00 00 00     ................
    2148:	00 00 00 00 98 01 98 01 98 01 00 00 00 00 00 00     ................
    2158:	20 00 20 00 20 00 ff 0f ff 0f 20 00 20 00 20 00      . . ..... . . .
    2168:	90 00 90 00 90 00 9f 0f 9f 0f 90 00 90 00 90 00     ................
	...
    2188:	18 03 98 01 c0 00 60 00 30 03 18 03 00 00 00 00     ......`.0.......
	...
    21a8:	20 00 70 00 d8 00 8c 01 06 03 02 02 00 00 00 00      .p.............
	...
    2208:	00 00 10 00 1e 00 0e 00 00 00 00 00 00 00 00 00     ................
    2218:	00 00 10 00 1e 00 0e 00 00 00 00 00 00 00 00 00     ................
    2228:	00 00 0e 00 1e 00 00 00 00 00 1e 00 0e 00 00 00     ................
    2238:	00 00 0e 00 1e 00 00 00 00 00 1e 00 0e 00 00 00     ................
    2248:	00 00 60 00 f0 00 f0 00 f0 00 f0 00 60 00 00 00     ..`.........`...
    2258:	20 00 20 00 20 00 20 00 20 00 20 00 20 00 00 00      . . . . . . ...
    2268:	20 00 20 00 20 00 20 00 20 00 20 00 20 00 00 00      . . . . . . ...
	...
    2288:	06 00 02 02 fe 03 fe 03 02 02 06 00 00 00 00 00     ................
	...
    22a8:	00 00 02 02 06 03 8c 01 d8 00 70 00 20 00 00 00     ..........p. ...
	...
    2308:	00 00 3c 01 7c 03 41 02 41 02 fc 03 fc 01 00 00     ..<.|.A.A.......
    2318:	00 08 f0 08 f0 09 04 0d 04 07 f0 03 f0 00 00 00     ................
	...
    2338:	00 00 44 00 7c 00 28 00 28 00 7c 00 44 00 00 00     ..D.|.(.(.|.D...
	...
    235c:	00 00 ff 0f ff 0f 00 00 00 00 00 00 00 02 66 06     ..............f.
    236c:	fe 04 9a 04 92 05 f2 07 66 06 04 00 02 02 ff 03     ........f.......
    237c:	ff 03 22 02 23 02 73 02 06 03 00 00 e0 01 f0 03     ..".#.s.........
    238c:	10 02 10 02 30 03 20 01 00 00 00 00 f8 00 fc 01     ....0. .........
    239c:	26 03 22 02 02 02 8e 03 8c 01 00 00 20 00 70 00     &."......... .p.
    23ac:	d8 00 8c 01 06 03 02 02 00 00 00 00 20 00 20 00     ............ . .
    23bc:	20 00 e0 0f e0 0f 00 00 00 00 00 00 20 00 20 00      ........... . .
    23cc:	20 00 20 00 20 00 20 00 20 00 00 00 02 02 fe 03      . . . . .......
    23dc:	fe 03 22 00 62 00 fe 03 9c 03 00 00 03 00 03 02     ..".b...........
    23ec:	fc 03 fc 03 03 02 03 00 00 00 00 00 00 00 1c 00     ................
    23fc:	3e 00 22 00 22 00 3e 00 1c 00 00 00 00 00 20 00     >.".".>....... .
    240c:	20 00 f8 00 f8 00 20 00 20 00 00 00 00 00 00 00      ..... . .......
	...
    2448:	70 00 f0 00 80 00 80 00 f0 03 f0 03 00 00 00 00     p...............
    2458:	1c 00 3e 00 22 00 fe 03 fe 03 02 00 fe 03 fe 03     ..>."...........
    2468:	00 00 00 00 00 00 20 00 20 00 00 00 00 00 00 00     ...... . .......
    2478:	e0 01 f6 03 50 02 50 02 76 03 60 01 00 00 00 00     ....P.P.v.`.....
    2488:	fe 03 fe 03 30 00 60 00 fe 03 fe 03 66 00 00 00     ....0.`.....f...
    2498:	e0 01 f0 03 50 02 50 02 30 03 20 01 00 00 00 00     ....P.P.0. .....
    24a8:	00 00 02 02 06 03 8c 01 d8 00 70 00 20 00 00 00     ..........p. ...
	...
    24e8:	00 00 06 00 06 02 f0 03 f0 03 06 02 06 00 00 00     ................
    24f8:	f8 03 fc 03 46 00 46 00 fc 03 f8 03 00 00 00 00     ....F.F.........
    2508:	02 02 fe 03 fe 03 12 02 12 02 f2 03 e6 01 00 00     ................
    2518:	02 02 fe 03 fe 03 22 02 22 02 fe 03 dc 01 00 00     ......".".......
    2528:	02 02 fe 03 fe 03 02 02 02 00 02 00 0e 00 00 00     ................
    2538:	00 06 fc 07 fe 03 02 02 02 02 fe 03 fe 07 00 06     ................
    2548:	02 02 fe 03 fe 03 22 02 22 02 72 02 06 03 00 00     ......".".r.....
    2558:	06 03 dc 01 70 00 fe 03 fe 03 70 00 dc 01 06 03     ....p.....p.....
    2568:	00 00 8c 01 06 03 22 02 22 02 fe 03 dc 01 00 00     ......".".......
    2578:	fe 03 fe 03 e0 00 70 00 38 00 fe 03 fe 03 00 00     ......p.8.......
    2588:	fe 03 fe 03 e4 00 77 00 39 00 fe 03 fe 03 00 00     ......w.9.......
    2598:	02 02 fe 03 fe 03 20 00 f8 00 de 03 06 03 00 00     ...... .........
    25a8:	00 02 f8 03 fc 01 06 00 06 00 fe 03 fe 03 00 00     ................
    25b8:	fe 03 fe 03 1c 00 38 00 1c 00 fe 03 fe 03 00 00     ......8.........
    25c8:	fe 03 fe 03 20 00 20 00 20 00 fe 03 fe 03 00 00     .... . . .......
    25d8:	f8 00 fc 01 06 03 02 02 06 03 fc 01 f8 00 00 00     ................
    25e8:	fe 03 fe 03 02 00 02 00 02 00 fe 03 fe 03 00 00     ................
    25f8:	02 02 fe 03 fe 03 22 02 22 00 3e 00 1c 00 00 00     ......".".>.....
    2608:	f8 00 fc 01 06 03 02 02 02 02 8e 03 8c 01 00 00     ................
    2618:	00 00 06 00 02 02 fe 03 fe 03 02 02 06 00 00 00     ................
    2628:	00 00 3e 01 7e 03 40 02 40 02 fe 03 fe 01 00 00     ..>.~.@.@.......
    2638:	78 00 fc 00 84 00 fe 03 fe 03 84 00 fc 00 78 00     x.............x.
    2648:	8e 03 de 03 70 00 70 00 de 03 8e 03 00 00 00 00     ....p.p.........
    2658:	fe 03 fe 03 00 02 00 02 fe 03 fe 07 00 06 00 00     ................
    2668:	3e 00 7e 00 40 00 40 00 40 00 fe 03 fe 03 00 00     >.~.@.@.@.......
    2678:	fe 03 fe 03 00 02 fe 03 00 02 fe 03 fe 03 00 00     ................
    2688:	fe 03 fe 03 00 02 fe 03 00 02 fe 03 fe 07 00 06     ................
    2698:	06 00 fe 03 fe 03 20 02 20 02 e0 03 c0 01 00 00     ...... . .......
    26a8:	fe 03 fe 03 20 02 e0 03 c0 01 fe 03 fe 03 00 00     .... ...........
    26b8:	fc 03 fc 03 20 02 20 02 20 02 e0 03 c0 01 00 00     .... . . .......
    26c8:	8c 01 8e 03 02 02 22 02 26 03 fc 01 f8 00 00 00     ......".&.......
    26d8:	fe 03 fe 03 30 00 fc 01 fe 03 02 02 fe 03 fc 01     ....0...........
    26e8:	00 02 9c 03 fe 03 62 00 22 00 fe 03 fe 03 02 02     ......b.".......
    26f8:	80 01 d0 03 50 02 50 02 f0 01 e0 03 00 02 00 00     ....P.P.........
    2708:	e0 01 f0 03 50 02 50 02 d0 03 98 01 00 00 00 00     ....P.P.........
    2718:	f0 03 f0 03 50 02 50 02 f0 03 a0 01 00 00 00 00     ....P.P.........
    2728:	f0 03 f0 03 10 00 10 00 10 00 10 00 00 00 00 00     ................
    2738:	00 06 f0 07 f0 03 10 02 f0 03 f0 07 00 06 00 00     ................
    2748:	e0 01 f0 03 50 02 50 02 70 03 60 01 00 00 00 00     ....P.P.p.`.....
    2758:	30 03 e0 01 c0 00 f0 03 c0 00 e0 01 30 03 00 00     0...........0...
    2768:	20 01 10 02 50 02 50 02 f0 03 a0 01 00 00 00 00      ...P.P.........
    2778:	f0 03 f0 03 80 01 c0 00 f0 03 f0 03 00 00 00 00     ................
    2788:	f0 03 f0 03 80 01 cc 00 f6 03 f0 03 00 00 00 00     ................
    2798:	f0 03 f0 03 40 00 e0 00 b0 03 10 02 00 00 00 00     ....@...........
    27a8:	00 02 80 03 e0 00 30 00 f0 03 f0 03 00 00 00 00     ......0.........
    27b8:	f0 03 f0 03 20 00 c0 00 20 00 f0 03 f0 03 00 00     .... ... .......
    27c8:	f0 03 f0 03 40 00 40 00 f0 03 f0 03 00 00 00 00     ....@.@.........
    27d8:	e0 01 f0 03 10 02 10 02 f0 03 e0 01 00 00 00 00     ................
    27e8:	f0 03 f0 03 10 00 10 00 f0 03 f0 03 00 00 00 00     ................
    27f8:	f0 0f f0 0f 10 02 10 02 f0 03 e0 01 00 00 00 00     ................
    2808:	e0 01 f0 03 10 02 10 02 30 03 20 01 00 00 00 00     ........0. .....
    2818:	10 00 10 00 f0 03 f0 03 10 00 10 00 00 00 00 00     ................
    2828:	00 00 f0 04 f0 0d 00 09 00 09 f0 0f f0 07 00 00     ................
    2838:	e0 00 f0 01 10 01 f8 07 10 01 f0 01 e0 00 00 00     ................
    2848:	10 02 30 03 e0 01 c0 00 e0 01 30 03 10 02 00 00     ..0.......0.....
    2858:	f0 03 f0 03 00 02 00 02 f0 03 f0 07 00 06 00 00     ................
    2868:	70 00 f0 00 80 00 80 00 f0 03 f0 03 00 00 00 00     p...............
    2878:	f0 03 f0 03 00 02 f0 03 00 02 f0 03 f0 03 00 00     ................
    2888:	f0 03 f0 03 00 02 f0 03 00 02 f0 03 f0 07 00 06     ................
    2898:	30 00 f0 03 f0 03 40 02 40 02 c0 03 80 01 00 00     0.....@.@.......
    28a8:	f0 03 f0 03 40 02 c0 03 80 01 f0 03 f0 03 00 00     ....@...........
    28b8:	f0 03 f0 03 40 02 40 02 c0 03 80 01 00 00 00 00     ....@.@.........
    28c8:	20 01 30 03 50 02 50 02 f0 03 e0 01 00 00 00 00      .0.P.P.........
    28d8:	f0 03 f0 03 e0 01 f0 03 10 02 f0 03 e0 01 00 00     ................
    28e8:	60 02 f0 03 90 01 90 00 f0 03 f0 03 00 00 00 00     `...............

000028f8 <_ZL7font8x8>:
	...
    2900:	7e 81 95 b1 b1 95 81 7e 7e ff eb cf cf eb ff 7e     ~......~~......~
    2910:	0e 1f 3f 7e 3f 1f 0e 00 08 1c 3e 7f 3e 1c 08 00     ..?~?.....>.>...
    2920:	38 3a 9f ff 9f 3a 38 00 10 38 bc ff bc 38 10 00     8:...:8..8...8..
    2930:	00 00 18 3c 3c 18 00 00 ff ff e7 c3 c3 e7 ff ff     ...<<...........
	...
    2950:	70 f8 88 88 fd 7f 07 0f 00 4e 5f f1 f1 5f 4e 00     p........N_.._N.
	...
    2968:	c0 ff 7f 05 05 65 7f 3f 99 5a 3c e7 e7 3c 5a 99     .....e.?.Z<..<Z.
    2978:	7f 3e 3e 1c 1c 08 08 00 08 08 1c 1c 3e 3e 7f 00     .>>.........>>..
    2988:	00 24 66 ff ff 66 24 00 00 5f 5f 00 00 5f 5f 00     .$f..f$..__..__.
    2998:	06 0f 09 7f 7f 01 7f 7f da bf a5 a5 fd 59 03 02     .............Y..
    29a8:	00 00 3c 3c 3c 3c 00 00 80 94 b6 ff ff b6 94 80     ..<<<<..........
    29b8:	00 04 06 7f 7f 06 04 00 00 10 30 7f 7f 30 10 00     ..........0..0..
    29c8:	08 08 08 2a 3e 1c 08 00 08 1c 3e 2a 08 08 08 00     ...*>.....>*....
    29d8:	3c 3c 20 20 20 20 20 00 08 1c 3e 08 08 3e 1c 08     <<     ...>..>..
    29e8:	30 38 3c 3e 3e 3c 38 30 06 0e 1e 3e 3e 1e 0e 06     08<>><80...>>...
	...
    2a00:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
    2a10:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
    2a20:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
    2a30:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
    2a40:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
    2a50:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
    2a60:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
    2a70:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
    2a80:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
    2a90:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
    2aa0:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
    2ab0:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
    2ac0:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
    2ad0:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
    2ae0:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
    2af0:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
    2b00:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
    2b10:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
    2b20:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
    2b30:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
    2b40:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
    2b50:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
    2b60:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
    2b70:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
    2b80:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
    2b90:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
    2ba0:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
    2bb0:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
    2bc0:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
    2bd0:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
    2be0:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
    2bf0:	40 40 40 40 40 40 40 40 00 00 03 07 04 00 00 00     @@@@@@@@........
    2c00:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
    2c10:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
    2c20:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
    2c30:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
    2c40:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
    2c50:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
    2c60:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
    2c70:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
    2c80:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
    2c90:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
    2ca0:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
    2cb0:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
    2cc0:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
    2cd0:	ff 81 81 81 81 81 81 ff ff 81 bd bd bd bd 81 ff     ................
    2ce0:	01 31 79 79 7d 7f 7d 31 11 11 11 10 10 10 38 10     .1yy}.}1......8.
    2cf0:	3e 08 1c 1c 7c 3e 1e 1e 1e 1c 18 18 18 1c 0e 0e     >...|>..........
    2d00:	f0 08 04 02 01 51 f1 f1 fd f1 f1 71 1a 0c 08 f0     .....Q.....q....
    2d10:	0f 10 24 74 9c 8e 9f 9f 9f 9f 9f 9e 40 20 10 0f     ..$t........@ ..
    2d20:	00 00 6c 6c 00 00 00 00 10 10 10 ff ff 10 10 10     ..ll............
    2d30:	14 14 14 ff ff 14 14 14 00 00 00 00 00 00 00 00     ................
    2d40:	46 66 30 18 0c 66 62 00 00 00 00 00 00 00 00 00     Ff0..fb.........
    2d50:	08 1c 36 63 41 00 00 00 00 00 00 00 00 00 00 00     ..6cA...........
	...
    2d80:	04 07 03 00 00 00 00 00 04 07 03 00 00 00 00 00     ................
    2d90:	00 07 07 00 07 07 00 00 00 07 07 00 07 07 00 00     ................
    2da0:	00 00 18 3c 3c 18 00 00 08 08 08 08 08 08 00 00     ...<<...........
    2db0:	08 08 08 08 08 08 00 00 00 00 00 00 00 00 00 00     ................
    2dc0:	03 41 7f 7f 41 03 00 00 00 00 00 00 00 00 00 00     .A..A...........
    2dd0:	00 41 63 36 1c 08 00 00 00 00 00 00 00 00 00 00     .Ac6............
	...
    2e00:	26 6e 48 49 48 7e 3e 00 1f bf a0 a3 a0 ff 7f 00     &nHIH~>.........
	...
    2e18:	5a 7e 24 24 24 7e 5a 00 00 00 00 00 00 00 00 00     Z~$$$~Z.........
    2e28:	00 00 00 ff ff 00 00 00 da bf a5 a5 fd 59 03 02     .............Y..
    2e38:	42 7f 7f 4a 4b 43 66 00 38 7c 44 44 6c 28 00 00     B..JKCf.8|DDl(..
    2e48:	1c 3e 6b 49 49 63 22 00 08 1c 36 63 41 00 00 00     .>kIIc"...6cA...
    2e58:	10 10 10 f0 f0 00 00 00 08 08 08 08 08 08 00 00     ................
    2e68:	41 7f 7f 19 39 6f 46 00 01 41 7e 7e 41 01 00 00     A...9oF..A~~A...
    2e78:	00 06 0f 09 0f 06 00 00 08 08 3e 3e 08 08 00 00     ..........>>....
	...
    2ea0:	0c 1c 10 10 10 7c 7c 00 06 0f 09 7f 7f 01 7f 7f     .....||.........
    2eb0:	00 00 00 10 10 00 00 00 39 7d 54 54 5d 19 00 00     ........9}TT]...
    2ec0:	7f 7e 0c 18 7f 7f 09 00 38 7c 54 54 44 6c 28 00     .~......8|TTDl(.
    2ed0:	00 41 63 36 1c 08 00 00 00 00 00 00 00 00 00 00     .Ac6............
	...
    2ef0:	01 45 7c 7c 41 01 00 00 7c 7e 13 11 11 7f 7f 00     .E||A...|~......
    2f00:	41 7f 7f 49 49 7b 33 00 41 7f 7f 49 49 7f 36 00     A..II{3.A..II.6.
    2f10:	41 7f 7f 41 01 03 03 00 c0 fc 7e 43 41 7f ff c0     A..A......~CA...
    2f20:	41 7f 7f 49 5d 41 63 00 63 77 1c 7f 1c 77 63 00     A..I]Ac.cw...wc.
    2f30:	22 63 49 49 7f 36 00 00 7f 7f 30 18 0c 7f 7f 00     "cII.6....0.....
    2f40:	7f 7f 30 19 0c 7f 7f 00 41 7f 7f 08 1c 77 63 00     ..0.....A....wc.
    2f50:	40 7e 3e 03 01 7f 7f 00 7f 7f 06 0c 06 7f 7f 00     @~>.............
    2f60:	7f 7f 08 08 08 7f 7f 00 1c 3e 63 41 63 3e 1c 00     .........>cAc>..
    2f70:	7f 7f 01 01 01 7f 7f 00 41 7f 7f 49 09 0f 06 00     ........A..I....
    2f80:	1c 3e 63 41 41 63 22 00 03 41 7f 7f 41 03 00 00     .>cAAc"..A..A...
    2f90:	27 6f 48 48 48 7f 3f 00 0e 1f 51 7f 51 1f 0e 00     'oHHH.?...Q.Q...
    2fa0:	63 77 1c 08 1c 77 63 00 7f 7f 40 40 7f ff c0 00     cw...wc...@@....
    2fb0:	07 0f 08 08 08 7f 7f 00 7f 7f 40 7f 40 7f 7f 00     ..........@.@...
    2fc0:	7f 7f 40 7f 40 7f ff c0 07 03 7f 7f 48 78 30 00     ..@.@.......Hx0.
    2fd0:	7f 7f 48 78 30 7f 7f 00 01 7f 7f 49 48 78 30 00     ..Hx0......IHx0.
    2fe0:	22 63 49 49 6b 3e 1c 00 7f 7f 08 7f 41 7f 3e 00     "cIIk>......A.>.
    2ff0:	46 6f 39 19 19 7f 7f 00 20 74 54 54 3c 78 40 00     Fo9..... tTT<x@.
    3000:	34 7e 4a 4a 4a 7b 31 00 44 7c 7c 54 54 7c 28 00     4~JJJ{1.D||TT|(.
    3010:	44 7c 7c 44 04 0c 0c 00 c0 f8 7c 44 7c fc c0 00     D||D......|D|...
    3020:	38 7c 54 54 5c 18 00 00 44 6c 38 7c 38 6c 44 00     8|TT\...Dl8|8lD.
    3030:	28 6c 44 54 54 7c 28 00 7c 7c 60 30 18 7c 7c 00     (lDTT|(.||`0.||.
    3040:	7e 7e 60 31 18 7e 7e 00 44 7c 7c 10 38 6c 44 00     ~~`1.~~.D||.8lD.
    3050:	40 78 7c 04 04 7c 7c 00 7c 7c 18 38 18 7c 7c 00     @x|..||.||.8.||.
    3060:	7c 7c 10 10 10 7c 7c 00 38 7c 44 44 7c 38 00 00     ||...||.8|DD|8..
    3070:	7c 7c 04 04 04 7c 7c 00 84 fc fc a4 24 3c 18 00     ||...||.....$<..
    3080:	38 7c 44 44 6c 28 00 00 00 0c 44 7c 7c 44 0c 00     8|DDl(....D||D..
    3090:	1c bc a0 a0 a0 fc 7c 00 18 3c a4 fc a4 3c 18 00     ......|..<...<..
    30a0:	44 6c 38 10 38 6c 44 00 7c 7c 40 40 7c fc c0 00     Dl8.8lD.||@@|...
    30b0:	0c 1c 10 10 10 7c 7c 00 7c 7c 40 7c 40 7c 7c 00     .....||.||@|@||.
    30c0:	7c 7c 40 7c 40 7c fc c0 0c 04 7c 7c 50 70 20 00     ||@|@|....||Pp .
    30d0:	7c 7c 50 70 20 7c 7c 00 04 7c 7c 54 50 70 20 00     ||Pp ||..||TPp .
    30e0:	28 6c 44 54 54 7c 38 00 7c 7c 10 7c 44 7c 38 00     (lDTT|8.||.|D|8.
    30f0:	48 7c 34 14 14 7c 7c 00                             H|4..||.

000030f8 <_ZL7font6x8>:
	...
    3100:	00 3e 45 51 45 3e 00 00 00 3e 6b 6f 6b 3e 00 00     .>EQE>...>kok>..
    3110:	00 1c 3e 7c 3e 1c 00 00 00 18 3c 7e 3c 18 00 00     ..>|>.....<~<...
    3120:	00 30 36 7f 36 30 00 00 00 18 5c 7e 5c 18 00 00     .06.60....\~\...
    3130:	00 00 18 18 00 00 00 00 ff ff e7 e7 ff ff 00 00     ................
	...
    3150:	00 30 48 4a 36 0e 00 00 00 06 29 79 29 06 00 00     .0HJ6.....)y)...
	...
    3168:	00 60 7e 0a 35 3f 00 00 00 2a 1c 36 1c 2a 00 00     .`~.5?...*.6.*..
    3178:	00 00 7f 3e 1c 08 00 00 00 08 1c 3e 7f 00 00 00     ...>.......>....
    3188:	00 14 36 7f 36 14 00 00 00 00 5f 00 5f 00 00 00     ..6.6....._._...
    3198:	00 06 09 7f 01 7f 00 00 00 22 4d 55 59 22 00 00     ........."MUY"..
    31a8:	00 3c 3c 3c 3c 00 00 00 00 14 b6 ff b6 14 00 00     .<<<<...........
    31b8:	00 04 06 7f 06 04 00 00 00 10 30 7f 30 10 00 00     ..........0.0...
    31c8:	00 08 08 3e 1c 08 00 00 00 08 1c 3e 08 08 00 00     ...>.......>....
    31d8:	00 78 40 40 40 40 00 00 00 08 3e 08 3e 08 00 00     .x@@@@....>.>...
    31e8:	00 30 3c 3f 3c 30 00 00 00 03 0f 3f 0f 03 00 00     .0<?<0.....?....
	...
    3200:	00 00 06 5f 06 00 00 00 00 07 03 00 07 03 00 00     ..._............
    3210:	00 24 7e 24 7e 24 00 00 00 24 2b 6a 12 00 00 00     .$~$~$...$+j....
    3220:	00 63 13 08 64 63 00 00 00 36 49 56 20 50 00 00     .c..dc...6IV P..
    3230:	00 00 07 03 00 00 00 00 00 00 3e 41 00 00 00 00     ..........>A....
    3240:	00 00 41 3e 00 00 00 00 00 08 3e 1c 3e 08 00 00     ..A>......>.>...
    3250:	00 08 08 3e 08 08 00 00 00 00 e0 60 00 00 00 00     ...>.......`....
    3260:	00 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
    3270:	00 20 10 08 04 02 00 00 00 3e 51 49 45 3e 00 00     . .......>QIE>..
    3280:	00 00 42 7f 40 00 00 00 00 62 51 49 49 46 00 00     ..B.@....bQIIF..
    3290:	00 22 49 49 49 36 00 00 00 18 14 12 7f 10 00 00     ."III6..........
    32a0:	00 2f 49 49 49 31 00 00 00 3c 4a 49 49 30 00 00     ./III1...<JII0..
    32b0:	00 01 71 09 05 03 00 00 00 36 49 49 49 36 00 00     ..q......6III6..
    32c0:	00 06 49 49 29 1e 00 00 00 00 6c 6c 00 00 00 00     ..II).....ll....
    32d0:	00 00 ec 6c 00 00 00 00 00 08 14 22 41 00 00 00     ...l......."A...
    32e0:	00 24 24 24 24 24 00 00 00 00 41 22 14 08 00 00     .$$$$$....A"....
    32f0:	00 02 01 59 09 06 00 00 00 3e 41 5d 55 1e 00 00     ...Y.....>A]U...
    3300:	00 7e 11 11 11 7e 00 00 00 7f 49 49 49 36 00 00     .~...~....III6..
    3310:	00 3e 41 41 41 22 00 00 00 7f 41 41 41 3e 00 00     .>AAA"....AAA>..
    3320:	00 7f 49 49 49 41 00 00 00 7f 09 09 09 01 00 00     ..IIIA..........
    3330:	00 3e 41 49 49 7a 00 00 00 7f 08 08 08 7f 00 00     .>AIIz..........
    3340:	00 00 41 7f 41 00 00 00 00 30 40 40 40 3f 00 00     ..A.A....0@@@?..
    3350:	00 7f 08 14 22 41 00 00 00 7f 40 40 40 40 00 00     ...."A....@@@@..
    3360:	00 7f 02 04 02 7f 00 00 00 7f 02 04 08 7f 00 00     ................
    3370:	00 3e 41 41 41 3e 00 00 00 7f 09 09 09 06 00 00     .>AAA>..........
    3380:	00 3e 41 51 21 5e 00 00 00 7f 09 09 19 66 00 00     .>AQ!^.......f..
    3390:	00 26 49 49 49 32 00 00 00 01 01 7f 01 01 00 00     .&III2..........
    33a0:	00 3f 40 40 40 3f 00 00 00 1f 20 40 20 1f 00 00     .?@@@?.... @ ...
    33b0:	00 3f 40 3c 40 3f 00 00 00 63 14 08 14 63 00 00     .?@<@?...c...c..
    33c0:	00 07 08 70 08 07 00 00 00 71 49 45 43 00 00 00     ...p.....qIEC...
    33d0:	00 00 7f 41 41 00 00 00 00 02 04 08 10 20 00 00     ...AA........ ..
    33e0:	00 00 41 41 7f 00 00 00 00 04 02 01 02 04 00 00     ..AA............
    33f0:	40 40 40 40 40 40 00 00 00 00 03 07 00 00 00 00     @@@@@@..........
    3400:	00 20 54 54 54 78 00 00 00 7f 44 44 44 38 00 00     . TTTx....DDD8..
    3410:	00 38 44 44 44 28 00 00 00 38 44 44 44 7f 00 00     .8DDD(...8DDD...
    3420:	00 38 54 54 54 08 00 00 00 08 7e 09 09 00 00 00     .8TTT.....~.....
    3430:	00 18 a4 a4 a4 7c 00 00 00 7f 04 04 78 00 00 00     .....|......x...
    3440:	00 00 00 7d 40 00 00 00 00 40 80 84 7d 00 00 00     ...}@....@..}...
    3450:	00 7f 10 28 44 00 00 00 00 00 00 7f 40 00 00 00     ...(D.......@...
    3460:	00 7c 04 18 04 78 00 00 00 7c 04 04 78 00 00 00     .|...x...|..x...
    3470:	00 38 44 44 44 38 00 00 00 fc 44 44 44 38 00 00     .8DDD8....DDD8..
    3480:	00 38 44 44 44 fc 00 00 00 44 78 44 04 08 00 00     .8DDD....DxD....
    3490:	00 08 54 54 54 20 00 00 00 04 3e 44 24 00 00 00     ..TTT ....>D$...
    34a0:	00 3c 40 20 7c 00 00 00 00 1c 20 40 20 1c 00 00     .<@ |..... @ ...
    34b0:	00 3c 60 30 60 3c 00 00 00 6c 10 10 6c 00 00 00     .<`0`<...l..l...
    34c0:	00 9c a0 60 3c 00 00 00 00 64 54 54 4c 00 00 00     ...`<....dTTL...
    34d0:	00 08 3e 41 41 00 00 00 00 00 00 77 00 00 00 00     ..>AA......w....
    34e0:	00 00 41 41 3e 08 00 00 00 02 01 02 01 00 00 00     ..AA>...........
    34f0:	00 3c 26 23 26 3c 00 00 00 00 00 00 00 00 00 00     .<&#&<..........
	...
    3508:	00 00 07 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3518:	00 07 03 00 07 03 00 00 00 00 6c 6c 00 00 00 00     ..........ll....
    3528:	08 08 08 ff 08 08 00 00 0a 0a 0a ff 0a 0a 00 00     ................
	...
    3540:	00 63 13 08 64 63 00 00 00 00 00 00 00 00 00 00     .c..dc..........
    3550:	00 08 14 22 41 00 00 00 00 00 00 00 00 00 00 00     ..."A...........
	...
    3580:	00 00 07 03 00 00 00 00 00 00 07 03 00 00 00 00     ................
    3590:	00 07 03 00 07 03 00 00 00 07 03 00 07 03 00 00     ................
    35a0:	00 00 18 18 00 00 00 00 00 08 08 08 08 08 00 00     ................
    35b0:	00 08 08 08 08 08 00 00 00 00 00 00 00 00 00 00     ................
    35c0:	00 01 01 7f 01 01 00 00 00 00 00 00 00 00 00 00     ................
    35d0:	00 00 41 22 14 08 00 00 00 00 00 00 00 00 00 00     ..A"............
	...
    3600:	00 27 48 4b 48 3f 00 00 00 9c a1 61 3c 00 00 00     .'HKH?.....a<...
	...
    3618:	2a 3e 14 14 3e 2a 00 00 00 00 00 00 00 00 00 00     *>..>*..........
    3628:	00 00 00 ff 00 00 00 00 00 22 4d 55 59 22 00 00     ........."MUY"..
    3638:	00 7e 4b 4a 4b 42 00 00 00 38 44 44 44 28 00 00     .~KJKB...8DDD(..
    3648:	00 3e 49 49 41 22 00 00 00 08 14 22 41 00 00 00     .>IIA"....."A...
    3658:	08 08 08 f8 00 00 00 00 00 08 08 08 08 08 00 00     ................
    3668:	00 7f 09 09 19 66 00 00 00 01 40 7e 40 01 00 00     .....f....@~@...
    3678:	00 06 09 09 06 00 00 00 00 08 08 3e 08 08 00 00     ...........>....
	...
    36a0:	00 0c 10 10 10 7c 00 00 00 06 09 7f 01 7f 00 00     .....|..........
    36b0:	00 00 08 00 00 00 00 00 00 38 55 54 55 08 00 00     .........8UTU...
    36c0:	7f 06 18 7f 13 13 00 00 00 38 54 54 44 28 00 00     .........8TTD(..
    36d0:	00 00 41 22 14 08 00 00 00 00 00 00 00 00 00 00     ..A"............
	...
    36f0:	00 00 01 7c 41 00 00 00 00 7e 11 11 11 7e 00 00     ...|A....~...~..
    3700:	00 7f 49 49 49 31 00 00 00 7f 49 49 49 36 00 00     ..III1....III6..
    3710:	00 7f 01 01 01 01 00 00 60 3e 21 21 3f 60 00 00     ........`>!!?`..
    3720:	00 7f 49 49 49 41 00 00 00 77 08 7f 08 77 00 00     ..IIIA...w...w..
    3730:	22 49 49 49 36 00 00 00 00 7f 20 10 08 7f 00 00     "III6..... .....
    3740:	00 7f 20 13 08 7f 00 00 00 7f 08 14 22 41 00 00     .. ........."A..
    3750:	00 40 7e 01 01 7f 00 00 00 7f 02 04 02 7f 00 00     .@~.............
    3760:	00 7f 08 08 08 7f 00 00 00 3e 41 41 41 3e 00 00     .........>AAA>..
    3770:	00 7f 01 01 01 7f 00 00 00 7f 09 09 09 06 00 00     ................
    3780:	00 3e 41 41 41 22 00 00 00 01 01 7f 01 01 00 00     .>AAA"..........
    3790:	00 27 48 48 48 3f 00 00 00 0e 11 7f 11 0e 00 00     .'HHH?..........
    37a0:	00 63 14 08 14 63 00 00 00 7f 40 40 7f c0 00 00     .c...c....@@....
    37b0:	00 07 08 08 08 7f 00 00 00 7f 40 7f 40 7f 00 00     ..........@.@...
    37c0:	00 7f 40 7f 40 ff 00 00 03 01 7f 48 48 30 00 00     ..@.@......HH0..
    37d0:	00 7f 48 48 30 7f 00 00 00 7f 48 48 48 30 00 00     ..HH0.....HHH0..
    37e0:	00 22 41 49 49 3e 00 00 00 7f 08 3e 41 3e 00 00     ."AII>.....>A>..
    37f0:	00 66 19 09 09 7f 00 00 00 20 54 54 54 78 00 00     .f....... TTTx..
    3800:	00 3c 4a 4a 4a 31 00 00 00 7c 54 54 54 28 00 00     .<JJJ1...|TTT(..
    3810:	00 7c 04 04 0c 00 00 00 60 38 24 24 3c 60 00 00     .|......`8$$<`..
    3820:	00 38 54 54 54 08 00 00 00 6c 10 7c 10 6c 00 00     .8TTT....l.|.l..
    3830:	00 28 44 54 54 28 00 00 00 7c 20 10 08 7c 00 00     .(DTT(...| ..|..
    3840:	00 7c 20 12 0a 7c 00 00 00 7c 10 28 44 00 00 00     .| ..|...|.(D...
    3850:	40 38 04 04 7c 00 00 00 00 7c 08 10 08 7c 00 00     @8..|....|...|..
    3860:	00 7c 10 10 10 7c 00 00 00 38 44 44 44 38 00 00     .|...|...8DDD8..
    3870:	00 7c 04 04 04 7c 00 00 00 fc 44 44 44 38 00 00     .|...|....DDD8..
    3880:	00 38 44 44 44 28 00 00 00 04 04 7c 04 04 00 00     .8DDD(.....|....
    3890:	00 9c a0 60 3c 00 00 00 00 18 24 7c 24 18 00 00     ...`<.....$|$...
    38a0:	00 6c 10 10 6c 00 00 00 00 7c 40 40 7c c0 00 00     .l..l....|@@|...
    38b0:	00 0c 10 10 10 7c 00 00 00 7c 40 7c 40 7c 00 00     .....|...|@|@|..
    38c0:	00 7c 40 7c 40 fc 00 00 0c 04 7c 50 50 20 00 00     .|@|@.....|PP ..
    38d0:	00 7c 50 50 20 7c 00 00 00 7c 50 50 50 20 00 00     .|PP |...|PPP ..
    38e0:	00 28 44 54 54 38 00 00 00 7c 10 38 44 38 00 00     .(DTT8...|.8D8..
    38f0:	00 48 34 14 14 7c 00 00                             .H4..|..

000038f8 <_ZL7font4x6>:
    38f8:	00 00 00 00 00 0e 15 0e 00 0e 1b 0e 00 0e 1c 0e     ................
    3908:	00 0c 1e 0c 00 16 1f 16 00 14 1f 14 00 00 04 00     ................
    3918:	3f 3f 3b 3f 00 00 00 00 00 00 00 00 00 18 1a 06     ??;?............
    3928:	00 0a 1d 0a 00 00 00 00 00 04 13 0e 00 0e 1b 0e     ................
    3938:	00 1f 0e 04 00 04 0e 1f 00 0a 1f 0a 00 17 00 17     ................
    3948:	06 1f 01 1f 00 16 1b 0d 00 0c 0c 00 00 2a 3f 2a     .............*?*
    3958:	00 02 1f 02 00 08 1f 08 04 04 0e 04 04 0e 04 04     ................
    3968:	00 0c 08 08 00 0e 04 0e 00 0c 0e 0c 00 06 0e 06     ................
    3978:	00 00 00 00 00 00 17 00 00 03 00 03 00 1f 0a 1f     ................
    3988:	00 14 3f 0a 00 09 04 12 00 1a 15 1e 00 03 01 00     ..?.............
    3998:	00 0e 11 00 00 11 0e 00 00 15 0e 15 00 04 0e 04     ................
    39a8:	00 30 10 00 00 04 04 04 00 00 10 00 00 18 04 03     .0..............
    39b8:	00 1e 11 0f 00 12 1f 10 00 19 15 12 00 11 15 0a     ................
    39c8:	00 06 04 1f 00 17 15 09 00 0e 15 08 00 01 1d 07     ................
    39d8:	00 0a 15 0a 00 02 15 0e 00 00 14 00 00 30 14 00     .............0..
    39e8:	00 04 0a 11 00 14 14 14 00 11 0a 04 00 01 15 02     ................
    39f8:	00 1f 11 17 00 1e 05 1e 00 1f 15 0a 00 0e 11 11     ................
    3a08:	00 1f 11 0e 00 1f 15 11 00 1f 05 01 00 0e 11 1d     ................
    3a18:	00 1f 04 1f 00 11 1f 11 00 08 10 0f 00 1f 04 1b     ................
    3a28:	00 1f 10 10 00 1f 06 1f 00 1f 02 1f 00 0e 11 0e     ................
    3a38:	00 1f 05 02 00 0e 19 1e 00 1f 05 1a 00 16 15 0d     ................
    3a48:	00 01 1f 01 00 1f 10 1f 00 0f 10 0f 00 1f 0c 1f     ................
    3a58:	00 1b 04 1b 00 03 1c 03 00 19 15 13 00 1f 11 00     ................
    3a68:	00 03 04 18 00 11 1f 00 00 02 01 02 20 20 20 20     ............    
    3a78:	00 01 03 00 00 18 14 1c 00 1f 14 08 00 08 14 14     ................
    3a88:	00 08 14 1f 00 0c 1c 14 00 04 1e 05 00 2c 24 3c     .............,$<
    3a98:	00 1f 04 18 00 00 1d 00 00 20 3d 00 00 1f 08 14     ......... =.....
    3aa8:	00 00 1f 00 00 1c 0c 1c 00 1c 04 18 00 08 14 08     ................
    3ab8:	00 3c 14 08 00 08 14 3c 00 1c 04 00 00 10 1c 04     .<.....<........
    3ac8:	00 04 1e 14 00 1c 10 1c 00 0c 10 0c 00 1c 18 1c     ................
    3ad8:	00 14 08 14 00 2c 10 0c 00 04 1c 10 00 04 1f 11     .....,..........
    3ae8:	00 00 1f 00 00 11 1f 04 02 01 02 01 00 0c 0a 0c     ................
	...
    3b00:	00 03 01 00 00 00 00 00 00 03 00 03 00 00 14 00     ................
    3b10:	04 04 3f 04 0a 0a 3b 0a 00 00 00 00 00 09 04 12     ..?...;.........
    3b20:	00 00 00 00 00 04 0a 11 00 00 00 00 00 00 00 00     ................
	...
    3b3c:	00 03 01 00 00 03 01 00 00 03 00 03 00 03 00 03     ................
    3b4c:	00 00 04 00 00 04 04 04 00 04 04 04 00 00 00 00     ................
    3b5c:	00 01 1f 01 00 00 00 00 00 11 0a 04 00 00 00 00     ................
	...
    3b7c:	17 15 0f 00 2c 12 0c 00 00 00 00 00 1e 12 1e 00     ....,...........
    3b8c:	00 00 00 00 00 00 3f 00 00 16 1b 0d 1f 15 11 00     ......?.........
    3b9c:	00 08 14 14 0e 15 15 00 00 04 0a 11 04 04 3c 00     ..............<.
    3bac:	00 04 04 04 00 1f 05 1a 01 1e 01 00 00 02 05 02     ................
    3bbc:	00 04 0e 04 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3bcc:	0c 08 1c 00 06 1f 01 1f 00 00 04 00 0d 1c 15 00     ................
    3bdc:	1f 0e 1f 00 08 1c 14 00 00 11 0a 04 00 00 00 00     ................
	...
    3bf4:	04 18 04 00 1e 05 1e 00 1f 15 09 00 1f 15 0a 00     ................
    3c04:	1f 01 01 00 18 0f 18 00 1f 15 11 00 1b 0e 1b 00     ................
    3c14:	11 15 1f 00 1f 0c 1f 00 1f 0d 1f 00 1f 06 19 00     ................
    3c24:	1e 01 1f 00 1f 02 1f 00 1f 04 1f 00 0e 11 0e 00     ................
    3c34:	1f 01 1f 00 1f 05 02 00 0e 11 11 00 01 1f 01 00     ................
    3c44:	17 14 0f 00 0e 1b 0e 00 1b 04 1b 00 1f 10 1f 30     ...............0
    3c54:	07 04 1f 00 1f 1c 1f 00 1f 1c 1f 30 01 1f 1c 00     ...........0....
    3c64:	1f 14 1f 00 1f 14 08 00 11 15 0e 00 1f 0e 1b 0e     ................
    3c74:	1a 05 1f 00 08 14 1c 00 1c 1c 14 00 1c 1c 18 00     ................
    3c84:	1c 04 04 00 18 0c 18 00 0c 1c 14 00 14 1c 14 00     ................
    3c94:	14 1c 1c 00 1c 08 1c 00 1c 09 1c 00 1c 08 14 00     ................
    3ca4:	18 04 1c 00 1c 18 1c 00 1c 08 1c 00 08 14 08 00     ................
    3cb4:	1c 04 1c 00 3c 14 08 00 08 14 14 00 04 1c 04 00     ....<...........
    3cc4:	2c 10 0c 00 1c 34 1c 00 14 08 14 00 1c 10 1c 30     ,....4.........0
    3cd4:	0c 08 1c 00 1c 18 1c 00 1c 18 1c 30 04 1c 18 00     ...........0....
    3ce4:	1c 18 1c 00 1c 18 18 00 14 1c 08 00 1c 08 1c 08     ................
    3cf4:	14 0c 1c 00                                         ....

00003cf8 <__trampolines_start>:
    3cf8:	0c 94 0c 37 	jmp	0x6e18	; 0x6e18 <_Z15ModelNameGetStrPca>
    3cfc:	0c 94 20 39 	jmp	0x7240	; 0x7240 <_Z11ModelSelecta>
    3d00:	0c 94 17 37 	jmp	0x6e2e	; 0x6e2e <_Z14ModeNameGetStrPca>
    3d04:	0c 94 c7 39 	jmp	0x738e	; 0x738e <_Z9ModelMenua>
    3d08:	0c 94 ab 35 	jmp	0x6b56	; 0x6b56 <_Z16TimerSoundGetStrPca>
    3d0c:	0c 94 90 43 	jmp	0x8720	; 0x8720 <_Z15ControlsRateSeta>
    3d10:	0c 94 10 38 	jmp	0x7020	; 0x7020 <_Z12TimerModeSeta>
    3d14:	0c 94 e3 35 	jmp	0x6bc6	; 0x6bc6 <_Z9ModelCopya>
    3d18:	0c 94 65 3a 	jmp	0x74ca	; 0x74ca <_Z12ControlsMenua>
    3d1c:	0c 94 41 3a 	jmp	0x7482	; 0x7482 <_Z20ControlsSettingsMenua+0x8c>
    3d20:	0c 94 68 3d 	jmp	0x7ad0	; 0x7ad0 <_Z10ModelReseta>
    3d24:	0c 94 d2 38 	jmp	0x71a4	; 0x71a4 <_Z18MixerChangeSettinga>
    3d28:	0c 94 5c 36 	jmp	0x6cb8	; 0x6cb8 <_Z8ModeCopya>
    3d2c:	0c 94 fb 3c 	jmp	0x79f6	; 0x79f6 <_Z14Calibration_APa>
    3d30:	0c 94 c7 35 	jmp	0x6b8e	; 0x6b8e <_Z18OptionsSoundGetStrPca>
    3d34:	0c 94 16 3b 	jmp	0x762c	; 0x762c <_Z19ControlsCurveChangea>
    3d38:	0c 94 b6 3a 	jmp	0x756c	; 0x756c <_Z9TimerMenua>
    3d3c:	0c 94 a8 3c 	jmp	0x7950	; 0x7950 <_Z17ChannelsMixerMenua>
    3d40:	0c 94 e2 34 	jmp	0x69c4	; 0x69c4 <_Z22ModelChannelsNumGetStrPca>
    3d44:	0c 94 fd 3c 	jmp	0x79fa	; 0x79fa <_Z9ModelSavea>
    3d48:	0c 94 30 35 	jmp	0x6a60	; 0x6a60 <_Z21ControlsVirtualGetStrPca>
    3d4c:	0c 94 b8 37 	jmp	0x6f70	; 0x6f70 <_Z18ControlsVirtualSeta>
    3d50:	0c 94 82 38 	jmp	0x7104	; 0x7104 <_Z17ModulationTypeSeta>
    3d54:	0c 94 95 39 	jmp	0x732a	; 0x732a <_Z15OptionsSoundSeta>
    3d58:	0c 94 dd 36 	jmp	0x6dba	; 0x6dba <_Z20ModulationTypeGetStrPca>
    3d5c:	0c 94 bc 38 	jmp	0x7178	; 0x7178 <_Z19ModelChannelsNumSeta>
    3d60:	0c 94 27 3a 	jmp	0x744e	; 0x744e <_Z20ControlsSettingsMenua+0x58>
    3d64:	0c 94 8f 35 	jmp	0x6b1e	; 0x6b1e <_Z15TimerModeGetStrPca>
    3d68:	0c 94 68 43 	jmp	0x86d0	; 0x86d0 <_Z18ControlsRateGetStrPca>
    3d6c:	0c 94 58 37 	jmp	0x6eb0	; 0x6eb0 <_Z18ControlsReverseSeta>
    3d70:	0c 94 01 35 	jmp	0x6a02	; 0x6a02 <_Z21ControlsReverseGetStrPca>
    3d74:	0c 94 fb 39 	jmp	0x73f6	; 0x73f6 <_Z20ControlsSettingsMenua>
    3d78:	0c 94 16 3a 	jmp	0x742c	; 0x742c <_Z20ControlsSettingsMenua+0x36>
    3d7c:	0c 94 fa 38 	jmp	0x71f4	; 0x71f4 <_Z12ModelNameSeta>
    3d80:	0c 94 b7 36 	jmp	0x6d6e	; 0x6d6e <_Z15ModelTypeGetStrPca>
    3d84:	0c 94 49 38 	jmp	0x7092	; 0x7092 <_Z13TimerSoundSeta>
    3d88:	0c 94 34 3a 	jmp	0x7468	; 0x7468 <_Z20ControlsSettingsMenua+0x72>
    3d8c:	0c 94 e6 3a 	jmp	0x75cc	; 0x75cc <_Z11OptionsMenua>
    3d90:	0c 94 0a 39 	jmp	0x7214	; 0x7214 <_Z11ModeNameSeta>
    3d94:	0c 94 28 37 	jmp	0x6e50	; 0x6e50 <_Z11ModeTypeSeta>
    3d98:	0c 94 8b 3a 	jmp	0x7516	; 0x7516 <_Z12ChannelsMenua>
    3d9c:	0c 94 5b 35 	jmp	0x6ab6	; 0x6ab6 <_Z11MixerGetStrPca>
    3da0:	0c 94 1a 3a 	jmp	0x7434	; 0x7434 <_Z20ControlsSettingsMenua+0x3e>

00003da4 <__ctors_end>:
    3da4:	11 24       	eor	r1, r1
    3da6:	1f be       	out	0x3f, r1	; 63
    3da8:	cf ef       	ldi	r28, 0xFF	; 255
    3daa:	d1 e2       	ldi	r29, 0x21	; 33
    3dac:	de bf       	out	0x3e, r29	; 62
    3dae:	cd bf       	out	0x3d, r28	; 61
    3db0:	00 e0       	ldi	r16, 0x00	; 0
    3db2:	0c bf       	out	0x3c, r16	; 60

00003db4 <__do_copy_data>:
    3db4:	19 e0       	ldi	r17, 0x09	; 9
    3db6:	a0 e0       	ldi	r26, 0x00	; 0
    3db8:	b2 e0       	ldi	r27, 0x02	; 2
    3dba:	e6 eb       	ldi	r30, 0xB6	; 182
    3dbc:	f7 e9       	ldi	r31, 0x97	; 151
    3dbe:	00 e0       	ldi	r16, 0x00	; 0
    3dc0:	0b bf       	out	0x3b, r16	; 59
    3dc2:	02 c0       	rjmp	.+4      	; 0x3dc8 <__do_copy_data+0x14>
    3dc4:	07 90       	elpm	r0, Z+
    3dc6:	0d 92       	st	X+, r0
    3dc8:	a2 36       	cpi	r26, 0x62	; 98
    3dca:	b1 07       	cpc	r27, r17
    3dcc:	d9 f7       	brne	.-10     	; 0x3dc4 <__do_copy_data+0x10>

00003dce <__do_clear_bss>:
    3dce:	17 e1       	ldi	r17, 0x17	; 23
    3dd0:	a2 e6       	ldi	r26, 0x62	; 98
    3dd2:	b9 e0       	ldi	r27, 0x09	; 9
    3dd4:	01 c0       	rjmp	.+2      	; 0x3dd8 <.do_clear_bss_start>

00003dd6 <.do_clear_bss_loop>:
    3dd6:	1d 92       	st	X+, r1

00003dd8 <.do_clear_bss_start>:
    3dd8:	a7 33       	cpi	r26, 0x37	; 55
    3dda:	b1 07       	cpc	r27, r17
    3ddc:	e1 f7       	brne	.-8      	; 0x3dd6 <.do_clear_bss_loop>
    3dde:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <main>
    3de2:	0c 94 d9 4b 	jmp	0x97b2	; 0x97b2 <_exit>

00003de6 <__bad_interrupt>:
    3de6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003dea <_Z12Crc16_eepromPhj>:
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};

uint16_t Crc16_eeprom(uint8_t* pcBlock, uint16_t len)
{
    3dea:	ef 92       	push	r14
    3dec:	ff 92       	push	r15
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
    3df2:	cf 93       	push	r28
    3df4:	df 93       	push	r29
    3df6:	8b 01       	movw	r16, r22
    3df8:	08 0f       	add	r16, r24
    3dfa:	19 1f       	adc	r17, r25
    unsigned short crc = 0xFFFF;
    3dfc:	cf ef       	ldi	r28, 0xFF	; 255
    3dfe:	df ef       	ldi	r29, 0xFF	; 255
    unsigned char  value;
    while (len--)
    3e00:	80 17       	cp	r24, r16
    3e02:	91 07       	cpc	r25, r17
    3e04:	a9 f0       	breq	.+42     	; 0x3e30 <_Z12Crc16_eepromPhj+0x46>
    {
        _EEGET(value, pcBlock++);
    3e06:	7c 01       	movw	r14, r24
    3e08:	2f ef       	ldi	r18, 0xFF	; 255
    3e0a:	e2 1a       	sub	r14, r18
    3e0c:	f2 0a       	sbc	r15, r18
    3e0e:	0e 94 08 4b 	call	0x9610	; 0x9610 <__eerd_byte_m2560>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ value];
    3e12:	3c 2f       	mov	r19, r28
    3e14:	22 27       	eor	r18, r18
    3e16:	ed 2f       	mov	r30, r29
    3e18:	ff 27       	eor	r31, r31
    3e1a:	e8 27       	eor	r30, r24
    3e1c:	ee 0f       	add	r30, r30
    3e1e:	ff 1f       	adc	r31, r31
    3e20:	ee 57       	subi	r30, 0x7E	; 126
    3e22:	fd 4f       	sbci	r31, 0xFD	; 253
    3e24:	c0 81       	ld	r28, Z
    3e26:	d1 81       	ldd	r29, Z+1	; 0x01
    3e28:	c2 27       	eor	r28, r18
    3e2a:	d3 27       	eor	r29, r19
{
    unsigned short crc = 0xFFFF;
    unsigned char  value;
    while (len--)
    {
        _EEGET(value, pcBlock++);
    3e2c:	c7 01       	movw	r24, r14
    3e2e:	e8 cf       	rjmp	.-48     	; 0x3e00 <_Z12Crc16_eepromPhj+0x16>
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ value];
    }
    return crc;
}
    3e30:	ce 01       	movw	r24, r28
    3e32:	df 91       	pop	r29
    3e34:	cf 91       	pop	r28
    3e36:	1f 91       	pop	r17
    3e38:	0f 91       	pop	r16
    3e3a:	ff 90       	pop	r15
    3e3c:	ef 90       	pop	r14
    3e3e:	08 95       	ret

00003e40 <_Z9Crc16_ramPhj>:

uint16_t Crc16_ram(uint8_t* pcBlock, uint16_t len)
{
    3e40:	68 0f       	add	r22, r24
    3e42:	79 1f       	adc	r23, r25
    unsigned short crc = 0xFFFF;
    3e44:	ef ef       	ldi	r30, 0xFF	; 255
    3e46:	ff ef       	ldi	r31, 0xFF	; 255
    while (len--)
    3e48:	86 17       	cp	r24, r22
    3e4a:	97 07       	cpc	r25, r23
    3e4c:	91 f0       	breq	.+36     	; 0x3e72 <_Z9Crc16_ramPhj+0x32>
    {
        crc = (crc << 8) ^ Crc16Table[(crc >> 8) ^ *pcBlock++];
    3e4e:	3e 2f       	mov	r19, r30
    3e50:	22 27       	eor	r18, r18
    3e52:	dc 01       	movw	r26, r24
    3e54:	4d 91       	ld	r20, X+
    3e56:	cd 01       	movw	r24, r26
    3e58:	ef 2f       	mov	r30, r31
    3e5a:	ff 27       	eor	r31, r31
    3e5c:	e4 27       	eor	r30, r20
    3e5e:	ee 0f       	add	r30, r30
    3e60:	ff 1f       	adc	r31, r31
    3e62:	ee 57       	subi	r30, 0x7E	; 126
    3e64:	fd 4f       	sbci	r31, 0xFD	; 253
    3e66:	01 90       	ld	r0, Z+
    3e68:	f0 81       	ld	r31, Z
    3e6a:	e0 2d       	mov	r30, r0
    3e6c:	e2 27       	eor	r30, r18
    3e6e:	f3 27       	eor	r31, r19
    3e70:	eb cf       	rjmp	.-42     	; 0x3e48 <_Z9Crc16_ramPhj+0x8>
    }
    return crc;
    3e72:	cf 01       	movw	r24, r30
    3e74:	08 95       	ret

00003e76 <_Z11gfx_Refreshv>:
// Public functions
//

void gfx_Refresh()
{
    LCD_Refresh();
    3e76:	0c 94 22 45 	jmp	0x8a44	; 0x8a44 <_Z11LCD_Refreshv>

00003e7a <_Z12gfx_ClearBufv>:
}

void gfx_ClearBuf()
{
    LCD_Clear();
    3e7a:	0c 94 0f 45 	jmp	0x8a1e	; 0x8a1e <_Z9LCD_Clearv>

00003e7e <_Z13gfx_DrawPixelhh8ColorIdx>:
}

void gfx_DrawPixel(const uint8_t x, const uint8_t y, const ColorIdx color)
{
    LCD_DrawPixel(x, y, color);
    3e7e:	0c 94 24 47 	jmp	0x8e48	; 0x8e48 <_Z13LCD_DrawPixelhh8ColorIdx>

00003e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>:
        const uint8_t  x1,
        const uint8_t  y1,
        const ColorIdx color,
        const bool     IsDashed
    )
{
    3e82:	4f 92       	push	r4
    3e84:	5f 92       	push	r5
    3e86:	6f 92       	push	r6
    3e88:	7f 92       	push	r7
    3e8a:	8f 92       	push	r8
    3e8c:	9f 92       	push	r9
    3e8e:	af 92       	push	r10
    3e90:	bf 92       	push	r11
    3e92:	cf 92       	push	r12
    3e94:	df 92       	push	r13
    3e96:	ef 92       	push	r14
    3e98:	ff 92       	push	r15
    3e9a:	0f 93       	push	r16
    3e9c:	1f 93       	push	r17
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	f8 2e       	mov	r15, r24
    3ea4:	96 2e       	mov	r9, r22
    3ea6:	64 2e       	mov	r6, r20
    3ea8:	52 2e       	mov	r5, r18
    uint8_t x = x0;
    uint8_t y = y0;

    int16_t dx = x1 - x;
    3eaa:	c4 2f       	mov	r28, r20
    3eac:	d0 e0       	ldi	r29, 0x00	; 0
    3eae:	c8 1b       	sub	r28, r24
    3eb0:	d1 09       	sbc	r29, r1
    int16_t dy = y1 - y;
    3eb2:	c2 2e       	mov	r12, r18
    3eb4:	d1 2c       	mov	r13, r1
    3eb6:	c6 1a       	sub	r12, r22
    3eb8:	d1 08       	sbc	r13, r1

    int8_t stepx = dx < 0 ? -1 : 1;
    3eba:	d7 ff       	sbrs	r29, 7
    3ebc:	03 c0       	rjmp	.+6      	; 0x3ec4 <_Z12gfx_DrawLinehhhh8ColorIdxb+0x42>
    3ebe:	88 24       	eor	r8, r8
    3ec0:	8a 94       	dec	r8
    3ec2:	02 c0       	rjmp	.+4      	; 0x3ec8 <_Z12gfx_DrawLinehhhh8ColorIdxb+0x46>
    3ec4:	88 24       	eor	r8, r8
    3ec6:	83 94       	inc	r8
    int8_t stepy = dy < 0 ? -1 : 1;
    3ec8:	d7 fe       	sbrs	r13, 7
    3eca:	03 c0       	rjmp	.+6      	; 0x3ed2 <_Z12gfx_DrawLinehhhh8ColorIdxb+0x50>
    3ecc:	77 24       	eor	r7, r7
    3ece:	7a 94       	dec	r7
    3ed0:	02 c0       	rjmp	.+4      	; 0x3ed6 <_Z12gfx_DrawLinehhhh8ColorIdxb+0x54>
    3ed2:	77 24       	eor	r7, r7
    3ed4:	73 94       	inc	r7
    3ed6:	d7 ff       	sbrs	r29, 7
    3ed8:	03 c0       	rjmp	.+6      	; 0x3ee0 <_Z12gfx_DrawLinehhhh8ColorIdxb+0x5e>
    3eda:	d1 95       	neg	r29
    3edc:	c1 95       	neg	r28
    3ede:	d1 09       	sbc	r29, r1
    3ee0:	d7 fe       	sbrs	r13, 7
    3ee2:	03 c0       	rjmp	.+6      	; 0x3eea <_Z12gfx_DrawLinehhhh8ColorIdxb+0x68>
    3ee4:	d1 94       	neg	r13
    3ee6:	c1 94       	neg	r12
    3ee8:	d1 08       	sbc	r13, r1
        dx = -dx;

    if (dy < 0)
        dy = -dy;

    dx = mul2(dx);
    3eea:	cc 0f       	add	r28, r28
    3eec:	dd 1f       	adc	r29, r29
    dy = mul2(dy);
    3eee:	cc 0c       	add	r12, r12
    3ef0:	dd 1c       	adc	r13, r13
    LCD_Clear();
}

void gfx_DrawPixel(const uint8_t x, const uint8_t y, const ColorIdx color)
{
    LCD_DrawPixel(x, y, color);
    3ef2:	a8 01       	movw	r20, r16
    3ef4:	69 2d       	mov	r22, r9
    3ef6:	8f 2d       	mov	r24, r15
    3ef8:	0e 94 24 47 	call	0x8e48	; 0x8e48 <_Z13LCD_DrawPixelhh8ColorIdx>

    gfx_DrawPixel(x, y, color);

    int16_t fraction;
    bool visible = true;
    if (dx > dy)
    3efc:	cc 16       	cp	r12, r28
    3efe:	dd 06       	cpc	r13, r29
    3f00:	f4 f4       	brge	.+60     	; 0x3f3e <_Z12gfx_DrawLinehhhh8ColorIdxb+0xbc>
    {
        fraction = dy - div2(dx);
    3f02:	ce 01       	movw	r24, r28
    3f04:	95 95       	asr	r25
    3f06:	87 95       	ror	r24
    3f08:	56 01       	movw	r10, r12
    3f0a:	a8 1a       	sub	r10, r24
    3f0c:	b9 0a       	sbc	r11, r25
    dy = mul2(dy);

    gfx_DrawPixel(x, y, color);

    int16_t fraction;
    bool visible = true;
    3f0e:	55 24       	eor	r5, r5
    3f10:	53 94       	inc	r5

            x += stepx;
            fraction += dy;

            if (IsDashed)
                visible = !visible;
    3f12:	44 24       	eor	r4, r4
    3f14:	43 94       	inc	r4
    int16_t fraction;
    bool visible = true;
    if (dx > dy)
    {
        fraction = dy - div2(dx);
        while (x != x1)
    3f16:	f6 14       	cp	r15, r6
    3f18:	81 f1       	breq	.+96     	; 0x3f7a <_Z12gfx_DrawLinehhhh8ColorIdxb+0xf8>
        {
            if (fraction >= 0)
    3f1a:	b7 fc       	sbrc	r11, 7
    3f1c:	03 c0       	rjmp	.+6      	; 0x3f24 <_Z12gfx_DrawLinehhhh8ColorIdxb+0xa2>
            {
                y += stepy;
    3f1e:	97 0c       	add	r9, r7
                fraction -= dx;
    3f20:	ac 1a       	sub	r10, r28
    3f22:	bd 0a       	sbc	r11, r29
            }

            x += stepx;
    3f24:	f8 0c       	add	r15, r8
            fraction += dy;
    3f26:	ac 0c       	add	r10, r12
    3f28:	bd 1c       	adc	r11, r13

            if (IsDashed)
    3f2a:	e1 10       	cpse	r14, r1
                visible = !visible;
    3f2c:	54 24       	eor	r5, r4

            if (visible)
    3f2e:	55 20       	and	r5, r5
    3f30:	91 f3       	breq	.-28     	; 0x3f16 <_Z12gfx_DrawLinehhhh8ColorIdxb+0x94>
    LCD_Clear();
}

void gfx_DrawPixel(const uint8_t x, const uint8_t y, const ColorIdx color)
{
    LCD_DrawPixel(x, y, color);
    3f32:	a8 01       	movw	r20, r16
    3f34:	69 2d       	mov	r22, r9
    3f36:	8f 2d       	mov	r24, r15
    3f38:	0e 94 24 47 	call	0x8e48	; 0x8e48 <_Z13LCD_DrawPixelhh8ColorIdx>
    3f3c:	ec cf       	rjmp	.-40     	; 0x3f16 <_Z12gfx_DrawLinehhhh8ColorIdxb+0x94>
                gfx_DrawPixel(x, y, color);
        }
    }
    else
    {
        fraction = dx - div2(dy);
    3f3e:	c6 01       	movw	r24, r12
    3f40:	95 95       	asr	r25
    3f42:	87 95       	ror	r24
    3f44:	5e 01       	movw	r10, r28
    3f46:	a8 1a       	sub	r10, r24
    3f48:	b9 0a       	sbc	r11, r25
    dy = mul2(dy);

    gfx_DrawPixel(x, y, color);

    int16_t fraction;
    bool visible = true;
    3f4a:	66 24       	eor	r6, r6
    3f4c:	63 94       	inc	r6

            y += stepy;
            fraction += dx;

            if (IsDashed)
                visible = !visible;
    3f4e:	44 24       	eor	r4, r4
    3f50:	43 94       	inc	r4
        }
    }
    else
    {
        fraction = dx - div2(dy);
        while (y != y1)
    3f52:	95 14       	cp	r9, r5
    3f54:	91 f0       	breq	.+36     	; 0x3f7a <_Z12gfx_DrawLinehhhh8ColorIdxb+0xf8>
        {
            if (fraction >= 0)
    3f56:	b7 fc       	sbrc	r11, 7
    3f58:	03 c0       	rjmp	.+6      	; 0x3f60 <_Z12gfx_DrawLinehhhh8ColorIdxb+0xde>
            {
                x += stepx;
    3f5a:	f8 0c       	add	r15, r8
                fraction -= dy;
    3f5c:	ac 18       	sub	r10, r12
    3f5e:	bd 08       	sbc	r11, r13
            }

            y += stepy;
    3f60:	97 0c       	add	r9, r7
            fraction += dx;
    3f62:	ac 0e       	add	r10, r28
    3f64:	bd 1e       	adc	r11, r29

            if (IsDashed)
    3f66:	e1 10       	cpse	r14, r1
                visible = !visible;
    3f68:	64 24       	eor	r6, r4

            if (visible)
    3f6a:	66 20       	and	r6, r6
    3f6c:	91 f3       	breq	.-28     	; 0x3f52 <_Z12gfx_DrawLinehhhh8ColorIdxb+0xd0>
    LCD_Clear();
}

void gfx_DrawPixel(const uint8_t x, const uint8_t y, const ColorIdx color)
{
    LCD_DrawPixel(x, y, color);
    3f6e:	a8 01       	movw	r20, r16
    3f70:	69 2d       	mov	r22, r9
    3f72:	8f 2d       	mov	r24, r15
    3f74:	0e 94 24 47 	call	0x8e48	; 0x8e48 <_Z13LCD_DrawPixelhh8ColorIdx>
    3f78:	ec cf       	rjmp	.-40     	; 0x3f52 <_Z12gfx_DrawLinehhhh8ColorIdxb+0xd0>

            if (visible)
                gfx_DrawPixel(x, y, color);
        }
    }
}
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	1f 91       	pop	r17
    3f80:	0f 91       	pop	r16
    3f82:	ff 90       	pop	r15
    3f84:	ef 90       	pop	r14
    3f86:	df 90       	pop	r13
    3f88:	cf 90       	pop	r12
    3f8a:	bf 90       	pop	r11
    3f8c:	af 90       	pop	r10
    3f8e:	9f 90       	pop	r9
    3f90:	8f 90       	pop	r8
    3f92:	7f 90       	pop	r7
    3f94:	6f 90       	pop	r6
    3f96:	5f 90       	pop	r5
    3f98:	4f 90       	pop	r4
    3f9a:	08 95       	ret

00003f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>:
        const uint8_t  x1,
        const uint8_t  y1,
        const ColorIdx color,
        const bool     IsDashed
    )
{
    3f9c:	af 92       	push	r10
    3f9e:	bf 92       	push	r11
    3fa0:	cf 92       	push	r12
    3fa2:	df 92       	push	r13
    3fa4:	ef 92       	push	r14
    3fa6:	ff 92       	push	r15
    3fa8:	0f 93       	push	r16
    3faa:	1f 93       	push	r17
    3fac:	cf 93       	push	r28
    3fae:	df 93       	push	r29
    3fb0:	c8 2e       	mov	r12, r24
    3fb2:	b6 2e       	mov	r11, r22
    3fb4:	f4 2e       	mov	r15, r20
    3fb6:	a2 2e       	mov	r10, r18
    gfx_DrawLine(x0, y0, x0, y1, color, IsDashed);
    3fb8:	48 2f       	mov	r20, r24
    3fba:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    gfx_DrawLine(x0, y1, x1, y1, color, IsDashed);
    3fbe:	2a 2d       	mov	r18, r10
    3fc0:	4f 2d       	mov	r20, r15
    3fc2:	6a 2d       	mov	r22, r10
    3fc4:	8c 2d       	mov	r24, r12
    3fc6:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    gfx_DrawLine(x1, y0, x1, y1, color, IsDashed);
    3fca:	2a 2d       	mov	r18, r10
    3fcc:	4f 2d       	mov	r20, r15
    3fce:	6b 2d       	mov	r22, r11
    3fd0:	8f 2d       	mov	r24, r15
    3fd2:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    gfx_DrawLine(x0, y0, x1, y0, color, IsDashed);
    3fd6:	2b 2d       	mov	r18, r11
    3fd8:	4f 2d       	mov	r20, r15
    3fda:	6b 2d       	mov	r22, r11
    3fdc:	8c 2d       	mov	r24, r12
    3fde:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
}
    3fe2:	df 91       	pop	r29
    3fe4:	cf 91       	pop	r28
    3fe6:	1f 91       	pop	r17
    3fe8:	0f 91       	pop	r16
    3fea:	ff 90       	pop	r15
    3fec:	ef 90       	pop	r14
    3fee:	df 90       	pop	r13
    3ff0:	cf 90       	pop	r12
    3ff2:	bf 90       	pop	r11
    3ff4:	af 90       	pop	r10
    3ff6:	08 95       	ret

00003ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>:
        const uint8_t  y0,
        const uint8_t  x1,
        const uint8_t  y1,
        const ColorIdx color
    )
{
    3ff8:	cf 92       	push	r12
    3ffa:	df 92       	push	r13
    3ffc:	ef 92       	push	r14
    3ffe:	ff 92       	push	r15
    4000:	0f 93       	push	r16
    4002:	1f 93       	push	r17
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	1f 92       	push	r1
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
    400e:	f6 2e       	mov	r15, r22
    4010:	e4 2e       	mov	r14, r20
    for(uint8_t i = x0; i <= x1; ++i)
    4012:	c8 2e       	mov	r12, r24
    4014:	ec 14       	cp	r14, r12
    4016:	70 f0       	brcs	.+28     	; 0x4034 <_Z17gfx_FillRectanglehhhh8ColorIdx+0x3c>
    4018:	df 2c       	mov	r13, r15
        for(uint8_t j = y0; j <= y1; ++j)
    401a:	2d 15       	cp	r18, r13
    401c:	48 f0       	brcs	.+18     	; 0x4030 <_Z17gfx_FillRectanglehhhh8ColorIdx+0x38>
            LCD_DrawPixel(i, j, color);
    401e:	a8 01       	movw	r20, r16
    4020:	6d 2d       	mov	r22, r13
    4022:	8c 2d       	mov	r24, r12
    4024:	29 83       	std	Y+1, r18	; 0x01
    4026:	0e 94 24 47 	call	0x8e48	; 0x8e48 <_Z13LCD_DrawPixelhh8ColorIdx>
        const uint8_t  y1,
        const ColorIdx color
    )
{
    for(uint8_t i = x0; i <= x1; ++i)
        for(uint8_t j = y0; j <= y1; ++j)
    402a:	d3 94       	inc	r13
    402c:	29 81       	ldd	r18, Y+1	; 0x01
    402e:	f5 cf       	rjmp	.-22     	; 0x401a <_Z17gfx_FillRectanglehhhh8ColorIdx+0x22>
        const uint8_t  x1,
        const uint8_t  y1,
        const ColorIdx color
    )
{
    for(uint8_t i = x0; i <= x1; ++i)
    4030:	c3 94       	inc	r12
    4032:	f0 cf       	rjmp	.-32     	; 0x4014 <_Z17gfx_FillRectanglehhhh8ColorIdx+0x1c>
        for(uint8_t j = y0; j <= y1; ++j)
            LCD_DrawPixel(i, j, color);
}
    4034:	0f 90       	pop	r0
    4036:	df 91       	pop	r29
    4038:	cf 91       	pop	r28
    403a:	1f 91       	pop	r17
    403c:	0f 91       	pop	r16
    403e:	ff 90       	pop	r15
    4040:	ef 90       	pop	r14
    4042:	df 90       	pop	r13
    4044:	cf 90       	pop	r12
    4046:	08 95       	ret

00004048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>:

void gfx_PrintChar(const uint8_t x, const uint8_t y, const char ch, const ColorIdx color, const FontProfile & font)
{
    4048:	7f 92       	push	r7
    404a:	8f 92       	push	r8
    404c:	9f 92       	push	r9
    404e:	af 92       	push	r10
    4050:	bf 92       	push	r11
    4052:	cf 92       	push	r12
    4054:	df 92       	push	r13
    4056:	ef 92       	push	r14
    4058:	ff 92       	push	r15
    405a:	0f 93       	push	r16
    405c:	1f 93       	push	r17
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	a8 2e       	mov	r10, r24
    4064:	96 2e       	mov	r9, r22
    4066:	84 2e       	mov	r8, r20
    4068:	79 01       	movw	r14, r18
    406a:	e8 01       	movw	r28, r16
    const uint8_t BIT_IN_BYTE = 8;

    uint8_t byte;
    const uint8_t* addr;
    for(uint8_t i = 0; i < font.W; ++i)
    406c:	d1 2c       	mov	r13, r1
    406e:	88 81       	ld	r24, Y
    4070:	d8 16       	cp	r13, r24
    4072:	38 f5       	brcc	.+78     	; 0x40c2 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile+0x7a>
    {
        addr = font.FontData + uint8_t(ch) * font.BytesPerChar + (i * font.BytesPerColumn);
    4074:	ec 81       	ldd	r30, Y+4	; 0x04
    4076:	8d 81       	ldd	r24, Y+5	; 0x05
    4078:	8e 9e       	mul	r8, r30
    407a:	f0 01       	movw	r30, r0
    407c:	11 24       	eor	r1, r1
    407e:	d8 9e       	mul	r13, r24
    4080:	e0 0d       	add	r30, r0
    4082:	f1 1d       	adc	r31, r1
    4084:	11 24       	eor	r1, r1
    4086:	0a 81       	ldd	r16, Y+2	; 0x02
    4088:	1b 81       	ldd	r17, Y+3	; 0x03
    408a:	0e 0f       	add	r16, r30
    408c:	1f 1f       	adc	r17, r31
        for(uint8_t j = 0; j < font.H; ++j)
    408e:	c1 2c       	mov	r12, r1
    4090:	7d 2c       	mov	r7, r13
    4092:	7a 0c       	add	r7, r10
    4094:	89 81       	ldd	r24, Y+1	; 0x01
    4096:	c8 16       	cp	r12, r24
    4098:	90 f4       	brcc	.+36     	; 0x40be <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile+0x76>
        {
            if ((j % BIT_IN_BYTE) == 0)
    409a:	8c 2d       	mov	r24, r12
    409c:	87 70       	andi	r24, 0x07	; 7
    409e:	21 f4       	brne	.+8      	; 0x40a8 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile+0x60>
                byte = pgm_read_byte(addr++);
    40a0:	f8 01       	movw	r30, r16
    40a2:	b4 90       	lpm	r11, Z
    40a4:	0f 5f       	subi	r16, 0xFF	; 255
    40a6:	1f 4f       	sbci	r17, 0xFF	; 255

            if (byte & 0x01)
    40a8:	b0 fe       	sbrs	r11, 0
    40aa:	06 c0       	rjmp	.+12     	; 0x40b8 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile+0x70>
              LCD_DrawPixel(x + i, y + j, color);
    40ac:	a7 01       	movw	r20, r14
    40ae:	6c 2d       	mov	r22, r12
    40b0:	69 0d       	add	r22, r9
    40b2:	87 2d       	mov	r24, r7
    40b4:	0e 94 24 47 	call	0x8e48	; 0x8e48 <_Z13LCD_DrawPixelhh8ColorIdx>
            
            byte = div2(byte);
    40b8:	b6 94       	lsr	r11
    uint8_t byte;
    const uint8_t* addr;
    for(uint8_t i = 0; i < font.W; ++i)
    {
        addr = font.FontData + uint8_t(ch) * font.BytesPerChar + (i * font.BytesPerColumn);
        for(uint8_t j = 0; j < font.H; ++j)
    40ba:	c3 94       	inc	r12
    40bc:	eb cf       	rjmp	.-42     	; 0x4094 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile+0x4c>
{
    const uint8_t BIT_IN_BYTE = 8;

    uint8_t byte;
    const uint8_t* addr;
    for(uint8_t i = 0; i < font.W; ++i)
    40be:	d3 94       	inc	r13
    40c0:	d6 cf       	rjmp	.-84     	; 0x406e <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile+0x26>
              LCD_DrawPixel(x + i, y + j, color);
            
            byte = div2(byte);
        }
    }
}
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	1f 91       	pop	r17
    40c8:	0f 91       	pop	r16
    40ca:	ff 90       	pop	r15
    40cc:	ef 90       	pop	r14
    40ce:	df 90       	pop	r13
    40d0:	cf 90       	pop	r12
    40d2:	bf 90       	pop	r11
    40d4:	af 90       	pop	r10
    40d6:	9f 90       	pop	r9
    40d8:	8f 90       	pop	r8
    40da:	7f 90       	pop	r7
    40dc:	08 95       	ret

000040de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>:

void gfx_PrintString(const uint8_t x, const uint8_t y, const char* str, const ColorIdx color, const FontProfile & font, Align align)
{
    40de:	af 92       	push	r10
    40e0:	bf 92       	push	r11
    40e2:	cf 92       	push	r12
    40e4:	df 92       	push	r13
    40e6:	ef 92       	push	r14
    40e8:	ff 92       	push	r15
    40ea:	0f 93       	push	r16
    40ec:	1f 93       	push	r17
    40ee:	cf 93       	push	r28
    40f0:	df 93       	push	r29
    40f2:	b6 2e       	mov	r11, r22
    40f4:	69 01       	movw	r12, r18
    40f6:	e8 01       	movw	r28, r16
    uint8_t _x;

    switch (align)
    40f8:	91 e0       	ldi	r25, 0x01	; 1
    40fa:	e9 16       	cp	r14, r25
    40fc:	f1 04       	cpc	r15, r1
    40fe:	41 f0       	breq	.+16     	; 0x4110 <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align+0x32>
    4100:	e2 e0       	ldi	r30, 0x02	; 2
    4102:	ee 16       	cp	r14, r30
    4104:	f1 04       	cpc	r15, r1
    4106:	b1 f0       	breq	.+44     	; 0x4134 <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align+0x56>
    4108:	ef 28       	or	r14, r15
    410a:	01 f5       	brne	.+64     	; 0x414c <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align+0x6e>
    {
        case ALIGN_LEFT:
            _x = x;
    410c:	a8 2e       	mov	r10, r24
    410e:	1e c0       	rjmp	.+60     	; 0x414c <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align+0x6e>
            break;
        
        case ALIGN_CENTER:
            _x = x - strlen(str) * font.W / 2;
    4110:	fa 01       	movw	r30, r20
    4112:	01 90       	ld	r0, Z+
    4114:	00 20       	and	r0, r0
    4116:	e9 f7       	brne	.-6      	; 0x4112 <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align+0x34>
    4118:	31 97       	sbiw	r30, 0x01	; 1
    411a:	e4 1b       	sub	r30, r20
    411c:	f5 0b       	sbc	r31, r21
    411e:	98 81       	ld	r25, Y
    4120:	9e 9f       	mul	r25, r30
    4122:	90 01       	movw	r18, r0
    4124:	9f 9f       	mul	r25, r31
    4126:	30 0d       	add	r19, r0
    4128:	11 24       	eor	r1, r1
    412a:	36 95       	lsr	r19
    412c:	27 95       	ror	r18
    412e:	a8 2e       	mov	r10, r24
    4130:	a2 1a       	sub	r10, r18
            break;
    4132:	0c c0       	rjmp	.+24     	; 0x414c <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align+0x6e>

        case ALIGN_RIGHT:
            _x = x - strlen(str) * font.W;
    4134:	fa 01       	movw	r30, r20
    4136:	01 90       	ld	r0, Z+
    4138:	00 20       	and	r0, r0
    413a:	e9 f7       	brne	.-6      	; 0x4136 <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align+0x58>
    413c:	31 97       	sbiw	r30, 0x01	; 1
    413e:	e4 1b       	sub	r30, r20
    4140:	f5 0b       	sbc	r31, r21
    4142:	98 81       	ld	r25, Y
    4144:	a8 2e       	mov	r10, r24
    4146:	9e 9f       	mul	r25, r30
    4148:	a0 18       	sub	r10, r0
    414a:	11 24       	eor	r1, r1
    414c:	7a 01       	movw	r14, r20
            break;
    };

    while(*str !='\0')
    414e:	f7 01       	movw	r30, r14
    4150:	41 91       	ld	r20, Z+
    4152:	7f 01       	movw	r14, r30
    4154:	44 23       	and	r20, r20
    4156:	49 f0       	breq	.+18     	; 0x416a <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align+0x8c>
    {
        gfx_PrintChar(_x, y, *str++, color, font);
    4158:	8e 01       	movw	r16, r28
    415a:	96 01       	movw	r18, r12
    415c:	6b 2d       	mov	r22, r11
    415e:	8a 2d       	mov	r24, r10
    4160:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
        _x += font.W;
    4164:	88 81       	ld	r24, Y
    4166:	a8 0e       	add	r10, r24
    4168:	f2 cf       	rjmp	.-28     	; 0x414e <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align+0x70>
    }
}
    416a:	df 91       	pop	r29
    416c:	cf 91       	pop	r28
    416e:	1f 91       	pop	r17
    4170:	0f 91       	pop	r16
    4172:	ff 90       	pop	r15
    4174:	ef 90       	pop	r14
    4176:	df 90       	pop	r13
    4178:	cf 90       	pop	r12
    417a:	bf 90       	pop	r11
    417c:	af 90       	pop	r10
    417e:	08 95       	ret

00004180 <_Z8gfx_Initv>:

void gfx_Init(void)
{
    LCD_Init();
    4180:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <_Z8LCD_Initv>

    Font_4x6.W = 4;
    4184:	34 e0       	ldi	r19, 0x04	; 4
    4186:	30 93 d6 0c 	sts	0x0CD6, r19
    Font_4x6.H = 6;
    418a:	26 e0       	ldi	r18, 0x06	; 6
    418c:	20 93 d7 0c 	sts	0x0CD7, r18
    Font_4x6.FontData = (const uint8_t*)font4x6;
    4190:	88 ef       	ldi	r24, 0xF8	; 248
    4192:	98 e3       	ldi	r25, 0x38	; 56
    4194:	90 93 d9 0c 	sts	0x0CD9, r25
    4198:	80 93 d8 0c 	sts	0x0CD8, r24
    Font_4x6.BytesPerChar = 4;
    419c:	30 93 da 0c 	sts	0x0CDA, r19
    Font_4x6.BytesPerColumn = 1;
    41a0:	31 e0       	ldi	r19, 0x01	; 1
    41a2:	30 93 db 0c 	sts	0x0CDB, r19
    
    Font_6x8.W = 6;
    41a6:	20 93 d0 0c 	sts	0x0CD0, r18
    Font_6x8.H = 8;
    41aa:	28 e0       	ldi	r18, 0x08	; 8
    41ac:	20 93 d1 0c 	sts	0x0CD1, r18
    Font_6x8.FontData = (const uint8_t*)font6x8;
    41b0:	88 ef       	ldi	r24, 0xF8	; 248
    41b2:	90 e3       	ldi	r25, 0x30	; 48
    41b4:	90 93 d3 0c 	sts	0x0CD3, r25
    41b8:	80 93 d2 0c 	sts	0x0CD2, r24
    Font_6x8.BytesPerChar = 8;
    41bc:	20 93 d4 0c 	sts	0x0CD4, r18
    Font_6x8.BytesPerColumn = 1;
    41c0:	30 93 d5 0c 	sts	0x0CD5, r19

    Font_8x8.W = 8;
    41c4:	20 93 ca 0c 	sts	0x0CCA, r18
    Font_8x8.H = 8;
    41c8:	20 93 cb 0c 	sts	0x0CCB, r18
    Font_8x8.FontData = (const uint8_t*)font8x8;
    41cc:	88 ef       	ldi	r24, 0xF8	; 248
    41ce:	98 e2       	ldi	r25, 0x28	; 40
    41d0:	90 93 cd 0c 	sts	0x0CCD, r25
    41d4:	80 93 cc 0c 	sts	0x0CCC, r24
    Font_8x8.BytesPerChar = 8;
    41d8:	20 93 ce 0c 	sts	0x0CCE, r18
    Font_8x8.BytesPerColumn = 1;
    41dc:	30 93 cf 0c 	sts	0x0CCF, r19

    Font_8x12.W = 8;
    41e0:	20 93 c4 0c 	sts	0x0CC4, r18
    Font_8x12.H = 12;
    41e4:	3c e0       	ldi	r19, 0x0C	; 12
    41e6:	30 93 c5 0c 	sts	0x0CC5, r19
    Font_8x12.FontData = (const uint8_t*)font8x12;
    41ea:	88 ef       	ldi	r24, 0xF8	; 248
    41ec:	98 e1       	ldi	r25, 0x18	; 24
    41ee:	90 93 c7 0c 	sts	0x0CC7, r25
    41f2:	80 93 c6 0c 	sts	0x0CC6, r24
    Font_8x12.BytesPerChar = 16;
    41f6:	80 e1       	ldi	r24, 0x10	; 16
    41f8:	80 93 c8 0c 	sts	0x0CC8, r24
    Font_8x12.BytesPerColumn = 2;
    41fc:	22 e0       	ldi	r18, 0x02	; 2
    41fe:	20 93 c9 0c 	sts	0x0CC9, r18

    Font_12x16.W = 12;
    4202:	30 93 be 0c 	sts	0x0CBE, r19
    Font_12x16.H = 16;
    4206:	80 93 bf 0c 	sts	0x0CBF, r24
    Font_12x16.FontData = (const uint8_t*)font12x16;
    420a:	88 ef       	ldi	r24, 0xF8	; 248
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	90 93 c1 0c 	sts	0x0CC1, r25
    4212:	80 93 c0 0c 	sts	0x0CC0, r24
    Font_12x16.BytesPerChar = 24;
    4216:	88 e1       	ldi	r24, 0x18	; 24
    4218:	80 93 c2 0c 	sts	0x0CC2, r24
    Font_12x16.BytesPerColumn = 2;
    421c:	20 93 c3 0c 	sts	0x0CC3, r18
    4220:	08 95       	ret

00004222 <__vector_17>:
// Interrupts
//

// Прерывание таймера в котором собственно говоря и идет вычисление импульсов
ISR(TIMER1_COMPA_vect)
{
    4222:	1f 92       	push	r1
    4224:	0f 92       	push	r0
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	0f 92       	push	r0
    422a:	11 24       	eor	r1, r1
    422c:	0b b6       	in	r0, 0x3b	; 59
    422e:	0f 92       	push	r0
    4230:	2f 93       	push	r18
    4232:	3f 93       	push	r19
    4234:	4f 93       	push	r20
    4236:	5f 93       	push	r21
    4238:	6f 93       	push	r22
    423a:	7f 93       	push	r23
    423c:	8f 93       	push	r24
    423e:	9f 93       	push	r25
    4240:	af 93       	push	r26
    4242:	bf 93       	push	r27
    4244:	ef 93       	push	r30
    4246:	ff 93       	push	r31
    static uint8_t  nb  = 0; // Номер текущего канала
    static uint16_t del = 0; // Длительность паузы между пачками PPM импульсов

    if(nb < CurModel.num_ch)
    4248:	80 91 e0 0c 	lds	r24, 0x0CE0
    424c:	48 2f       	mov	r20, r24
    424e:	50 e0       	ldi	r21, 0x00	; 0
    4250:	20 91 9a 09 	lds	r18, 0x099A
    4254:	33 27       	eor	r19, r19
    4256:	27 fd       	sbrc	r18, 7
    4258:	30 95       	com	r19
    425a:	42 17       	cp	r20, r18
    425c:	53 07       	cpc	r21, r19
    425e:	04 f5       	brge	.+64     	; 0x42a0 <__vector_17+0x7e>
    {
        math_CalcChannel(nb); // Рассчет канального импульса - микширование
    4260:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <_Z16math_CalcChannela>

        ICR1 = output[nb]; // Заливаем длительность канала
    4264:	40 91 e0 0c 	lds	r20, 0x0CE0
    4268:	e4 2f       	mov	r30, r20
    426a:	f0 e0       	ldi	r31, 0x00	; 0
    426c:	ee 0f       	add	r30, r30
    426e:	ff 1f       	adc	r31, r31
    4270:	e7 59       	subi	r30, 0x97	; 151
    4272:	f6 4f       	sbci	r31, 0xF6	; 246
    4274:	80 81       	ld	r24, Z
    4276:	91 81       	ldd	r25, Z+1	; 0x01
    4278:	90 93 87 00 	sts	0x0087, r25
    427c:	80 93 86 00 	sts	0x0086, r24
        del += output[nb]; // Добавляем длительность канала к суммарному значению канальных импульсов
    4280:	80 91 de 0c 	lds	r24, 0x0CDE
    4284:	90 91 df 0c 	lds	r25, 0x0CDF
    4288:	20 81       	ld	r18, Z
    428a:	31 81       	ldd	r19, Z+1	; 0x01
    428c:	82 0f       	add	r24, r18
    428e:	93 1f       	adc	r25, r19
    4290:	90 93 df 0c 	sts	0x0CDF, r25
    4294:	80 93 de 0c 	sts	0x0CDE, r24

        ++nb; // Увеличиваем номер канала
    4298:	4f 5f       	subi	r20, 0xFF	; 255
    429a:	40 93 e0 0c 	sts	0x0CE0, r20
    429e:	14 c0       	rjmp	.+40     	; 0x42c8 <__vector_17+0xa6>
    }
    else
    {
        del = TimerClockPerUSec(TASK_TICK_TIME * USEC_IN_MSEC) - del; // Длительность паузы: количество отсчетов за 20 мсек - время канальных импульсов
    42a0:	80 e4       	ldi	r24, 0x40	; 64
    42a2:	9c e9       	ldi	r25, 0x9C	; 156
    42a4:	20 91 de 0c 	lds	r18, 0x0CDE
    42a8:	30 91 df 0c 	lds	r19, 0x0CDF
    42ac:	82 1b       	sub	r24, r18
    42ae:	93 0b       	sbc	r25, r19

        ICR1 = del; // Заливаем длительность паузы
    42b0:	90 93 87 00 	sts	0x0087, r25
    42b4:	80 93 86 00 	sts	0x0086, r24
        del  = 0;   // Обнуляем суммарное значение канальных импульсов
    42b8:	10 92 df 0c 	sts	0x0CDF, r1
    42bc:	10 92 de 0c 	sts	0x0CDE, r1
        nb   = 0;   // Сбрасываем номер канала
    42c0:	10 92 e0 0c 	sts	0x0CE0, r1

        math_CalcControls(); // Получение статуса управляющих элементов
    42c4:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <_Z17math_CalcControlsv>
    }
}
    42c8:	ff 91       	pop	r31
    42ca:	ef 91       	pop	r30
    42cc:	bf 91       	pop	r27
    42ce:	af 91       	pop	r26
    42d0:	9f 91       	pop	r25
    42d2:	8f 91       	pop	r24
    42d4:	7f 91       	pop	r23
    42d6:	6f 91       	pop	r22
    42d8:	5f 91       	pop	r21
    42da:	4f 91       	pop	r20
    42dc:	3f 91       	pop	r19
    42de:	2f 91       	pop	r18
    42e0:	0f 90       	pop	r0
    42e2:	0b be       	out	0x3b, r0	; 59
    42e4:	0f 90       	pop	r0
    42e6:	0f be       	out	0x3f, r0	; 63
    42e8:	0f 90       	pop	r0
    42ea:	1f 90       	pop	r1
    42ec:	18 95       	reti

000042ee <__vector_32>:
// ***   //DEBUG TODO: Возможно стоит переделать в функцию и вызвать в конце ***
// ***   timer1_compa_isr с помощью строчки:                                 ***
// ***   if(nb == 0) timer3_compa_isr();                                     ***
// *****************************************************************************
ISR(TIMER3_COMPA_vect)
{
    42ee:	1f 92       	push	r1
    42f0:	0f 92       	push	r0
    42f2:	0f b6       	in	r0, 0x3f	; 63
    42f4:	0f 92       	push	r0
    42f6:	11 24       	eor	r1, r1
    42f8:	0b b6       	in	r0, 0x3b	; 59
    42fa:	0f 92       	push	r0
    42fc:	2f 93       	push	r18
    42fe:	3f 93       	push	r19
    4300:	4f 93       	push	r20
    4302:	5f 93       	push	r21
    4304:	6f 93       	push	r22
    4306:	7f 93       	push	r23
    4308:	8f 93       	push	r24
    430a:	9f 93       	push	r25
    430c:	af 93       	push	r26
    430e:	bf 93       	push	r27
    4310:	ef 93       	push	r30
    4312:	ff 93       	push	r31
    4314:	cf 93       	push	r28
    4316:	df 93       	push	r29
    4318:	1f 92       	push	r1
    431a:	cd b7       	in	r28, 0x3d	; 61
    431c:	de b7       	in	r29, 0x3e	; 62
    static uint8_t MissedIntCount     = 0;
    static bool    InterruptEnterFlag = false;
    
    TickCount++; // Увеличиваем счетчик системного времени в TASK_TICK_TIME или в мс(DEBUG) интервалах
    431e:	80 91 62 09 	lds	r24, 0x0962
    4322:	90 91 63 09 	lds	r25, 0x0963
    4326:	a0 91 64 09 	lds	r26, 0x0964
    432a:	b0 91 65 09 	lds	r27, 0x0965
    432e:	01 96       	adiw	r24, 0x01	; 1
    4330:	a1 1d       	adc	r26, r1
    4332:	b1 1d       	adc	r27, r1
    4334:	80 93 62 09 	sts	0x0962, r24
    4338:	90 93 63 09 	sts	0x0963, r25
    433c:	a0 93 64 09 	sts	0x0964, r26
    4340:	b0 93 65 09 	sts	0x0965, r27

    if(InterruptEnterFlag)
    4344:	90 91 dd 0c 	lds	r25, 0x0CDD
    4348:	80 91 dc 0c 	lds	r24, 0x0CDC
    434c:	99 23       	and	r25, r25
    434e:	21 f0       	breq	.+8      	; 0x4358 <__vector_32+0x6a>
    {
        MissedIntCount++;
    4350:	8f 5f       	subi	r24, 0xFF	; 255
    4352:	80 93 dc 0c 	sts	0x0CDC, r24
        return;
    4356:	11 c0       	rjmp	.+34     	; 0x437a <__vector_32+0x8c>
    }

    InterruptEnterFlag = true;
    4358:	91 e0       	ldi	r25, 0x01	; 1
    435a:	90 93 dd 0c 	sts	0x0CDD, r25
    
    // Копируем количество пропущенных прерываний в дополнительную переменную, т.к. счетчик будет увеличиватся при повторном вызове данного прерывания.
    uint8_t MissedInterruptsCount = MissedIntCount;
    
    MissedIntCount = 0;
    435e:	10 92 dc 0c 	sts	0x0CDC, r1

    KeyboardDriver_Task();
    4362:	89 83       	std	Y+1, r24	; 0x01
    4364:	0e 94 2f 2a 	call	0x545e	; 0x545e <_Z19KeyboardDriver_Taskv>
    Timer_Task(MissedInterruptsCount);
    4368:	89 81       	ldd	r24, Y+1	; 0x01
    436a:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <_Z10Timer_Taskh>
    BatteryDriver_Task();
    436e:	0e 94 2b 2b 	call	0x5656	; 0x5656 <_Z18BatteryDriver_Taskv>
    TrimmersSave_Task();
    4372:	0e 94 07 2a 	call	0x540e	; 0x540e <_Z17TrimmersSave_Taskv>

    InterruptEnterFlag = false;
    4376:	10 92 dd 0c 	sts	0x0CDD, r1
}
    437a:	0f 90       	pop	r0
    437c:	df 91       	pop	r29
    437e:	cf 91       	pop	r28
    4380:	ff 91       	pop	r31
    4382:	ef 91       	pop	r30
    4384:	bf 91       	pop	r27
    4386:	af 91       	pop	r26
    4388:	9f 91       	pop	r25
    438a:	8f 91       	pop	r24
    438c:	7f 91       	pop	r23
    438e:	6f 91       	pop	r22
    4390:	5f 91       	pop	r21
    4392:	4f 91       	pop	r20
    4394:	3f 91       	pop	r19
    4396:	2f 91       	pop	r18
    4398:	0f 90       	pop	r0
    439a:	0b be       	out	0x3b, r0	; 59
    439c:	0f 90       	pop	r0
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	0f 90       	pop	r0
    43a2:	1f 90       	pop	r1
    43a4:	18 95       	reti

000043a6 <_Z16math_CalcChannela>:
// Public functions
//

// Рассчет времени канальных импульсов для вывода (Микширование)
void math_CalcChannel(int8_t CH)
{
    43a6:	4f 92       	push	r4
    43a8:	5f 92       	push	r5
    43aa:	6f 92       	push	r6
    43ac:	7f 92       	push	r7
    43ae:	af 92       	push	r10
    43b0:	bf 92       	push	r11
    43b2:	cf 92       	push	r12
    43b4:	df 92       	push	r13
    43b6:	ef 92       	push	r14
    43b8:	ff 92       	push	r15
    43ba:	0f 93       	push	r16
    43bc:	1f 93       	push	r17
    43be:	cf 93       	push	r28
    43c0:	df 93       	push	r29
    if(CH < 0 || CH > MAX_CHANNELS)
    43c2:	89 30       	cpi	r24, 0x09	; 9
    43c4:	08 f0       	brcs	.+2      	; 0x43c8 <_Z16math_CalcChannela+0x22>
    43c6:	68 c0       	rjmp	.+208    	; 0x4498 <_Z16math_CalcChannela+0xf2>
        return;

    output[CH] = 0;
    43c8:	e8 2e       	mov	r14, r24
    43ca:	ee 0c       	add	r14, r14
    43cc:	ff 08       	sbc	r15, r15
    43ce:	f7 01       	movw	r30, r14
    43d0:	e7 59       	subi	r30, 0x97	; 151
    43d2:	f6 4f       	sbci	r31, 0xF6	; 246
    43d4:	11 82       	std	Z+1, r1	; 0x01
    43d6:	10 82       	st	Z, r1
    43d8:	92 ee       	ldi	r25, 0xE2	; 226
    43da:	c9 2e       	mov	r12, r25
    43dc:	9c e0       	ldi	r25, 0x0C	; 12
    43de:	d9 2e       	mov	r13, r25
    43e0:	20 91 68 09 	lds	r18, 0x0968
    43e4:	36 ef       	ldi	r19, 0xF6	; 246
    43e6:	23 03       	mulsu	r18, r19
    43e8:	e0 01       	movw	r28, r0
    43ea:	11 24       	eor	r1, r1
    43ec:	9b e0       	ldi	r25, 0x0B	; 11
    43ee:	89 02       	muls	r24, r25
    43f0:	c0 0d       	add	r28, r0
    43f2:	d1 1d       	adc	r29, r1
    43f4:	11 24       	eor	r1, r1
    43f6:	cb 57       	subi	r28, 0x7B	; 123
    43f8:	d6 4f       	sbci	r29, 0xF6	; 246

    // Формирование выходного канала
    for(uint8_t i = 0; i < MAX_CONTROLS; ++i)
    {
        // Если влияние управляющего элемента i на канал CH отсутстует - идем дальше
        if(CurModel.Mode[FLY_MODE].Chanels[CH][i] != 0)
    43fa:	00 e0       	ldi	r16, 0x00	; 0
    43fc:	10 e0       	ldi	r17, 0x00	; 0
        {
            // Получаем влияние управляющего элемента i на канал CH
            const int32_t Factor = CurModel.Mode[FLY_MODE].Chanels[CH][i];
            // Добавляем управляющий элемент i к каналу CH
            output[CH] += out_cur[i] * Factor / 100;
    43fe:	5f 01       	movw	r10, r30
    4400:	24 e6       	ldi	r18, 0x64	; 100
    4402:	42 2e       	mov	r4, r18
    4404:	51 2c       	mov	r5, r1
    4406:	61 2c       	mov	r6, r1
    4408:	71 2c       	mov	r7, r1
    440a:	fe 01       	movw	r30, r28
    440c:	e0 0f       	add	r30, r16
    440e:	f1 1f       	adc	r31, r17
    4410:	e0 55       	subi	r30, 0x50	; 80
    4412:	ff 4f       	sbci	r31, 0xFF	; 255

    // Формирование выходного канала
    for(uint8_t i = 0; i < MAX_CONTROLS; ++i)
    {
        // Если влияние управляющего элемента i на канал CH отсутстует - идем дальше
        if(CurModel.Mode[FLY_MODE].Chanels[CH][i] != 0)
    4414:	a0 81       	ld	r26, Z
    4416:	aa 23       	and	r26, r26
    4418:	99 f0       	breq	.+38     	; 0x4440 <_Z16math_CalcChannela+0x9a>
        {
            // Получаем влияние управляющего элемента i на канал CH
            const int32_t Factor = CurModel.Mode[FLY_MODE].Chanels[CH][i];
            // Добавляем управляющий элемент i к каналу CH
            output[CH] += out_cur[i] * Factor / 100;
    441a:	f6 01       	movw	r30, r12
    441c:	20 81       	ld	r18, Z
    441e:	31 81       	ldd	r19, Z+1	; 0x01
    4420:	bb 27       	eor	r27, r27
    4422:	a7 fd       	sbrc	r26, 7
    4424:	b0 95       	com	r27
    4426:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <__mulhisi3>
    442a:	a3 01       	movw	r20, r6
    442c:	92 01       	movw	r18, r4
    442e:	0e 94 4e 48 	call	0x909c	; 0x909c <__divmodsi4>
    4432:	f5 01       	movw	r30, r10
    4434:	80 81       	ld	r24, Z
    4436:	91 81       	ldd	r25, Z+1	; 0x01
    4438:	82 0f       	add	r24, r18
    443a:	93 1f       	adc	r25, r19
    443c:	91 83       	std	Z+1, r25	; 0x01
    443e:	80 83       	st	Z, r24
    4440:	0f 5f       	subi	r16, 0xFF	; 255
    4442:	1f 4f       	sbci	r17, 0xFF	; 255
    4444:	f2 e0       	ldi	r31, 0x02	; 2
    4446:	cf 0e       	add	r12, r31
    4448:	d1 1c       	adc	r13, r1
        return;

    output[CH] = 0;

    // Формирование выходного канала
    for(uint8_t i = 0; i < MAX_CONTROLS; ++i)
    444a:	0b 30       	cpi	r16, 0x0B	; 11
    444c:	11 05       	cpc	r17, r1
    444e:	e9 f6       	brne	.-70     	; 0x440a <_Z16math_CalcChannela+0x64>
        }
    }

    // Длительность импульса: значение канала(+-0,5 мс) + центральное положение(1,5 мсек)

    output[CH] += OUTPUT_MID;
    4450:	f7 01       	movw	r30, r14
    4452:	e7 59       	subi	r30, 0x97	; 151
    4454:	f6 4f       	sbci	r31, 0xF6	; 246
    4456:	80 81       	ld	r24, Z
    4458:	91 81       	ldd	r25, Z+1	; 0x01
    445a:	20 91 82 04 	lds	r18, 0x0482
    445e:	30 91 83 04 	lds	r19, 0x0483
    4462:	82 0f       	add	r24, r18
    4464:	93 1f       	adc	r25, r19
    4466:	91 83       	std	Z+1, r25	; 0x01
    4468:	80 83       	st	Z, r24

    if(output[CH] < OUTPUT_MIN)
    446a:	20 91 86 04 	lds	r18, 0x0486
    446e:	30 91 87 04 	lds	r19, 0x0487
    4472:	82 17       	cp	r24, r18
    4474:	93 07       	cpc	r25, r19
    4476:	14 f4       	brge	.+4      	; 0x447c <_Z16math_CalcChannela+0xd6>
        output[CH] = OUTPUT_MIN;
    4478:	31 83       	std	Z+1, r19	; 0x01
    447a:	20 83       	st	Z, r18

    if(output[CH] > OUTPUT_MAX)
    447c:	80 91 84 04 	lds	r24, 0x0484
    4480:	90 91 85 04 	lds	r25, 0x0485
    4484:	f7 01       	movw	r30, r14
    4486:	e7 59       	subi	r30, 0x97	; 151
    4488:	f6 4f       	sbci	r31, 0xF6	; 246
    448a:	20 81       	ld	r18, Z
    448c:	31 81       	ldd	r19, Z+1	; 0x01
    448e:	82 17       	cp	r24, r18
    4490:	93 07       	cpc	r25, r19
    4492:	14 f4       	brge	.+4      	; 0x4498 <_Z16math_CalcChannela+0xf2>
        output[CH] = OUTPUT_MAX;
    4494:	91 83       	std	Z+1, r25	; 0x01
    4496:	80 83       	st	Z, r24
}
    4498:	df 91       	pop	r29
    449a:	cf 91       	pop	r28
    449c:	1f 91       	pop	r17
    449e:	0f 91       	pop	r16
    44a0:	ff 90       	pop	r15
    44a2:	ef 90       	pop	r14
    44a4:	df 90       	pop	r13
    44a6:	cf 90       	pop	r12
    44a8:	bf 90       	pop	r11
    44aa:	af 90       	pop	r10
    44ac:	7f 90       	pop	r7
    44ae:	6f 90       	pop	r6
    44b0:	5f 90       	pop	r5
    44b2:	4f 90       	pop	r4
    44b4:	08 95       	ret

000044b6 <_Z15math_InterPolExiiiPaa>:

// Расширенный рассчет кривой
int16_t math_InterPolEx(int16_t Val, int16_t Max, int16_t K, int8_t* Nodes, int8_t NodesCount)
{
    44b6:	8f 92       	push	r8
    44b8:	9f 92       	push	r9
    44ba:	af 92       	push	r10
    44bc:	bf 92       	push	r11
    44be:	cf 92       	push	r12
    44c0:	df 92       	push	r13
    44c2:	ef 92       	push	r14
    44c4:	ff 92       	push	r15
    44c6:	0f 93       	push	r16
    44c8:	1f 93       	push	r17
    44ca:	cf 93       	push	r28
    44cc:	df 93       	push	r29
    44ce:	eb 01       	movw	r28, r22
    44d0:	7a 01       	movw	r14, r20
    if(Nodes == NULL)
    44d2:	21 15       	cp	r18, r1
    44d4:	31 05       	cpc	r19, r1
    44d6:	09 f4       	brne	.+2      	; 0x44da <_Z15math_InterPolExiiiPaa+0x24>
    44d8:	5f c0       	rjmp	.+190    	; 0x4598 <_Z15math_InterPolExiiiPaa+0xe2>
        return Val;
    
    if(NodesCount <= 0)
    44da:	10 16       	cp	r1, r16
    44dc:	0c f0       	brlt	.+2      	; 0x44e0 <_Z15math_InterPolExiiiPaa+0x2a>
    44de:	5c c0       	rjmp	.+184    	; 0x4598 <_Z15math_InterPolExiiiPaa+0xe2>
    44e0:	4c 01       	movw	r8, r24
    44e2:	97 ff       	sbrs	r25, 7
    44e4:	02 c0       	rjmp	.+4      	; 0x44ea <_Z15math_InterPolExiiiPaa+0x34>
    44e6:	81 2c       	mov	r8, r1
    44e8:	91 2c       	mov	r9, r1
        return Val;

    if(Val < 0)
        Val = 0;

    if(Val >= Max)
    44ea:	8c 16       	cp	r8, r28
    44ec:	9d 06       	cpc	r9, r29
    44ee:	24 f0       	brlt	.+8      	; 0x44f8 <_Z15math_InterPolExiiiPaa+0x42>
        Val = Max - 1;
    44f0:	4e 01       	movw	r8, r28
    44f2:	41 e0       	ldi	r20, 0x01	; 1
    44f4:	84 1a       	sub	r8, r20
    44f6:	91 08       	sbc	r9, r1

    int32_t InterPoolSize = Max / (NodesCount - 1); // Вычисляем размер интервала - максимальное значение / количество точек кривой
    44f8:	11 27       	eor	r17, r17
    44fa:	07 fd       	sbrc	r16, 7
    44fc:	10 95       	com	r17
    44fe:	01 50       	subi	r16, 0x01	; 1
    4500:	11 09       	sbc	r17, r1
    4502:	ce 01       	movw	r24, r28
    4504:	b8 01       	movw	r22, r16
    4506:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    450a:	fb 01       	movw	r30, r22

    uint8_t n  = (Val * (NodesCount - 1)) / Max; // Вычисляем интервал в который попали:  значение умножаем на количество интервалов и делим на максимальное значение
    450c:	80 9e       	mul	r8, r16
    450e:	c0 01       	movw	r24, r0
    4510:	81 9e       	mul	r8, r17
    4512:	90 0d       	add	r25, r0
    4514:	90 9e       	mul	r9, r16
    4516:	90 0d       	add	r25, r0
    4518:	11 24       	eor	r1, r1
    451a:	be 01       	movw	r22, r28
    451c:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    4520:	46 2f       	mov	r20, r22
    int16_t n1 = (*(Nodes + n)     * K) / 10;    // Вычисляем значение одной границы интервала
    4522:	69 01       	movw	r12, r18
    4524:	c6 0e       	add	r12, r22
    4526:	d1 1c       	adc	r13, r1
    4528:	d6 01       	movw	r26, r12
    452a:	2c 91       	ld	r18, X
    452c:	b7 01       	movw	r22, r14
    452e:	26 03       	mulsu	r18, r22
    4530:	c0 01       	movw	r24, r0
    4532:	27 9f       	mul	r18, r23
    4534:	90 0d       	add	r25, r0
    4536:	11 24       	eor	r1, r1
    4538:	0a e0       	ldi	r16, 0x0A	; 10
    453a:	10 e0       	ldi	r17, 0x00	; 0
    453c:	b8 01       	movw	r22, r16
    453e:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    4542:	eb 01       	movw	r28, r22
    int16_t n2 = (*(Nodes + n + 1) * K) / 10;    // Вычисляем значение другой границы интервала
    
    // Вычисляем смещение: значение относительно начала интервала умножается на величину интервала(Y) и делится на величину интервала(X)
    int16_t ln = (Val - n * InterPoolSize) * (n2 - n1) / InterPoolSize;
    4544:	aa 24       	eor	r10, r10
    4546:	97 fc       	sbrc	r9, 7
    4548:	a0 94       	com	r10
    454a:	ba 2c       	mov	r11, r10
    454c:	24 2f       	mov	r18, r20
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	df 01       	movw	r26, r30
    4552:	0e 94 dc 47 	call	0x8fb8	; 0x8fb8 <__usmulhisi3>
    4556:	86 1a       	sub	r8, r22
    4558:	97 0a       	sbc	r9, r23
    455a:	a8 0a       	sbc	r10, r24
    455c:	b9 0a       	sbc	r11, r25

    int32_t InterPoolSize = Max / (NodesCount - 1); // Вычисляем размер интервала - максимальное значение / количество точек кривой

    uint8_t n  = (Val * (NodesCount - 1)) / Max; // Вычисляем интервал в который попали:  значение умножаем на количество интервалов и делим на максимальное значение
    int16_t n1 = (*(Nodes + n)     * K) / 10;    // Вычисляем значение одной границы интервала
    int16_t n2 = (*(Nodes + n + 1) * K) / 10;    // Вычисляем значение другой границы интервала
    455e:	d6 01       	movw	r26, r12
    4560:	11 96       	adiw	r26, 0x01	; 1
    4562:	2c 91       	ld	r18, X
    4564:	a7 01       	movw	r20, r14
    4566:	24 03       	mulsu	r18, r20
    4568:	c0 01       	movw	r24, r0
    456a:	25 9f       	mul	r18, r21
    456c:	90 0d       	add	r25, r0
    456e:	11 24       	eor	r1, r1
    4570:	b8 01       	movw	r22, r16
    4572:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    
    // Вычисляем смещение: значение относительно начала интервала умножается на величину интервала(Y) и делится на величину интервала(X)
    int16_t ln = (Val - n * InterPoolSize) * (n2 - n1) / InterPoolSize;
    4576:	6c 1b       	sub	r22, r28
    4578:	7d 0b       	sbc	r23, r29
    457a:	db 01       	movw	r26, r22
    457c:	a5 01       	movw	r20, r10
    457e:	94 01       	movw	r18, r8
    4580:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <__mulshisi3>
        Val = 0;

    if(Val >= Max)
        Val = Max - 1;

    int32_t InterPoolSize = Max / (NodesCount - 1); // Вычисляем размер интервала - максимальное значение / количество точек кривой
    4584:	9f 01       	movw	r18, r30
    4586:	44 27       	eor	r20, r20
    4588:	37 fd       	sbrc	r19, 7
    458a:	40 95       	com	r20
    458c:	54 2f       	mov	r21, r20
    uint8_t n  = (Val * (NodesCount - 1)) / Max; // Вычисляем интервал в который попали:  значение умножаем на количество интервалов и делим на максимальное значение
    int16_t n1 = (*(Nodes + n)     * K) / 10;    // Вычисляем значение одной границы интервала
    int16_t n2 = (*(Nodes + n + 1) * K) / 10;    // Вычисляем значение другой границы интервала
    
    // Вычисляем смещение: значение относительно начала интервала умножается на величину интервала(Y) и делится на величину интервала(X)
    int16_t ln = (Val - n * InterPoolSize) * (n2 - n1) / InterPoolSize;
    458e:	0e 94 4e 48 	call	0x909c	; 0x909c <__divmodsi4>

    return(n1 + ln);
    4592:	2c 0f       	add	r18, r28
    4594:	3d 1f       	adc	r19, r29
    4596:	01 c0       	rjmp	.+2      	; 0x459a <_Z15math_InterPolExiiiPaa+0xe4>
    4598:	9c 01       	movw	r18, r24
}
    459a:	c9 01       	movw	r24, r18
    459c:	df 91       	pop	r29
    459e:	cf 91       	pop	r28
    45a0:	1f 91       	pop	r17
    45a2:	0f 91       	pop	r16
    45a4:	ff 90       	pop	r15
    45a6:	ef 90       	pop	r14
    45a8:	df 90       	pop	r13
    45aa:	cf 90       	pop	r12
    45ac:	bf 90       	pop	r11
    45ae:	af 90       	pop	r10
    45b0:	9f 90       	pop	r9
    45b2:	8f 90       	pop	r8
    45b4:	08 95       	ret

000045b6 <_Z18math_ChangeTrimmerPaa>:
}

// Изменение триммеров
void math_ChangeTrimmer(int8_t* trim, int8_t dir)
{
    if(dir == 0)
    45b6:	66 23       	and	r22, r22
    45b8:	e9 f0       	breq	.+58     	; 0x45f4 <_Z18math_ChangeTrimmerPaa+0x3e>
    45ba:	fc 01       	movw	r30, r24
    45bc:	40 81       	ld	r20, Z
    45be:	26 2f       	mov	r18, r22
    45c0:	33 27       	eor	r19, r19
    45c2:	27 fd       	sbrc	r18, 7
    45c4:	30 95       	com	r19
        return;
    
    if((dir > 0) && (*trim + dir >  96))
    45c6:	24 0f       	add	r18, r20
    45c8:	31 1d       	adc	r19, r1
    45ca:	47 fd       	sbrc	r20, 7
    45cc:	3a 95       	dec	r19
    45ce:	16 16       	cp	r1, r22
    45d0:	24 f4       	brge	.+8      	; 0x45da <_Z18math_ChangeTrimmerPaa+0x24>
    45d2:	21 36       	cpi	r18, 0x61	; 97
    45d4:	31 05       	cpc	r19, r1
    45d6:	24 f0       	brlt	.+8      	; 0x45e0 <_Z18math_ChangeTrimmerPaa+0x2a>
    45d8:	08 95       	ret
        return;
    
    if((dir < 0) && (*trim + dir < -96))
    45da:	20 3a       	cpi	r18, 0xA0	; 160
    45dc:	3f 4f       	sbci	r19, 0xFF	; 255
    45de:	54 f0       	brlt	.+20     	; 0x45f4 <_Z18math_ChangeTrimmerPaa+0x3e>
        return;
    
    *trim += dir;
    45e0:	64 0f       	add	r22, r20
    45e2:	fc 01       	movw	r30, r24
    45e4:	60 83       	st	Z, r22
    SetTrimmersSaveTime(1500);
    45e6:	8c ed       	ldi	r24, 0xDC	; 220
    45e8:	95 e0       	ldi	r25, 0x05	; 5
    45ea:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <_Z19SetTrimmersSaveTimej>
    trim_sound_en = 1;
    45ee:	81 e0       	ldi	r24, 0x01	; 1
    45f0:	80 93 67 09 	sts	0x0967, r24
    45f4:	08 95       	ret

000045f6 <_Z17math_CalcControlsv>:
}

// Опрос устройств ввода и рассчет их значений
void math_CalcControls()
{
    45f6:	2f 92       	push	r2
    45f8:	3f 92       	push	r3
    45fa:	4f 92       	push	r4
    45fc:	5f 92       	push	r5
    45fe:	6f 92       	push	r6
    4600:	7f 92       	push	r7
    4602:	8f 92       	push	r8
    4604:	9f 92       	push	r9
    4606:	af 92       	push	r10
    4608:	bf 92       	push	r11
    460a:	cf 92       	push	r12
    460c:	df 92       	push	r13
    460e:	ef 92       	push	r14
    4610:	ff 92       	push	r15
    4612:	0f 93       	push	r16
    4614:	1f 93       	push	r17
    4616:	cf 93       	push	r28
    4618:	df 93       	push	r29
    461a:	cd b7       	in	r28, 0x3d	; 61
    461c:	de b7       	in	r29, 0x3e	; 62
    461e:	62 97       	sbiw	r28, 0x12	; 18
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	f8 94       	cli
    4624:	de bf       	out	0x3e, r29	; 62
    4626:	0f be       	out	0x3f, r0	; 63
    4628:	cd bf       	out	0x3d, r28	; 61
    static uint8_t TrimMask = 0;

    //опрос переключателя режимов
    if(MODE_KEY2)
    462a:	36 99       	sbic	0x06, 6	; 6
    462c:	03 c0       	rjmp	.+6      	; 0x4634 <_Z17math_CalcControlsv+0x3e>
        FLY_MODE = 1;
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	80 93 68 09 	sts	0x0968, r24
    if(!MODE_KEY1 && !MODE_KEY2)
    4634:	37 9b       	sbis	0x06, 7	; 6
    4636:	02 c0       	rjmp	.+4      	; 0x463c <_Z17math_CalcControlsv+0x46>
    4638:	36 99       	sbic	0x06, 6	; 6
    463a:	fd c1       	rjmp	.+1018   	; 0x4a36 <_Z17math_CalcControlsv+0x440>
        FLY_MODE = 0;
    if(MODE_KEY1)
    463c:	37 99       	sbic	0x06, 7	; 6
    463e:	03 c0       	rjmp	.+6      	; 0x4646 <_Z17math_CalcControlsv+0x50>
        FLY_MODE = 2;
    4640:	82 e0       	ldi	r24, 0x02	; 2
    4642:	80 93 68 09 	sts	0x0968, r24

    uint8_t NewTrimMask = 0;

    // Загоняем все нажатые триммера в битовую маску
    if(trim_0up)   NewTrimMask |= 0x01;
    4646:	80 91 09 01 	lds	r24, 0x0109
    464a:	83 fb       	bst	r24, 3
    464c:	88 27       	eor	r24, r24
    464e:	80 f9       	bld	r24, 0
    4650:	91 e0       	ldi	r25, 0x01	; 1
    4652:	89 27       	eor	r24, r25
    if(trim_0down) NewTrimMask |= 0x02;
    4654:	90 91 09 01 	lds	r25, 0x0109
    4658:	95 ff       	sbrs	r25, 5
    465a:	82 60       	ori	r24, 0x02	; 2
    if(trim_1up)   NewTrimMask |= 0x04;
    465c:	90 91 09 01 	lds	r25, 0x0109
    4660:	96 ff       	sbrs	r25, 6
    4662:	84 60       	ori	r24, 0x04	; 4
    if(trim_1down) NewTrimMask |= 0x08;
    4664:	90 91 09 01 	lds	r25, 0x0109
    4668:	94 ff       	sbrs	r25, 4
    466a:	88 60       	ori	r24, 0x08	; 8
    if(trim_2up)   NewTrimMask |= 0x10;
    466c:	90 91 09 01 	lds	r25, 0x0109
    4670:	97 ff       	sbrs	r25, 7
    4672:	80 61       	ori	r24, 0x10	; 16
    if(trim_2down) NewTrimMask |= 0x20;
    4674:	90 9b       	sbis	0x12, 0	; 18
    4676:	80 62       	ori	r24, 0x20	; 32
    if(trim_3up)   NewTrimMask |= 0x40;
    4678:	91 9b       	sbis	0x12, 1	; 18
    467a:	80 64       	ori	r24, 0x40	; 64
    if(trim_3down) NewTrimMask |= 0x80;
    467c:	4f 9b       	sbis	0x09, 7	; 9
    467e:	80 68       	ori	r24, 0x80	; 128
    
    if(NewTrimMask != TrimMask)
    4680:	90 91 e1 0c 	lds	r25, 0x0CE1
    4684:	89 17       	cp	r24, r25
    4686:	19 f0       	breq	.+6      	; 0x468e <_Z17math_CalcControlsv+0x98>
    {
        TrimMask = NewTrimMask;
    4688:	80 93 e1 0c 	sts	0x0CE1, r24
    468c:	29 c0       	rjmp	.+82     	; 0x46e0 <_Z17math_CalcControlsv+0xea>
    }
    else
    if(TrimMask != 0) // Если присутствуют нажатые триммера - обрабатываем
    468e:	88 23       	and	r24, r24
    4690:	39 f1       	breq	.+78     	; 0x46e0 <_Z17math_CalcControlsv+0xea>
    4692:	00 e0       	ldi	r16, 0x00	; 0
    4694:	10 e0       	ldi	r17, 0x00	; 0
    {
        for(uint8_t i = 0; i < 8; ++i)
            if(TrimMask & (1 << i))
                math_ChangeTrimmer(&CurModel.Mode[FLY_MODE].trimmers[i/2], (i & 0x01) ? -1 : 1);
    4696:	26 ef       	ldi	r18, 0xF6	; 246
    4698:	30 2f       	mov	r19, r16
    }
    else
    if(TrimMask != 0) // Если присутствуют нажатые триммера - обрабатываем
    {
        for(uint8_t i = 0; i < 8; ++i)
            if(TrimMask & (1 << i))
    469a:	80 91 e1 0c 	lds	r24, 0x0CE1
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	00 2e       	mov	r0, r16
    46a2:	02 c0       	rjmp	.+4      	; 0x46a8 <_Z17math_CalcControlsv+0xb2>
    46a4:	95 95       	asr	r25
    46a6:	87 95       	ror	r24
    46a8:	0a 94       	dec	r0
    46aa:	e2 f7       	brpl	.-8      	; 0x46a4 <_Z17math_CalcControlsv+0xae>
    46ac:	80 ff       	sbrs	r24, 0
    46ae:	13 c0       	rjmp	.+38     	; 0x46d6 <_Z17math_CalcControlsv+0xe0>
                math_ChangeTrimmer(&CurModel.Mode[FLY_MODE].trimmers[i/2], (i & 0x01) ? -1 : 1);
    46b0:	00 ff       	sbrs	r16, 0
    46b2:	02 c0       	rjmp	.+4      	; 0x46b8 <_Z17math_CalcControlsv+0xc2>
    46b4:	6f ef       	ldi	r22, 0xFF	; 255
    46b6:	01 c0       	rjmp	.+2      	; 0x46ba <_Z17math_CalcControlsv+0xc4>
    46b8:	61 e0       	ldi	r22, 0x01	; 1
    46ba:	36 95       	lsr	r19
    46bc:	40 91 68 09 	lds	r20, 0x0968
    46c0:	42 03       	mulsu	r20, r18
    46c2:	c0 01       	movw	r24, r0
    46c4:	11 24       	eor	r1, r1
    46c6:	83 0f       	add	r24, r19
    46c8:	91 1d       	adc	r25, r1
    46ca:	83 57       	subi	r24, 0x73	; 115
    46cc:	95 4f       	sbci	r25, 0xF5	; 245
    46ce:	2a 8b       	std	Y+18, r18	; 0x12
    46d0:	0e 94 db 22 	call	0x45b6	; 0x45b6 <_Z18math_ChangeTrimmerPaa>
    46d4:	2a 89       	ldd	r18, Y+18	; 0x12
    46d6:	0f 5f       	subi	r16, 0xFF	; 255
    46d8:	1f 4f       	sbci	r17, 0xFF	; 255
        TrimMask = NewTrimMask;
    }
    else
    if(TrimMask != 0) // Если присутствуют нажатые триммера - обрабатываем
    {
        for(uint8_t i = 0; i < 8; ++i)
    46da:	08 30       	cpi	r16, 0x08	; 8
    46dc:	11 05       	cpc	r17, r1
    46de:	e1 f6       	brne	.-72     	; 0x4698 <_Z17math_CalcControlsv+0xa2>
            if(TrimMask & (1 << i))
                math_ChangeTrimmer(&CurModel.Mode[FLY_MODE].trimmers[i/2], (i & 0x01) ? -1 : 1);
    }

    //опрос кнопки выключения двигателя
    if(Tcut_KEY)
    46e0:	32 99       	sbic	0x06, 2	; 6
    46e2:	04 c0       	rjmp	.+8      	; 0x46ec <_Z17math_CalcControlsv+0xf6>
        Cut_enable = 1;
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	80 93 66 09 	sts	0x0966, r24
    46ea:	02 c0       	rjmp	.+4      	; 0x46f0 <_Z17math_CalcControlsv+0xfa>
    else
        Cut_enable = 0;
    46ec:	10 92 66 09 	sts	0x0966, r1
    46f0:	69 e7       	ldi	r22, 0x79	; 121
    46f2:	a6 2e       	mov	r10, r22
    46f4:	69 e0       	ldi	r22, 0x09	; 9
    46f6:	b6 2e       	mov	r11, r22
    46f8:	72 e8       	ldi	r23, 0x82	; 130
    46fa:	c7 2e       	mov	r12, r23
    46fc:	7c e0       	ldi	r23, 0x0C	; 12
    46fe:	d7 2e       	mov	r13, r23
    4700:	ee e0       	ldi	r30, 0x0E	; 14
    4702:	ee 2e       	mov	r14, r30
    4704:	ed e0       	ldi	r30, 0x0D	; 13
    4706:	fe 2e       	mov	r15, r30
    4708:	06 ea       	ldi	r16, 0xA6	; 166
    470a:	1c e0       	ldi	r17, 0x0C	; 12
    else
    if(TrimMask != 0) // Если присутствуют нажатые триммера - обрабатываем
    {
        for(uint8_t i = 0; i < 8; ++i)
            if(TrimMask & (1 << i))
                math_ChangeTrimmer(&CurModel.Mode[FLY_MODE].trimmers[i/2], (i & 0x01) ? -1 : 1);
    470c:	71 2c       	mov	r7, r1
        AD[i] = read_adc(i);
        //DEBUG TODO: Если ADmid unsigned возникает проблема в вычислениях при отритцательных числах. Не понятно почему так происходит...
        if(AD[i] > Settings.ADmid[i])
            AD_NORM[i] = ((AD[i] - Settings.ADmid[i]) * Settings.Kmax[i]) / 10;
        else
            AD_NORM[i] = ((AD[i] - Settings.ADmid[i]) * Settings.Kmin[i]) / 10;
    470e:	fa e0       	ldi	r31, 0x0A	; 10
    4710:	8f 2e       	mov	r8, r31
    4712:	91 2c       	mov	r9, r1
        Cut_enable = 0;

    // Чтение АЦП и нормализация полученных данных
    for(uint8_t i = 0; i < MAX_ADC; ++i)
    {
        AD[i] = read_adc(i);
    4714:	87 2d       	mov	r24, r7
    4716:	0e 94 0f 44 	call	0x881e	; 0x881e <_Z8read_adch>
    471a:	d5 01       	movw	r26, r10
    471c:	8d 93       	st	X+, r24
    471e:	9d 93       	st	X+, r25
    4720:	5d 01       	movw	r10, r26
        //DEBUG TODO: Если ADmid unsigned возникает проблема в вычислениях при отритцательных числах. Не понятно почему так происходит...
        if(AD[i] > Settings.ADmid[i])
    4722:	f6 01       	movw	r30, r12
    4724:	41 91       	ld	r20, Z+
    4726:	51 91       	ld	r21, Z+
    4728:	6f 01       	movw	r12, r30
    472a:	9c 01       	movw	r18, r24
    472c:	24 1b       	sub	r18, r20
    472e:	35 0b       	sbc	r19, r21
            AD_NORM[i] = ((AD[i] - Settings.ADmid[i]) * Settings.Kmax[i]) / 10;
    4730:	d8 01       	movw	r26, r16
    // Чтение АЦП и нормализация полученных данных
    for(uint8_t i = 0; i < MAX_ADC; ++i)
    {
        AD[i] = read_adc(i);
        //DEBUG TODO: Если ADmid unsigned возникает проблема в вычислениях при отритцательных числах. Не понятно почему так происходит...
        if(AD[i] > Settings.ADmid[i])
    4732:	48 17       	cp	r20, r24
    4734:	59 07       	cpc	r21, r25
    4736:	2c f4       	brge	.+10     	; 0x4742 <_Z17math_CalcControlsv+0x14c>
            AD_NORM[i] = ((AD[i] - Settings.ADmid[i]) * Settings.Kmax[i]) / 10;
    4738:	1c 96       	adiw	r26, 0x0c	; 12
    473a:	4d 91       	ld	r20, X+
    473c:	5c 91       	ld	r21, X
    473e:	1d 97       	sbiw	r26, 0x0d	; 13
    4740:	02 c0       	rjmp	.+4      	; 0x4746 <_Z17math_CalcControlsv+0x150>
        else
            AD_NORM[i] = ((AD[i] - Settings.ADmid[i]) * Settings.Kmin[i]) / 10;
    4742:	4d 91       	ld	r20, X+
    4744:	5c 91       	ld	r21, X
    4746:	24 9f       	mul	r18, r20
    4748:	c0 01       	movw	r24, r0
    474a:	25 9f       	mul	r18, r21
    474c:	90 0d       	add	r25, r0
    474e:	34 9f       	mul	r19, r20
    4750:	90 0d       	add	r25, r0
    4752:	11 24       	eor	r1, r1
    4754:	b4 01       	movw	r22, r8
    4756:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    475a:	f7 01       	movw	r30, r14
    475c:	71 83       	std	Z+1, r23	; 0x01
    475e:	60 83       	st	Z, r22
        Cut_enable = 1;
    else
        Cut_enable = 0;

    // Чтение АЦП и нормализация полученных данных
    for(uint8_t i = 0; i < MAX_ADC; ++i)
    4760:	73 94       	inc	r7
    4762:	f2 e0       	ldi	r31, 0x02	; 2
    4764:	ef 0e       	add	r14, r31
    4766:	f1 1c       	adc	r15, r1
    4768:	0e 5f       	subi	r16, 0xFE	; 254
    476a:	1f 4f       	sbci	r17, 0xFF	; 255
    476c:	26 e0       	ldi	r18, 0x06	; 6
    476e:	72 12       	cpse	r7, r18
    4770:	d1 cf       	rjmp	.-94     	; 0x4714 <_Z17math_CalcControlsv+0x11e>
        else
            AD_NORM[i] = ((AD[i] - Settings.ADmid[i]) * Settings.Kmin[i]) / 10;
    }

    // Копирование нормализованных данных с АЦП в управляющие элементы  для дальнейшей обработки
    input[CTRL_AIL]  = AD_NORM[ADC_AIL];
    4772:	80 91 10 0d 	lds	r24, 0x0D10
    4776:	90 91 11 0d 	lds	r25, 0x0D11
    477a:	90 93 f9 0c 	sts	0x0CF9, r25
    477e:	80 93 f8 0c 	sts	0x0CF8, r24
    input[CTRL_ELE]  = AD_NORM[ADC_ELE];
    4782:	80 91 0e 0d 	lds	r24, 0x0D0E
    4786:	90 91 0f 0d 	lds	r25, 0x0D0F
    478a:	90 93 fb 0c 	sts	0x0CFB, r25
    478e:	80 93 fa 0c 	sts	0x0CFA, r24
    input[CTRL_THR]  = AD_NORM[ADC_THR];
    4792:	80 91 12 0d 	lds	r24, 0x0D12
    4796:	90 91 13 0d 	lds	r25, 0x0D13
    479a:	90 93 fd 0c 	sts	0x0CFD, r25
    479e:	80 93 fc 0c 	sts	0x0CFC, r24
    input[CTRL_RUD]  = AD_NORM[ADC_RUD];
    47a2:	80 91 14 0d 	lds	r24, 0x0D14
    47a6:	90 91 15 0d 	lds	r25, 0x0D15
    47aa:	90 93 ff 0c 	sts	0x0CFF, r25
    47ae:	80 93 fe 0c 	sts	0x0CFE, r24
    input[CTRL_AUX1] = AD_NORM[ADC_AUX1];
    47b2:	80 91 16 0d 	lds	r24, 0x0D16
    47b6:	90 91 17 0d 	lds	r25, 0x0D17
    47ba:	90 93 01 0d 	sts	0x0D01, r25
    47be:	80 93 00 0d 	sts	0x0D00, r24
        input[CTRL_SW1] = (int16_t)TimerClockPerUSec(500); // +0.5 мс
    else
        input[CTRL_SW1] = (int16_t)-TimerClockPerUSec(500); // -0.5 мс
#else
    // Опрос и установка значения переключателя SW1 (трехрозиционный)
    if(SW1_1)
    47c2:	06 99       	sbic	0x00, 6	; 0
    47c4:	06 c0       	rjmp	.+12     	; 0x47d2 <_Z17math_CalcControlsv+0x1dc>
        input[CTRL_SW1] = (int16_t)TimerClockPerUSec(500); // +0.5 мс
    47c6:	88 ee       	ldi	r24, 0xE8	; 232
    47c8:	93 e0       	ldi	r25, 0x03	; 3
    47ca:	90 93 03 0d 	sts	0x0D03, r25
    47ce:	80 93 02 0d 	sts	0x0D02, r24
    if(!SW1_1 && !SW1_2)
    47d2:	06 9b       	sbis	0x00, 6	; 0
    47d4:	02 c0       	rjmp	.+4      	; 0x47da <_Z17math_CalcControlsv+0x1e4>
    47d6:	35 99       	sbic	0x06, 5	; 6
    47d8:	31 c1       	rjmp	.+610    	; 0x4a3c <_Z17math_CalcControlsv+0x446>
        input[CTRL_SW1] = 0; // 0 мс
    if(SW1_2)
    47da:	35 99       	sbic	0x06, 5	; 6
    47dc:	06 c0       	rjmp	.+12     	; 0x47ea <_Z17math_CalcControlsv+0x1f4>
        input[CTRL_SW1] = (int16_t)-TimerClockPerUSec(500); // -0.5 мс
    47de:	88 e1       	ldi	r24, 0x18	; 24
    47e0:	9c ef       	ldi	r25, 0xFC	; 252
    47e2:	90 93 03 0d 	sts	0x0D03, r25
    47e6:	80 93 02 0d 	sts	0x0D02, r24
#endif

    // Опрос и установка значения переключателя SW2 (двухрозиционный)
    if(SW2)
    47ea:	34 99       	sbic	0x06, 4	; 6
    47ec:	03 c0       	rjmp	.+6      	; 0x47f4 <_Z17math_CalcControlsv+0x1fe>
        input[CTRL_SW2] = (int16_t)TimerClockPerUSec(500); // +0.5 мс
    47ee:	88 ee       	ldi	r24, 0xE8	; 232
    47f0:	93 e0       	ldi	r25, 0x03	; 3
    47f2:	02 c0       	rjmp	.+4      	; 0x47f8 <_Z17math_CalcControlsv+0x202>
    else
        input[CTRL_SW2] = (int16_t)-TimerClockPerUSec(500); // -0.5 мс
    47f4:	88 e1       	ldi	r24, 0x18	; 24
    47f6:	9c ef       	ldi	r25, 0xFC	; 252
    47f8:	90 93 05 0d 	sts	0x0D05, r25
    47fc:	80 93 04 0d 	sts	0x0D04, r24

    // Опрос и установка значения переключателя SW3 (двухрозиционный)
    if(SW3)
    4800:	33 99       	sbic	0x06, 3	; 6
    4802:	03 c0       	rjmp	.+6      	; 0x480a <_Z17math_CalcControlsv+0x214>
        input[CTRL_SW3] = (int16_t)TimerClockPerUSec(500); // +0.5 мс
    4804:	88 ee       	ldi	r24, 0xE8	; 232
    4806:	93 e0       	ldi	r25, 0x03	; 3
    4808:	02 c0       	rjmp	.+4      	; 0x480e <_Z17math_CalcControlsv+0x218>
    else
        input[CTRL_SW3] = (int16_t)-TimerClockPerUSec(500); // -0.5 мс
    480a:	88 e1       	ldi	r24, 0x18	; 24
    480c:	9c ef       	ldi	r25, 0xFC	; 252
    480e:	90 93 07 0d 	sts	0x0D07, r25
    4812:	80 93 06 0d 	sts	0x0D06, r24

    // Копирование виртуальных каналов из реальных
    input[CTRL_V1] = input[CurModel.Mode[FLY_MODE].Control[CTRL_V1].from];
    4816:	20 91 68 09 	lds	r18, 0x0968
    481a:	36 ef       	ldi	r19, 0xF6	; 246
    481c:	23 03       	mulsu	r18, r19
    481e:	c0 01       	movw	r24, r0
    4820:	11 24       	eor	r1, r1
    4822:	dc 01       	movw	r26, r24
    4824:	ab 57       	subi	r26, 0x7B	; 123
    4826:	b6 4f       	sbci	r27, 0xF6	; 246
    4828:	4d 01       	movw	r8, r26
    482a:	fd 01       	movw	r30, r26
    482c:	e2 57       	subi	r30, 0x72	; 114
    482e:	ff 4f       	sbci	r31, 0xFF	; 255
    4830:	e0 81       	ld	r30, Z
    4832:	ee 0f       	add	r30, r30
    4834:	ff 0b       	sbc	r31, r31
    4836:	e8 50       	subi	r30, 0x08	; 8
    4838:	f3 4f       	sbci	r31, 0xF3	; 243
    483a:	20 81       	ld	r18, Z
    483c:	31 81       	ldd	r19, Z+1	; 0x01
    483e:	30 93 09 0d 	sts	0x0D09, r19
    4842:	20 93 08 0d 	sts	0x0D08, r18
    input[CTRL_V2] = input[CurModel.Mode[FLY_MODE].Control[CTRL_V2].from];
    4846:	fd 01       	movw	r30, r26
    4848:	e5 56       	subi	r30, 0x65	; 101
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	e0 81       	ld	r30, Z
    484e:	ee 0f       	add	r30, r30
    4850:	ff 0b       	sbc	r31, r31
    4852:	e8 50       	subi	r30, 0x08	; 8
    4854:	f3 4f       	sbci	r31, 0xF3	; 243
    4856:	20 81       	ld	r18, Z
    4858:	31 81       	ldd	r19, Z+1	; 0x01
    485a:	30 93 0b 0d 	sts	0x0D0B, r19
    485e:	20 93 0a 0d 	sts	0x0D0A, r18

    // Это значение триммера задаваемого в меню. Всегда равно 0.5 мс. В результате влияние зависит только от заданного коэффициента.
    input[CTRL_TRIM] = TimerClockPerUSec(500);
    4862:	28 ee       	ldi	r18, 0xE8	; 232
    4864:	33 e0       	ldi	r19, 0x03	; 3
    4866:	30 93 0d 0d 	sts	0x0D0D, r19
    486a:	20 93 0c 0d 	sts	0x0D0C, r18

    // Опрос двойных расходов
    bool Dual[MAX_CONTROLS] = {false};
    486e:	fe 01       	movw	r30, r28
    4870:	31 96       	adiw	r30, 0x01	; 1
    4872:	2b e0       	ldi	r18, 0x0B	; 11
    4874:	df 01       	movw	r26, r30
    4876:	1d 92       	st	X+, r1
    4878:	2a 95       	dec	r18
    487a:	e9 f7       	brne	.-6      	; 0x4876 <_Z17math_CalcControlsv+0x280>
    Dual[CTRL_AIL] = DUAL_AIL;
    487c:	26 b1       	in	r18, 0x06	; 6
    487e:	31 e0       	ldi	r19, 0x01	; 1
    4880:	26 95       	lsr	r18
    4882:	21 70       	andi	r18, 0x01	; 1
    4884:	23 27       	eor	r18, r19
    4886:	29 83       	std	Y+1, r18	; 0x01
    Dual[CTRL_ELE] = DUAL_ELE;
    4888:	26 b1       	in	r18, 0x06	; 6
    488a:	21 70       	andi	r18, 0x01	; 1
    488c:	23 27       	eor	r18, r19
    488e:	2a 83       	std	Y+2, r18	; 0x02
    Dual[CTRL_RUD] = DUAL_RUD;
    4890:	22 b3       	in	r18, 0x12	; 18
    4892:	22 fb       	bst	r18, 2
    4894:	22 27       	eor	r18, r18
    4896:	20 f9       	bld	r18, 0
    4898:	23 27       	eor	r18, r19
    489a:	2c 83       	std	Y+4, r18	; 0x04
        }
        if(Factor != 100)
            out_cur[i] = out_cur[i] * Factor / 100;

        // Если включен T.Cut
        if((i == CTRL_THR) && Cut_enable)
    489c:	b0 91 66 09 	lds	r27, 0x0966
    48a0:	bf 87       	std	Y+15, r27	; 0x0f
    48a2:	32 ee       	ldi	r19, 0xE2	; 226
    48a4:	e3 2e       	mov	r14, r19
    48a6:	3c e0       	ldi	r19, 0x0C	; 12
    48a8:	f3 2e       	mov	r15, r19
    48aa:	48 ef       	ldi	r20, 0xF8	; 248
    48ac:	24 2e       	mov	r2, r20
    48ae:	4c e0       	ldi	r20, 0x0C	; 12
    48b0:	34 2e       	mov	r3, r20
    48b2:	fe 87       	std	Y+14, r31	; 0x0e
    48b4:	ed 87       	std	Y+13, r30	; 0x0d
    48b6:	a1 2c       	mov	r10, r1
    48b8:	b1 2c       	mov	r11, r1
    48ba:	c1 2c       	mov	r12, r1
    48bc:	d1 2c       	mov	r13, r1
    48be:	fc 01       	movw	r30, r24
    48c0:	e4 55       	subi	r30, 0x54	; 84
    48c2:	f6 4f       	sbci	r31, 0xF6	; 246
    48c4:	f9 8b       	std	Y+17, r31	; 0x11
    48c6:	e8 8b       	std	Y+16, r30	; 0x10
                Factor = CurModel.Mode[FLY_MODE].Control[i].minRates;
            else
                Factor = CurModel.Mode[FLY_MODE].Control[i].maxRates;
        }
        if(Factor != 100)
            out_cur[i] = out_cur[i] * Factor / 100;
    48c8:	54 e6       	ldi	r21, 0x64	; 100
    48ca:	45 2e       	mov	r4, r21
    48cc:	51 2c       	mov	r5, r1
    48ce:	61 2c       	mov	r6, r1
    48d0:	71 2c       	mov	r7, r1
    48d2:	cc 86       	std	Y+12, r12	; 0x0c
    48d4:	8b ef       	ldi	r24, 0xFB	; 251
    48d6:	8c 0d       	add	r24, r12
    Dual[CTRL_RUD] = DUAL_RUD;

    for(uint8_t i = 0; i < MAX_CONTROLS; ++i)
    {
        // Для этих каналов нет кривых - мы их просто копируем на выход.
        if((i == CTRL_SW1) ||
    48d8:	83 30       	cpi	r24, 0x03	; 3
    48da:	18 f0       	brcs	.+6      	; 0x48e2 <_Z17math_CalcControlsv+0x2ec>
           (i == CTRL_SW2) ||
           (i == CTRL_SW3) ||
    48dc:	fc 2d       	mov	r31, r12
    48de:	fa 30       	cpi	r31, 0x0A	; 10
    48e0:	21 f4       	brne	.+8      	; 0x48ea <_Z17math_CalcControlsv+0x2f4>
           (i == CTRL_TRIM))
        {
            out_cur[i] = input[i];
    48e2:	d1 01       	movw	r26, r2
    48e4:	8d 91       	ld	r24, X+
    48e6:	9c 91       	ld	r25, X
    48e8:	10 c0       	rjmp	.+32     	; 0x490a <_Z17math_CalcControlsv+0x314>

// Рассчет кривой
static inline int16_t math_CurveInterPol(int16_t Val, int8_t* Nodes)
{
    // Добавляем 0.5 мс - сдвигаем в положительную область
    Val += TimerClockPerUSec(500);
    48ea:	d1 01       	movw	r26, r2
    48ec:	8d 91       	ld	r24, X+
    48ee:	9c 91       	ld	r25, X
    // Выполняем рассчет кривой с использованием универсальной функции
    return math_InterPolEx(Val, TimerClockPerUSec(1000), TimerClockPerUSec(500) / 10, Nodes, CURVE_NODES);
    48f0:	07 e0       	ldi	r16, 0x07	; 7
    48f2:	28 89       	ldd	r18, Y+16	; 0x10
    48f4:	39 89       	ldd	r19, Y+17	; 0x11
    48f6:	2a 0d       	add	r18, r10
    48f8:	3b 1d       	adc	r19, r11
    48fa:	44 e6       	ldi	r20, 0x64	; 100
    48fc:	50 e0       	ldi	r21, 0x00	; 0
    48fe:	60 ed       	ldi	r22, 0xD0	; 208
    4900:	77 e0       	ldi	r23, 0x07	; 7
    4902:	88 51       	subi	r24, 0x18	; 24
    4904:	9c 4f       	sbci	r25, 0xFC	; 252
    4906:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <_Z15math_InterPolExiiiPaa>
            out_cur[i] = input[i];
        }
        else
        {
            // Рассчет значения с использованием кривой
            out_cur[i] = math_CurveInterPol(input[i], CurModel.Mode[FLY_MODE].Control[i].nodes);
    490a:	f7 01       	movw	r30, r14
    490c:	91 83       	std	Z+1, r25	; 0x01
    490e:	80 83       	st	Z, r24
        }

        // Расходы
        int32_t Factor;
        if(Dual[i])
    4910:	ad 85       	ldd	r26, Y+13	; 0x0d
    4912:	be 85       	ldd	r27, Y+14	; 0x0e
    4914:	8d 91       	ld	r24, X+
    4916:	be 87       	std	Y+14, r27	; 0x0e
    4918:	ad 87       	std	Y+13, r26	; 0x0d
    491a:	84 01       	movw	r16, r8
    491c:	0a 0d       	add	r16, r10
    491e:	1b 1d       	adc	r17, r11
    4920:	88 23       	and	r24, r24
    4922:	61 f0       	breq	.+24     	; 0x493c <_Z17math_CalcControlsv+0x346>
        {
            if(input[i] < 0)
    4924:	f1 01       	movw	r30, r2
    4926:	80 81       	ld	r24, Z
    4928:	91 81       	ldd	r25, Z+1	; 0x01
    492a:	97 ff       	sbrs	r25, 7
    492c:	04 c0       	rjmp	.+8      	; 0x4936 <_Z17math_CalcControlsv+0x340>
                Factor = CurModel.Mode[FLY_MODE].Control[i].minDRates;
    492e:	d8 01       	movw	r26, r16
    4930:	95 96       	adiw	r26, 0x25	; 37
    4932:	2c 91       	ld	r18, X
    4934:	0e c0       	rjmp	.+28     	; 0x4952 <_Z17math_CalcControlsv+0x35c>
            else
                Factor = CurModel.Mode[FLY_MODE].Control[i].maxDRates;
    4936:	f8 01       	movw	r30, r16
    4938:	24 a1       	ldd	r18, Z+36	; 0x24
    493a:	0b c0       	rjmp	.+22     	; 0x4952 <_Z17math_CalcControlsv+0x35c>
        }
        else
        {
            if(input[i] < 0)
    493c:	d1 01       	movw	r26, r2
    493e:	8d 91       	ld	r24, X+
    4940:	9c 91       	ld	r25, X
    4942:	97 ff       	sbrs	r25, 7
    4944:	03 c0       	rjmp	.+6      	; 0x494c <_Z17math_CalcControlsv+0x356>
                Factor = CurModel.Mode[FLY_MODE].Control[i].minRates;
    4946:	f8 01       	movw	r30, r16
    4948:	23 a1       	ldd	r18, Z+35	; 0x23
    494a:	03 c0       	rjmp	.+6      	; 0x4952 <_Z17math_CalcControlsv+0x35c>
            else
                Factor = CurModel.Mode[FLY_MODE].Control[i].maxRates;
    494c:	d8 01       	movw	r26, r16
    494e:	92 96       	adiw	r26, 0x22	; 34
    4950:	2c 91       	ld	r18, X
    4952:	30 e0       	ldi	r19, 0x00	; 0
    4954:	40 e0       	ldi	r20, 0x00	; 0
    4956:	50 e0       	ldi	r21, 0x00	; 0
        }
        if(Factor != 100)
    4958:	24 36       	cpi	r18, 0x64	; 100
    495a:	31 05       	cpc	r19, r1
    495c:	41 05       	cpc	r20, r1
    495e:	51 05       	cpc	r21, r1
    4960:	61 f0       	breq	.+24     	; 0x497a <_Z17math_CalcControlsv+0x384>
            out_cur[i] = out_cur[i] * Factor / 100;
    4962:	f7 01       	movw	r30, r14
    4964:	a0 81       	ld	r26, Z
    4966:	b1 81       	ldd	r27, Z+1	; 0x01
    4968:	0e 94 ee 47 	call	0x8fdc	; 0x8fdc <__mulshisi3>
    496c:	a3 01       	movw	r20, r6
    496e:	92 01       	movw	r18, r4
    4970:	0e 94 4e 48 	call	0x909c	; 0x909c <__divmodsi4>
    4974:	d7 01       	movw	r26, r14
    4976:	2d 93       	st	X+, r18
    4978:	3c 93       	st	X, r19

        // Если включен T.Cut
        if((i == CTRL_THR) && Cut_enable)
    497a:	bc 85       	ldd	r27, Y+12	; 0x0c
    497c:	b2 30       	cpi	r27, 0x02	; 2
    497e:	99 f4       	brne	.+38     	; 0x49a6 <_Z17math_CalcControlsv+0x3b0>
    4980:	ef 85       	ldd	r30, Y+15	; 0x0f
    4982:	ee 23       	and	r30, r30
    4984:	99 f0       	breq	.+38     	; 0x49ac <_Z17math_CalcControlsv+0x3b6>
        {
            Factor = CurModel.Mode[FLY_MODE].Control[i].minDRates; // minDRates в канале газа - положение при T.Cut
    4986:	d8 01       	movw	r26, r16
    4988:	95 96       	adiw	r26, 0x25	; 37
    498a:	2c 91       	ld	r18, X
            out_cur[i] = (- TimerClockPerUSec(600)) * Factor / 100;
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	a0 e5       	ldi	r26, 0x50	; 80
    4990:	bb ef       	ldi	r27, 0xFB	; 251
    4992:	0e 94 cd 47 	call	0x8f9a	; 0x8f9a <__umulhisi3>
    4996:	a3 01       	movw	r20, r6
    4998:	92 01       	movw	r18, r4
    499a:	0e 94 4e 48 	call	0x909c	; 0x909c <__divmodsi4>
    499e:	f7 01       	movw	r30, r14
    49a0:	31 83       	std	Z+1, r19	; 0x01
    49a2:	20 83       	st	Z, r18
    49a4:	03 c0       	rjmp	.+6      	; 0x49ac <_Z17math_CalcControlsv+0x3b6>
        }

        // Прибавляем триммера к основным управляющим каналам
        //DEBOG TODO: доделать триммеры через enum
        if(i < MAX_TRIMMERS)
    49a6:	fc 85       	ldd	r31, Y+12	; 0x0c
    49a8:	f4 30       	cpi	r31, 0x04	; 4
    49aa:	80 f4       	brcc	.+32     	; 0x49cc <_Z17math_CalcControlsv+0x3d6>
    49ac:	f4 01       	movw	r30, r8
    49ae:	ec 0d       	add	r30, r12
    49b0:	fd 1d       	adc	r31, r13
    49b2:	e8 5f       	subi	r30, 0xF8	; 248
    49b4:	fe 4f       	sbci	r31, 0xFE	; 254
        {
            const int16_t TrimFactor = CurModel.Mode[FLY_MODE].trimmers[i];
    49b6:	20 81       	ld	r18, Z
            out_cur[i] += TrimFactor * 2; //DEBUG TODO: нужно вычисляемое число, зависящее от частоты
    49b8:	22 0f       	add	r18, r18
    49ba:	33 0b       	sbc	r19, r19
    49bc:	d7 01       	movw	r26, r14
    49be:	8d 91       	ld	r24, X+
    49c0:	9c 91       	ld	r25, X
    49c2:	11 97       	sbiw	r26, 0x01	; 1
    49c4:	82 0f       	add	r24, r18
    49c6:	93 1f       	adc	r25, r19
    49c8:	8d 93       	st	X+, r24
    49ca:	9c 93       	st	X, r25
        }

        // Применение реверса канала
        out_cur[i] *= CurModel.Mode[FLY_MODE].Control[i].reverse;
    49cc:	f8 01       	movw	r30, r16
    49ce:	41 a1       	ldd	r20, Z+33	; 0x21
    49d0:	d7 01       	movw	r26, r14
    49d2:	2d 91       	ld	r18, X+
    49d4:	3c 91       	ld	r19, X
    49d6:	42 03       	mulsu	r20, r18
    49d8:	c0 01       	movw	r24, r0
    49da:	43 9f       	mul	r20, r19
    49dc:	90 0d       	add	r25, r0
    49de:	11 24       	eor	r1, r1
    49e0:	f7 01       	movw	r30, r14
    49e2:	81 93       	st	Z+, r24
    49e4:	91 93       	st	Z+, r25
    49e6:	7f 01       	movw	r14, r30
    49e8:	ff ef       	ldi	r31, 0xFF	; 255
    49ea:	cf 1a       	sub	r12, r31
    49ec:	df 0a       	sbc	r13, r31
    49ee:	2d e0       	ldi	r18, 0x0D	; 13
    49f0:	a2 0e       	add	r10, r18
    49f2:	b1 1c       	adc	r11, r1
    49f4:	32 e0       	ldi	r19, 0x02	; 2
    49f6:	23 0e       	add	r2, r19
    49f8:	31 1c       	adc	r3, r1
    bool Dual[MAX_CONTROLS] = {false};
    Dual[CTRL_AIL] = DUAL_AIL;
    Dual[CTRL_ELE] = DUAL_ELE;
    Dual[CTRL_RUD] = DUAL_RUD;

    for(uint8_t i = 0; i < MAX_CONTROLS; ++i)
    49fa:	8b e0       	ldi	r24, 0x0B	; 11
    49fc:	c8 16       	cp	r12, r24
    49fe:	d1 04       	cpc	r13, r1
    4a00:	09 f0       	breq	.+2      	; 0x4a04 <_Z17math_CalcControlsv+0x40e>
    4a02:	67 cf       	rjmp	.-306    	; 0x48d2 <_Z17math_CalcControlsv+0x2dc>
        }

        // Применение реверса канала
        out_cur[i] *= CurModel.Mode[FLY_MODE].Control[i].reverse;
    }
}
    4a04:	62 96       	adiw	r28, 0x12	; 18
    4a06:	0f b6       	in	r0, 0x3f	; 63
    4a08:	f8 94       	cli
    4a0a:	de bf       	out	0x3e, r29	; 62
    4a0c:	0f be       	out	0x3f, r0	; 63
    4a0e:	cd bf       	out	0x3d, r28	; 61
    4a10:	df 91       	pop	r29
    4a12:	cf 91       	pop	r28
    4a14:	1f 91       	pop	r17
    4a16:	0f 91       	pop	r16
    4a18:	ff 90       	pop	r15
    4a1a:	ef 90       	pop	r14
    4a1c:	df 90       	pop	r13
    4a1e:	cf 90       	pop	r12
    4a20:	bf 90       	pop	r11
    4a22:	af 90       	pop	r10
    4a24:	9f 90       	pop	r9
    4a26:	8f 90       	pop	r8
    4a28:	7f 90       	pop	r7
    4a2a:	6f 90       	pop	r6
    4a2c:	5f 90       	pop	r5
    4a2e:	4f 90       	pop	r4
    4a30:	3f 90       	pop	r3
    4a32:	2f 90       	pop	r2
    4a34:	08 95       	ret

    //опрос переключателя режимов
    if(MODE_KEY2)
        FLY_MODE = 1;
    if(!MODE_KEY1 && !MODE_KEY2)
        FLY_MODE = 0;
    4a36:	10 92 68 09 	sts	0x0968, r1
    4a3a:	00 ce       	rjmp	.-1024   	; 0x463c <_Z17math_CalcControlsv+0x46>
#else
    // Опрос и установка значения переключателя SW1 (трехрозиционный)
    if(SW1_1)
        input[CTRL_SW1] = (int16_t)TimerClockPerUSec(500); // +0.5 мс
    if(!SW1_1 && !SW1_2)
        input[CTRL_SW1] = 0; // 0 мс
    4a3c:	10 92 03 0d 	sts	0x0D03, r1
    4a40:	10 92 02 0d 	sts	0x0D02, r1
    4a44:	ca ce       	rjmp	.-620    	; 0x47da <_Z17math_CalcControlsv+0x1e4>

00004a46 <_Z4Tonej>:
#include <util/delay.h>

// Включение Buzzer'а с частотой Freq
void Tone(uint16_t Freq)
{
    if(Settings.SoundFlag == OFF)
    4a46:	20 91 80 0c 	lds	r18, 0x0C80
    4a4a:	21 11       	cpse	r18, r1
        return;
    
    hwr_SetTone(Freq);
    4a4c:	0c 94 64 44 	jmp	0x88c8	; 0x88c8 <_Z11hwr_SetTonej>
    4a50:	08 95       	ret

00004a52 <_Z10trim_soundv>:
}

// Включение Buzzer'а при изменении триммеров
void trim_sound()
{
    if(trim_sound_en && (Settings.SoundFlag == ON))
    4a52:	80 91 67 09 	lds	r24, 0x0967
    4a56:	88 23       	and	r24, r24
    4a58:	01 f1       	breq	.+64     	; 0x4a9a <_Z10trim_soundv+0x48>
    4a5a:	80 91 80 0c 	lds	r24, 0x0C80
    4a5e:	81 30       	cpi	r24, 0x01	; 1
    4a60:	e1 f4       	brne	.+56     	; 0x4a9a <_Z10trim_soundv+0x48>
    {
        trim_sound_en = 0;
    4a62:	10 92 67 09 	sts	0x0967, r1
        Tone(1000);
    4a66:	88 ee       	ldi	r24, 0xE8	; 232
    4a68:	93 e0       	ldi	r25, 0x03	; 3
    4a6a:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4a6e:	2f ef       	ldi	r18, 0xFF	; 255
    4a70:	85 ea       	ldi	r24, 0xA5	; 165
    4a72:	9e e0       	ldi	r25, 0x0E	; 14
    4a74:	21 50       	subi	r18, 0x01	; 1
    4a76:	80 40       	sbci	r24, 0x00	; 0
    4a78:	90 40       	sbci	r25, 0x00	; 0
    4a7a:	e1 f7       	brne	.-8      	; 0x4a74 <_Z10trim_soundv+0x22>
    4a7c:	00 c0       	rjmp	.+0      	; 0x4a7e <_Z10trim_soundv+0x2c>
    4a7e:	00 00       	nop
        _delay_ms(300);
        Tone(0);
    4a80:	80 e0       	ldi	r24, 0x00	; 0
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
    4a88:	2f ef       	ldi	r18, 0xFF	; 255
    4a8a:	85 ea       	ldi	r24, 0xA5	; 165
    4a8c:	9e e0       	ldi	r25, 0x0E	; 14
    4a8e:	21 50       	subi	r18, 0x01	; 1
    4a90:	80 40       	sbci	r24, 0x00	; 0
    4a92:	90 40       	sbci	r25, 0x00	; 0
    4a94:	e1 f7       	brne	.-8      	; 0x4a8e <_Z10trim_soundv+0x3c>
    4a96:	00 c0       	rjmp	.+0      	; 0x4a98 <_Z10trim_soundv+0x46>
    4a98:	00 00       	nop
    4a9a:	08 95       	ret

00004a9c <_Z17Recalc_EEPROM_CRCv>:
// Functions
//

void Recalc_EEPROM_CRC()
{
    eeprom_write_word((uint16_t*)EEPROM_CRC, Crc16_eeprom(EEPROM_CRC_START, EEPROM_CRC_SIZE));
    4a9c:	6d ef       	ldi	r22, 0xFD	; 253
    4a9e:	7f e0       	ldi	r23, 0x0F	; 15
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <_Z12Crc16_eepromPhj>
    4aa8:	bc 01       	movw	r22, r24
    4aaa:	8e ef       	ldi	r24, 0xFE	; 254
    4aac:	9f e0       	ldi	r25, 0x0F	; 15
    4aae:	0c 94 2e 4b 	jmp	0x965c	; 0x965c <__eewr_word_m2560>

00004ab2 <_Z21Is_EEPROM_CRC_Correctv>:
{
    return Crc16_eeprom(EEPROM_CRC_START, EEPROM_CRC_SIZE);
}

bool Is_EEPROM_CRC_Correct()
{
    4ab2:	cf 93       	push	r28
    4ab4:	df 93       	push	r29
    return eeprom_read_word((uint16_t*)EEPROM_CRC) == Crc16_eeprom(EEPROM_CRC_START, EEPROM_CRC_SIZE);
    4ab6:	8e ef       	ldi	r24, 0xFE	; 254
    4ab8:	9f e0       	ldi	r25, 0x0F	; 15
    4aba:	0e 94 10 4b 	call	0x9620	; 0x9620 <__eerd_word_m2560>
    4abe:	ec 01       	movw	r28, r24
    4ac0:	6d ef       	ldi	r22, 0xFD	; 253
    4ac2:	7f e0       	ldi	r23, 0x0F	; 15
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <_Z12Crc16_eepromPhj>
    4acc:	21 e0       	ldi	r18, 0x01	; 1
    4ace:	c8 17       	cp	r28, r24
    4ad0:	d9 07       	cpc	r29, r25
    4ad2:	09 f0       	breq	.+2      	; 0x4ad6 <_Z21Is_EEPROM_CRC_Correctv+0x24>
    4ad4:	20 e0       	ldi	r18, 0x00	; 0
}
    4ad6:	82 2f       	mov	r24, r18
    4ad8:	df 91       	pop	r29
    4ada:	cf 91       	pop	r28
    4adc:	08 95       	ret

00004ade <_Z15TX_IsFirstStartv>:

bool TX_IsFirstStart()
{
    return !eeprom_read_byte((uint8_t*)&EEPROM_SETTINGS.FirstStartComplete);
    4ade:	8a ed       	ldi	r24, 0xDA	; 218
    4ae0:	9e e0       	ldi	r25, 0x0E	; 14
    4ae2:	0e 94 08 4b 	call	0x9610	; 0x9610 <__eerd_byte_m2560>
    4ae6:	91 e0       	ldi	r25, 0x01	; 1
    4ae8:	81 11       	cpse	r24, r1
    4aea:	90 e0       	ldi	r25, 0x00	; 0
}
    4aec:	89 2f       	mov	r24, r25
    4aee:	08 95       	ret

00004af0 <_Z15TX_SaveSettingsv>:
    MODEL_Init(Settings.ModelNum);
}

void TX_SaveSettings()
{
    cli();
    4af0:	f8 94       	cli

    uint8_t* PtrSrc = (uint8_t*)(&Settings);
    uint8_t* PtrDst = (uint8_t*)(&EEPROM_SETTINGS);

    eeprom_write_block(PtrSrc, PtrDst, sizeof(TRANSMITTER_SETTINGS));
    4af2:	41 e4       	ldi	r20, 0x41	; 65
    4af4:	50 e0       	ldi	r21, 0x00	; 0
    4af6:	68 ed       	ldi	r22, 0xD8	; 216
    4af8:	7e e0       	ldi	r23, 0x0E	; 14
    4afa:	8d e7       	ldi	r24, 0x7D	; 125
    4afc:	9c e0       	ldi	r25, 0x0C	; 12
    4afe:	0e 94 16 4b 	call	0x962c	; 0x962c <__eewr_block_m2560>

    Recalc_EEPROM_CRC();
    4b02:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <_Z17Recalc_EEPROM_CRCv>

    sei();
    4b06:	78 94       	sei
    4b08:	08 95       	ret

00004b0a <_Z10MODEL_Inita>:
}

void MODEL_Init(int8_t ModelNum)
{
    cli();
    4b0a:	f8 94       	cli

    uint8_t* PtrDst = (uint8_t*)(&CurModel);
    uint8_t* PtrSrc = (uint8_t*)(&EEPROM_MODEL[ModelNum]);
    4b0c:	28 ef       	ldi	r18, 0xF8	; 248
    4b0e:	32 e0       	ldi	r19, 0x02	; 2
    4b10:	48 2f       	mov	r20, r24
    4b12:	42 03       	mulsu	r20, r18
    4b14:	b0 01       	movw	r22, r0
    4b16:	43 9f       	mul	r20, r19
    4b18:	70 0d       	add	r23, r0
    4b1a:	11 24       	eor	r1, r1
    4b1c:	60 50       	subi	r22, 0x00	; 0
    4b1e:	70 40       	sbci	r23, 0x00	; 0

    eeprom_read_block(PtrDst, PtrSrc, sizeof(MODEL_SETTINGS));
    4b20:	48 ef       	ldi	r20, 0xF8	; 248
    4b22:	52 e0       	ldi	r21, 0x02	; 2
    4b24:	85 e8       	ldi	r24, 0x85	; 133
    4b26:	99 e0       	ldi	r25, 0x09	; 9
    4b28:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__eerd_block_m2560>

    hwr_SetModulation(CurModel.modulation);
    4b2c:	80 91 95 09 	lds	r24, 0x0995
    4b30:	90 91 96 09 	lds	r25, 0x0996
    4b34:	0e 94 29 44 	call	0x8852	; 0x8852 <_Z17hwr_SetModulation10Modulation>
    Timer_Init();
    4b38:	0e 94 04 2b 	call	0x5608	; 0x5608 <_Z10Timer_Initv>

    sei();
    4b3c:	78 94       	sei
    4b3e:	08 95       	ret

00004b40 <_Z7TX_Initv>:
void TX_Init()
{
    uint8_t* PtrDst = (uint8_t*)(&Settings);
    uint8_t* PtrSrc = (uint8_t*)(&EEPROM_SETTINGS);

    eeprom_read_block(PtrDst, PtrSrc, sizeof(TRANSMITTER_SETTINGS));
    4b40:	41 e4       	ldi	r20, 0x41	; 65
    4b42:	50 e0       	ldi	r21, 0x00	; 0
    4b44:	68 ed       	ldi	r22, 0xD8	; 216
    4b46:	7e e0       	ldi	r23, 0x0E	; 14
    4b48:	8d e7       	ldi	r24, 0x7D	; 125
    4b4a:	9c e0       	ldi	r25, 0x0C	; 12
    4b4c:	0e 94 f8 4a 	call	0x95f0	; 0x95f0 <__eerd_block_m2560>

    MODEL_Init(Settings.ModelNum);
    4b50:	80 91 81 0c 	lds	r24, 0x0C81
    4b54:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <_Z10MODEL_Inita>

00004b58 <_Z19MODEL_Save_Trimmersv>:

    sei();
}

void MODEL_Save_Trimmers()
{
    4b58:	9f 92       	push	r9
    4b5a:	af 92       	push	r10
    4b5c:	bf 92       	push	r11
    4b5e:	cf 92       	push	r12
    4b60:	df 92       	push	r13
    4b62:	ef 92       	push	r14
    4b64:	ff 92       	push	r15
    4b66:	0f 93       	push	r16
    4b68:	1f 93       	push	r17
    4b6a:	cf 93       	push	r28
    4b6c:	df 93       	push	r29
    4b6e:	85 e8       	ldi	r24, 0x85	; 133
    4b70:	e8 2e       	mov	r14, r24
    4b72:	89 e0       	ldi	r24, 0x09	; 9
    4b74:	f8 2e       	mov	r15, r24
    4b76:	00 e0       	ldi	r16, 0x00	; 0
    4b78:	10 e0       	ldi	r17, 0x00	; 0
    for(int8_t i = 0; i < MAX_MODES; ++i)
        for(int8_t j = 0; j < MAX_TRIMMERS; ++j)
            eeprom_write_byte((uint8_t*)&EEPROM_MODEL[Settings.ModelNum].Mode[i].trimmers[j], CurModel.Mode[i].trimmers[j]);
    4b7a:	96 ef       	ldi	r25, 0xF6	; 246
    4b7c:	99 2e       	mov	r9, r25
    4b7e:	28 ef       	ldi	r18, 0xF8	; 248
    4b80:	a2 2e       	mov	r10, r18
    4b82:	22 e0       	ldi	r18, 0x02	; 2
    4b84:	b2 2e       	mov	r11, r18

    sei();
}

void MODEL_Save_Trimmers()
{
    4b86:	c0 e0       	ldi	r28, 0x00	; 0
    4b88:	d0 e0       	ldi	r29, 0x00	; 0
    for(int8_t i = 0; i < MAX_MODES; ++i)
        for(int8_t j = 0; j < MAX_TRIMMERS; ++j)
            eeprom_write_byte((uint8_t*)&EEPROM_MODEL[Settings.ModelNum].Mode[i].trimmers[j], CurModel.Mode[i].trimmers[j]);
    4b8a:	90 9e       	mul	r9, r16
    4b8c:	60 01       	movw	r12, r0
    4b8e:	91 9e       	mul	r9, r17
    4b90:	d0 0c       	add	r13, r0
    4b92:	11 24       	eor	r1, r1
    4b94:	f7 01       	movw	r30, r14
    4b96:	ec 0f       	add	r30, r28
    4b98:	fd 1f       	adc	r31, r29
    4b9a:	e8 5f       	subi	r30, 0xF8	; 248
    4b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    4b9e:	ce 01       	movw	r24, r28
    4ba0:	8c 0d       	add	r24, r12
    4ba2:	9d 1d       	adc	r25, r13
    4ba4:	40 91 81 0c 	lds	r20, 0x0C81
    4ba8:	b5 01       	movw	r22, r10
    4baa:	46 03       	mulsu	r20, r22
    4bac:	90 01       	movw	r18, r0
    4bae:	47 9f       	mul	r20, r23
    4bb0:	30 0d       	add	r19, r0
    4bb2:	11 24       	eor	r1, r1
    4bb4:	82 0f       	add	r24, r18
    4bb6:	93 1f       	adc	r25, r19
    4bb8:	60 81       	ld	r22, Z
    4bba:	88 5f       	subi	r24, 0xF8	; 248
    4bbc:	9e 4f       	sbci	r25, 0xFE	; 254
    4bbe:	0e 94 20 4b 	call	0x9640	; 0x9640 <__eewr_byte_m2560>
    4bc2:	21 96       	adiw	r28, 0x01	; 1
}

void MODEL_Save_Trimmers()
{
    for(int8_t i = 0; i < MAX_MODES; ++i)
        for(int8_t j = 0; j < MAX_TRIMMERS; ++j)
    4bc4:	c4 30       	cpi	r28, 0x04	; 4
    4bc6:	d1 05       	cpc	r29, r1
    4bc8:	29 f7       	brne	.-54     	; 0x4b94 <_Z19MODEL_Save_Trimmersv+0x3c>
    4bca:	0f 5f       	subi	r16, 0xFF	; 255
    4bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bce:	76 ef       	ldi	r23, 0xF6	; 246
    4bd0:	e7 0e       	add	r14, r23
    4bd2:	f1 1c       	adc	r15, r1
    sei();
}

void MODEL_Save_Trimmers()
{
    for(int8_t i = 0; i < MAX_MODES; ++i)
    4bd4:	03 30       	cpi	r16, 0x03	; 3
    4bd6:	11 05       	cpc	r17, r1
    4bd8:	b1 f6       	brne	.-84     	; 0x4b86 <_Z19MODEL_Save_Trimmersv+0x2e>
        for(int8_t j = 0; j < MAX_TRIMMERS; ++j)
            eeprom_write_byte((uint8_t*)&EEPROM_MODEL[Settings.ModelNum].Mode[i].trimmers[j], CurModel.Mode[i].trimmers[j]);

    Recalc_EEPROM_CRC();
}
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	1f 91       	pop	r17
    4be0:	0f 91       	pop	r16
    4be2:	ff 90       	pop	r15
    4be4:	ef 90       	pop	r14
    4be6:	df 90       	pop	r13
    4be8:	cf 90       	pop	r12
    4bea:	bf 90       	pop	r11
    4bec:	af 90       	pop	r10
    4bee:	9f 90       	pop	r9
{
    for(int8_t i = 0; i < MAX_MODES; ++i)
        for(int8_t j = 0; j < MAX_TRIMMERS; ++j)
            eeprom_write_byte((uint8_t*)&EEPROM_MODEL[Settings.ModelNum].Mode[i].trimmers[j], CurModel.Mode[i].trimmers[j]);

    Recalc_EEPROM_CRC();
    4bf0:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <_Z17Recalc_EEPROM_CRCv>

00004bf4 <_Z10MODEL_Savea>:
}


void MODEL_Save(int8_t To)
{
    cli();
    4bf4:	f8 94       	cli

    uint8_t* PtrSrc = (uint8_t*)(&CurModel);
    uint8_t* PtrDst = (uint8_t*)(&EEPROM_MODEL[To]);
    4bf6:	28 ef       	ldi	r18, 0xF8	; 248
    4bf8:	32 e0       	ldi	r19, 0x02	; 2
    4bfa:	48 2f       	mov	r20, r24
    4bfc:	42 03       	mulsu	r20, r18
    4bfe:	b0 01       	movw	r22, r0
    4c00:	43 9f       	mul	r20, r19
    4c02:	70 0d       	add	r23, r0
    4c04:	11 24       	eor	r1, r1
    4c06:	60 50       	subi	r22, 0x00	; 0
    4c08:	70 40       	sbci	r23, 0x00	; 0

    eeprom_write_block(PtrSrc, PtrDst, sizeof(MODEL_SETTINGS));
    4c0a:	48 ef       	ldi	r20, 0xF8	; 248
    4c0c:	52 e0       	ldi	r21, 0x02	; 2
    4c0e:	85 e8       	ldi	r24, 0x85	; 133
    4c10:	99 e0       	ldi	r25, 0x09	; 9
    4c12:	0e 94 16 4b 	call	0x962c	; 0x962c <__eewr_block_m2560>
    
    Recalc_EEPROM_CRC();
    4c16:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <_Z17Recalc_EEPROM_CRCv>

    sei();
    4c1a:	78 94       	sei
    4c1c:	08 95       	ret

00004c1e <_Z10MODEL_Copyaa>:
}

void MODEL_Copy(int8_t From, int8_t To)
{
    4c1e:	48 2f       	mov	r20, r24
    cli();
    4c20:	f8 94       	cli

    uint8_t* PtrFrom = (uint8_t*)(&EEPROM_MODEL[From]);
    4c22:	28 ef       	ldi	r18, 0xF8	; 248
    4c24:	32 e0       	ldi	r19, 0x02	; 2
    4c26:	42 03       	mulsu	r20, r18
    4c28:	c0 01       	movw	r24, r0
    4c2a:	43 9f       	mul	r20, r19
    4c2c:	90 0d       	add	r25, r0
    4c2e:	11 24       	eor	r1, r1
    4c30:	80 50       	subi	r24, 0x00	; 0
    4c32:	90 40       	sbci	r25, 0x00	; 0
    uint8_t* PtrTo   = (uint8_t*)(&EEPROM_MODEL[To]);
    4c34:	62 03       	mulsu	r22, r18
    4c36:	e0 01       	movw	r28, r0
    4c38:	63 9f       	mul	r22, r19
    4c3a:	d0 0d       	add	r29, r0
    4c3c:	11 24       	eor	r1, r1
    4c3e:	c0 50       	subi	r28, 0x00	; 0
    4c40:	d0 40       	sbci	r29, 0x00	; 0

    for(uint8_t i = 0; i < sizeof(MODEL_SETTINGS); ++i)
        eeprom_write_byte(PtrTo++, eeprom_read_byte(PtrFrom++));
    4c42:	8c 01       	movw	r16, r24
    4c44:	0f 5f       	subi	r16, 0xFF	; 255
    4c46:	1f 4f       	sbci	r17, 0xFF	; 255
    4c48:	0e 94 08 4b 	call	0x9610	; 0x9610 <__eerd_byte_m2560>
    4c4c:	7e 01       	movw	r14, r28
    4c4e:	9f ef       	ldi	r25, 0xFF	; 255
    4c50:	e9 1a       	sub	r14, r25
    4c52:	f9 0a       	sbc	r15, r25
    4c54:	68 2f       	mov	r22, r24
    4c56:	ce 01       	movw	r24, r28
    4c58:	0e 94 20 4b 	call	0x9640	; 0x9640 <__eewr_byte_m2560>
    4c5c:	e7 01       	movw	r28, r14
    4c5e:	c8 01       	movw	r24, r16
    4c60:	f0 cf       	rjmp	.-32     	; 0x4c42 <_Z10MODEL_Copyaa+0x24>

00004c62 <_Z11MODEL_Reseta>:

    sei();
}

void MODEL_Reset(int8_t ModelNum)
{
    4c62:	2f 92       	push	r2
    4c64:	3f 92       	push	r3
    4c66:	4f 92       	push	r4
    4c68:	5f 92       	push	r5
    4c6a:	6f 92       	push	r6
    4c6c:	7f 92       	push	r7
    4c6e:	8f 92       	push	r8
    4c70:	9f 92       	push	r9
    4c72:	af 92       	push	r10
    4c74:	bf 92       	push	r11
    4c76:	cf 92       	push	r12
    4c78:	df 92       	push	r13
    4c7a:	ef 92       	push	r14
    4c7c:	ff 92       	push	r15
    4c7e:	0f 93       	push	r16
    4c80:	1f 93       	push	r17
    4c82:	cf 93       	push	r28
    4c84:	df 93       	push	r29
    4c86:	cd b7       	in	r28, 0x3d	; 61
    4c88:	de b7       	in	r29, 0x3e	; 62
    4c8a:	c4 50       	subi	r28, 0x04	; 4
    4c8c:	d3 40       	sbci	r29, 0x03	; 3
    4c8e:	0f b6       	in	r0, 0x3f	; 63
    4c90:	f8 94       	cli
    4c92:	de bf       	out	0x3e, r29	; 62
    4c94:	0f be       	out	0x3f, r0	; 63
    4c96:	cd bf       	out	0x3d, r28	; 61
    4c98:	68 2e       	mov	r6, r24
    4c9a:	9e 01       	movw	r18, r28
    4c9c:	2f 5f       	subi	r18, 0xFF	; 255
    4c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4ca0:	88 e8       	ldi	r24, 0x88	; 136
    4ca2:	94 e0       	ldi	r25, 0x04	; 4
    4ca4:	cd 5f       	subi	r28, 0xFD	; 253
    4ca6:	dc 4f       	sbci	r29, 0xFC	; 252
    4ca8:	99 83       	std	Y+1, r25	; 0x01
    4caa:	88 83       	st	Y, r24
    4cac:	c3 50       	subi	r28, 0x03	; 3
    4cae:	d3 40       	sbci	r29, 0x03	; 3
    4cb0:	00 e0       	ldi	r16, 0x00	; 0
    4cb2:	10 e0       	ldi	r17, 0x00	; 0
    4cb4:	69 01       	movw	r12, r18
        {
            // Устанавливаем 1 - нет реверса
            Model.Mode[MOD].Control[CTRL].reverse = 1;

            // Устанавливаем расходы
            Model.Mode[MOD].Control[CTRL].maxRates = (CTRL == CTRL_THR) ? 100 : 50; // EPA val in 2% unit
    4cb6:	44 e6       	ldi	r20, 0x64	; 100
    4cb8:	74 2e       	mov	r7, r20
            Model.Mode[MOD].Control[CTRL].minDRates = 100;

            // Устанавливаем кривую
            for(uint8_t i = 0; i < CURVE_NODES; ++i)
            {
                Model.Mode[MOD].Control[CTRL].nodes[i] = (200 * (int)i) / (CURVE_NODES - 1) - 100;
    4cba:	56 e0       	ldi	r21, 0x06	; 6
    4cbc:	25 2e       	mov	r2, r21
    4cbe:	31 2c       	mov	r3, r1

    sei();
}

void MODEL_Reset(int8_t ModelNum)
{
    4cc0:	f9 01       	movw	r30, r18
    4cc2:	b6 96       	adiw	r30, 0x26	; 38
    4cc4:	40 e0       	ldi	r20, 0x00	; 0
    4cc6:	df 01       	movw	r26, r30
    4cc8:	15 97       	sbiw	r26, 0x05	; 5
    for(uint8_t MOD = 0; MOD < MAX_MODES; ++MOD)
    {
        for(uint8_t CTRL = 0; CTRL < MAX_CONTROLS; ++CTRL)
        {
            // Устанавливаем 1 - нет реверса
            Model.Mode[MOD].Control[CTRL].reverse = 1;
    4cca:	91 e0       	ldi	r25, 0x01	; 1
    4ccc:	9c 93       	st	X, r25

            // Устанавливаем расходы
            Model.Mode[MOD].Control[CTRL].maxRates = (CTRL == CTRL_THR) ? 100 : 50; // EPA val in 2% unit
    4cce:	42 30       	cpi	r20, 0x02	; 2
    4cd0:	11 f4       	brne	.+4      	; 0x4cd6 <_Z11MODEL_Reseta+0x74>
    4cd2:	84 e6       	ldi	r24, 0x64	; 100
    4cd4:	01 c0       	rjmp	.+2      	; 0x4cd8 <_Z11MODEL_Reseta+0x76>
    4cd6:	82 e3       	ldi	r24, 0x32	; 50
    4cd8:	df 01       	movw	r26, r30
    4cda:	14 97       	sbiw	r26, 0x04	; 4
    4cdc:	8c 93       	st	X, r24
            Model.Mode[MOD].Control[CTRL].minRates = (CTRL == CTRL_THR) ? 100 : 50;
    4cde:	42 30       	cpi	r20, 0x02	; 2
    4ce0:	11 f4       	brne	.+4      	; 0x4ce6 <_Z11MODEL_Reseta+0x84>
    4ce2:	84 e6       	ldi	r24, 0x64	; 100
    4ce4:	01 c0       	rjmp	.+2      	; 0x4ce8 <_Z11MODEL_Reseta+0x86>
    4ce6:	82 e3       	ldi	r24, 0x32	; 50
    4ce8:	df 01       	movw	r26, r30
    4cea:	13 97       	sbiw	r26, 0x03	; 3
    4cec:	8c 93       	st	X, r24
    4cee:	df 01       	movw	r26, r30
    4cf0:	12 97       	sbiw	r26, 0x02	; 2

            // Устанавливаем двойные расходы
            Model.Mode[MOD].Control[CTRL].maxDRates = 100; // EPA val in 2% unit
    4cf2:	7c 92       	st	X, r7
    4cf4:	df 01       	movw	r26, r30
    4cf6:	11 97       	sbiw	r26, 0x01	; 1
            Model.Mode[MOD].Control[CTRL].minDRates = 100;
    4cf8:	7c 92       	st	X, r7
    4cfa:	81 2c       	mov	r8, r1
    4cfc:	91 2c       	mov	r9, r1
    4cfe:	e1 2c       	mov	r14, r1
    4d00:	f1 2c       	mov	r15, r1
    4d02:	5f 01       	movw	r10, r30
    4d04:	a6 e2       	ldi	r26, 0x26	; 38
    4d06:	aa 1a       	sub	r10, r26
    4d08:	b1 08       	sbc	r11, r1
    4d0a:	25 01       	movw	r4, r10
    4d0c:	4e 0c       	add	r4, r14
    4d0e:	5f 1c       	adc	r5, r15

            // Устанавливаем кривую
            for(uint8_t i = 0; i < CURVE_NODES; ++i)
            {
                Model.Mode[MOD].Control[CTRL].nodes[i] = (200 * (int)i) / (CURVE_NODES - 1) - 100;
    4d10:	c4 01       	movw	r24, r8
    4d12:	b1 01       	movw	r22, r2
    4d14:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    4d18:	64 56       	subi	r22, 0x64	; 100
    4d1a:	d2 01       	movw	r26, r4
    4d1c:	97 96       	adiw	r26, 0x27	; 39
    4d1e:	6c 93       	st	X, r22
    4d20:	bf ef       	ldi	r27, 0xFF	; 255
    4d22:	eb 1a       	sub	r14, r27
    4d24:	fb 0a       	sbc	r15, r27
    4d26:	88 ec       	ldi	r24, 0xC8	; 200
    4d28:	88 0e       	add	r8, r24
    4d2a:	91 1c       	adc	r9, r1
            // Устанавливаем двойные расходы
            Model.Mode[MOD].Control[CTRL].maxDRates = 100; // EPA val in 2% unit
            Model.Mode[MOD].Control[CTRL].minDRates = 100;

            // Устанавливаем кривую
            for(uint8_t i = 0; i < CURVE_NODES; ++i)
    4d2c:	97 e0       	ldi	r25, 0x07	; 7
    4d2e:	e9 16       	cp	r14, r25
    4d30:	f1 04       	cpc	r15, r1
    4d32:	59 f7       	brne	.-42     	; 0x4d0a <_Z11MODEL_Reseta+0xa8>
            {
                Model.Mode[MOD].Control[CTRL].nodes[i] = (200 * (int)i) / (CURVE_NODES - 1) - 100;
            }

            // Устанавливаем источник каналов(для виртуальных)
            Model.Mode[MOD].Control[CTRL].from = CTRL;
    4d34:	40 83       	st	Z, r20

    MODEL_SETTINGS Model;

    for(uint8_t MOD = 0; MOD < MAX_MODES; ++MOD)
    {
        for(uint8_t CTRL = 0; CTRL < MAX_CONTROLS; ++CTRL)
    4d36:	4f 5f       	subi	r20, 0xFF	; 255
    4d38:	3d 96       	adiw	r30, 0x0d	; 13
    4d3a:	4b 30       	cpi	r20, 0x0B	; 11
    4d3c:	21 f6       	brne	.-120    	; 0x4cc6 <_Z11MODEL_Reseta+0x64>
    4d3e:	40 e0       	ldi	r20, 0x00	; 0
    4d40:	50 e0       	ldi	r21, 0x00	; 0
            Model.Mode[MOD].Control[CTRL].maxRates = (CTRL == CTRL_THR) ? 100 : 50; // EPA val in 2% unit
            Model.Mode[MOD].Control[CTRL].minRates = (CTRL == CTRL_THR) ? 100 : 50;

            // Устанавливаем двойные расходы
            Model.Mode[MOD].Control[CTRL].maxDRates = 100; // EPA val in 2% unit
            Model.Mode[MOD].Control[CTRL].minDRates = 100;
    4d42:	80 e0       	ldi	r24, 0x00	; 0
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	ba 01       	movw	r22, r20
    4d48:	62 0f       	add	r22, r18
    4d4a:	73 1f       	adc	r23, r19
    4d4c:	fb 01       	movw	r30, r22
    4d4e:	e8 0f       	add	r30, r24
    4d50:	f9 1f       	adc	r31, r25
    4d52:	e0 55       	subi	r30, 0x50	; 80
    4d54:	ff 4f       	sbci	r31, 0xFF	; 255
        }

        // Нулим микшер
        for(uint8_t CH = 0; CH < MAX_CHANNELS; ++CH)
            for(uint8_t CTRL = 0; CTRL < MAX_CONTROLS; ++CTRL)
                Model.Mode[MOD].Chanels[CH][CTRL] = 0;
    4d56:	10 82       	st	Z, r1
    4d58:	01 96       	adiw	r24, 0x01	; 1
            Model.Mode[MOD].Control[CTRL].from = CTRL;
        }

        // Нулим микшер
        for(uint8_t CH = 0; CH < MAX_CHANNELS; ++CH)
            for(uint8_t CTRL = 0; CTRL < MAX_CONTROLS; ++CTRL)
    4d5a:	8b 30       	cpi	r24, 0x0B	; 11
    4d5c:	91 05       	cpc	r25, r1
    4d5e:	b1 f7       	brne	.-20     	; 0x4d4c <_Z11MODEL_Reseta+0xea>
    4d60:	45 5f       	subi	r20, 0xF5	; 245
    4d62:	5f 4f       	sbci	r21, 0xFF	; 255
            // Устанавливаем источник каналов(для виртуальных)
            Model.Mode[MOD].Control[CTRL].from = CTRL;
        }

        // Нулим микшер
        for(uint8_t CH = 0; CH < MAX_CHANNELS; ++CH)
    4d64:	48 35       	cpi	r20, 0x58	; 88
    4d66:	51 05       	cpc	r21, r1
    4d68:	61 f7       	brne	.-40     	; 0x4d42 <_Z11MODEL_Reseta+0xe0>
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	f9 01       	movw	r30, r18
    4d70:	e8 0f       	add	r30, r24
    4d72:	f9 1f       	adc	r31, r25
    4d74:	e0 55       	subi	r30, 0x50	; 80
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
            for(uint8_t CTRL = 0; CTRL < MAX_CONTROLS; ++CTRL)
                Model.Mode[MOD].Chanels[CH][CTRL] = 0;

        // Устанавливаем микшер по умолчанию
        for(uint8_t CH = 0; CH < MAX_CHANNELS; ++CH)
            Model.Mode[MOD].Chanels[CH][CH] = 100;
    4d78:	70 82       	st	Z, r7
    4d7a:	0c 96       	adiw	r24, 0x0c	; 12
        for(uint8_t CH = 0; CH < MAX_CHANNELS; ++CH)
            for(uint8_t CTRL = 0; CTRL < MAX_CONTROLS; ++CTRL)
                Model.Mode[MOD].Chanels[CH][CTRL] = 0;

        // Устанавливаем микшер по умолчанию
        for(uint8_t CH = 0; CH < MAX_CHANNELS; ++CH)
    4d7c:	80 36       	cpi	r24, 0x60	; 96
    4d7e:	91 05       	cpc	r25, r1
    4d80:	b1 f7       	brne	.-20     	; 0x4d6e <_Z11MODEL_Reseta+0x10c>
    4d82:	f9 01       	movw	r30, r18
    4d84:	e8 5f       	subi	r30, 0xF8	; 248
    4d86:	fe 4f       	sbci	r31, 0xFE	; 254
            Model.Mode[MOD].Chanels[CH][CH] = 100;

        // Нулим тримерры
        for(uint8_t i = 0; i < 4; ++i)
            Model.Mode[MOD].trimmers[i] = 0;
    4d88:	10 82       	st	Z, r1
    4d8a:	f9 01       	movw	r30, r18
    4d8c:	e7 5f       	subi	r30, 0xF7	; 247
    4d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d90:	10 82       	st	Z, r1
    4d92:	f9 01       	movw	r30, r18
    4d94:	e6 5f       	subi	r30, 0xF6	; 246
    4d96:	fe 4f       	sbci	r31, 0xFE	; 254
    4d98:	10 82       	st	Z, r1
    4d9a:	f9 01       	movw	r30, r18
    4d9c:	e5 5f       	subi	r30, 0xF5	; 245
    4d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4da0:	10 82       	st	Z, r1
    4da2:	cd 5f       	subi	r28, 0xFD	; 253
    4da4:	dc 4f       	sbci	r29, 0xFC	; 252
    4da6:	a8 81       	ld	r26, Y
    4da8:	b9 81       	ldd	r27, Y+1	; 0x01
    4daa:	c3 50       	subi	r28, 0x03	; 3
    4dac:	d3 40       	sbci	r29, 0x03	; 3
    4dae:	ed 91       	ld	r30, X+
    4db0:	fd 91       	ld	r31, X+
    4db2:	cd 5f       	subi	r28, 0xFD	; 253
    4db4:	dc 4f       	sbci	r29, 0xFC	; 252
    4db6:	b9 83       	std	Y+1, r27	; 0x01
    4db8:	a8 83       	st	Y, r26
    4dba:	c3 50       	subi	r28, 0x03	; 3
    4dbc:	d3 40       	sbci	r29, 0x03	; 3
        // Задаем название полётного режима
        {
            uint8_t i = 0;
            for(; i < MODE_NAME_LEN; ++i)
            {
                Model.Mode[MOD].name[i] = DefModeNames[MOD][i];
    4dbe:	40 e0       	ldi	r20, 0x00	; 0
    4dc0:	50 e0       	ldi	r21, 0x00	; 0
    4dc2:	64 2f       	mov	r22, r20
    4dc4:	7f 01       	movw	r14, r30
    4dc6:	71 91       	ld	r23, Z+
    4dc8:	c9 01       	movw	r24, r18
    4dca:	84 0f       	add	r24, r20
    4dcc:	95 1f       	adc	r25, r21
    4dce:	dc 01       	movw	r26, r24
    4dd0:	56 96       	adiw	r26, 0x16	; 22
    4dd2:	7c 93       	st	X, r23
                if(DefModeNames[MOD][i] == 0)
    4dd4:	d7 01       	movw	r26, r14
    4dd6:	8c 91       	ld	r24, X
    4dd8:	88 23       	and	r24, r24
    4dda:	31 f0       	breq	.+12     	; 0x4de8 <_Z11MODEL_Reseta+0x186>
    4ddc:	4f 5f       	subi	r20, 0xFF	; 255
    4dde:	5f 4f       	sbci	r21, 0xFF	; 255
            Model.Mode[MOD].trimmers[i] = 0;

        // Задаем название полётного режима
        {
            uint8_t i = 0;
            for(; i < MODE_NAME_LEN; ++i)
    4de0:	4b 30       	cpi	r20, 0x0B	; 11
    4de2:	51 05       	cpc	r21, r1
    4de4:	71 f7       	brne	.-36     	; 0x4dc2 <_Z11MODEL_Reseta+0x160>
    4de6:	6b e0       	ldi	r22, 0x0B	; 11
                    break;
            }
            
            // Заполняем оставшееся место имени полётного режима нулями
            for(; i < MODE_NAME_LEN; ++i)
                Model.Mode[MOD].name[i] = 0;
    4de8:	b6 ef       	ldi	r27, 0xF6	; 246
    4dea:	b0 9f       	mul	r27, r16
    4dec:	c0 01       	movw	r24, r0
    4dee:	b1 9f       	mul	r27, r17
    4df0:	90 0d       	add	r25, r0
    4df2:	11 24       	eor	r1, r1
    4df4:	8c 0d       	add	r24, r12
    4df6:	9d 1d       	adc	r25, r13
                if(DefModeNames[MOD][i] == 0)
                    break;
            }
            
            // Заполняем оставшееся место имени полётного режима нулями
            for(; i < MODE_NAME_LEN; ++i)
    4df8:	6b 30       	cpi	r22, 0x0B	; 11
    4dfa:	30 f4       	brcc	.+12     	; 0x4e08 <_Z11MODEL_Reseta+0x1a6>
                Model.Mode[MOD].name[i] = 0;
    4dfc:	fc 01       	movw	r30, r24
    4dfe:	e6 0f       	add	r30, r22
    4e00:	f1 1d       	adc	r31, r1
    4e02:	16 8a       	std	Z+22, r1	; 0x16
                if(DefModeNames[MOD][i] == 0)
                    break;
            }
            
            // Заполняем оставшееся место имени полётного режима нулями
            for(; i < MODE_NAME_LEN; ++i)
    4e04:	6f 5f       	subi	r22, 0xFF	; 255
    4e06:	f8 cf       	rjmp	.-16     	; 0x4df8 <_Z11MODEL_Reseta+0x196>
    4e08:	0f 5f       	subi	r16, 0xFF	; 255
    4e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e0c:	2a 50       	subi	r18, 0x0A	; 10
    4e0e:	3f 4f       	sbci	r19, 0xFF	; 255

    uint8_t MOD, CH, CTRL;

    MODEL_SETTINGS Model;

    for(uint8_t MOD = 0; MOD < MAX_MODES; ++MOD)
    4e10:	03 30       	cpi	r16, 0x03	; 3
    4e12:	11 05       	cpc	r17, r1
    4e14:	09 f0       	breq	.+2      	; 0x4e18 <_Z11MODEL_Reseta+0x1b6>
    4e16:	54 cf       	rjmp	.-344    	; 0x4cc0 <_Z11MODEL_Reseta+0x5e>
        }
    }

    // Устанавливаем имя
    char str[10];
    sprintf(str, "Model %d", ModelNum + 1);
    4e18:	77 24       	eor	r7, r7
    4e1a:	67 fc       	sbrc	r6, 7
    4e1c:	70 94       	com	r7
    4e1e:	c3 01       	movw	r24, r6
    4e20:	01 96       	adiw	r24, 0x01	; 1
    4e22:	9f 93       	push	r25
    4e24:	8f 93       	push	r24
    4e26:	8c ea       	ldi	r24, 0xAC	; 172
    4e28:	96 e0       	ldi	r25, 0x06	; 6
    4e2a:	9f 93       	push	r25
    4e2c:	8f 93       	push	r24
    4e2e:	8e 01       	movw	r16, r28
    4e30:	07 50       	subi	r16, 0x07	; 7
    4e32:	1d 4f       	sbci	r17, 0xFD	; 253
    4e34:	1f 93       	push	r17
    4e36:	0f 93       	push	r16
    4e38:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    uint8_t len = uint8_t(strlen(str));
    4e3c:	f8 01       	movw	r30, r16
    4e3e:	01 90       	ld	r0, Z+
    4e40:	00 20       	and	r0, r0
    4e42:	e9 f7       	brne	.-6      	; 0x4e3e <_Z11MODEL_Reseta+0x1dc>
    4e44:	31 97       	sbiw	r30, 0x01	; 1
    4e46:	e0 1b       	sub	r30, r16
    4e48:	f1 0b       	sbc	r31, r17
    if(len > ARRAY_SIZE(Model.name) - 1) //DEBUG TODO, WTF???
    4e4a:	0f 90       	pop	r0
    4e4c:	0f 90       	pop	r0
    4e4e:	0f 90       	pop	r0
    4e50:	0f 90       	pop	r0
    4e52:	0f 90       	pop	r0
    4e54:	0f 90       	pop	r0
    4e56:	ed 30       	cpi	r30, 0x0D	; 13
    4e58:	10 f4       	brcc	.+4      	; 0x4e5e <_Z11MODEL_Reseta+0x1fc>
    }

    // Устанавливаем имя
    char str[10];
    sprintf(str, "Model %d", ModelNum + 1);
    uint8_t len = uint8_t(strlen(str));
    4e5a:	2e 2f       	mov	r18, r30
    4e5c:	01 c0       	rjmp	.+2      	; 0x4e60 <_Z11MODEL_Reseta+0x1fe>
    if(len > ARRAY_SIZE(Model.name) - 1) //DEBUG TODO, WTF???
        len = ARRAY_SIZE(Model.name) - 1;
    4e5e:	2c e0       	ldi	r18, 0x0C	; 12
    4e60:	fe 01       	movw	r30, r28
    4e62:	33 96       	adiw	r30, 0x03	; 3

    {
        uint8_t i = 0;
        for(; i < len; ++i)
    4e64:	d8 01       	movw	r26, r16
    4e66:	cf 01       	movw	r24, r30
    4e68:	3a 2f       	mov	r19, r26
    4e6a:	30 1b       	sub	r19, r16
    4e6c:	32 17       	cp	r19, r18
    4e6e:	18 f4       	brcc	.+6      	; 0x4e76 <_Z11MODEL_Reseta+0x214>
            Model.name[i] = str[i];
    4e70:	3d 91       	ld	r19, X+
    4e72:	31 93       	st	Z+, r19
    4e74:	f9 cf       	rjmp	.-14     	; 0x4e68 <_Z11MODEL_Reseta+0x206>
        for(; i < ARRAY_SIZE(Model.name); ++i)
            Model.name[i] = 0;
    4e76:	dc 01       	movw	r26, r24
    4e78:	a2 0f       	add	r26, r18
    4e7a:	b1 1d       	adc	r27, r1
    4e7c:	1c 92       	st	X, r1

    {
        uint8_t i = 0;
        for(; i < len; ++i)
            Model.name[i] = str[i];
        for(; i < ARRAY_SIZE(Model.name); ++i)
    4e7e:	2f 5f       	subi	r18, 0xFF	; 255
    4e80:	2d 30       	cpi	r18, 0x0D	; 13
    4e82:	c8 f3       	brcs	.-14     	; 0x4e76 <_Z11MODEL_Reseta+0x214>
            Model.name[i] = 0;
    }

    // Устанавливаем тип модуляции
    Model.modulation = DEFAULT_MODULATION;
    4e84:	81 e0       	ldi	r24, 0x01	; 1
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	9a 8b       	std	Y+18, r25	; 0x12
    4e8a:	89 8b       	std	Y+17, r24	; 0x11

    // Устанавливаем тип модели
    Model.type = TYPE_PLANE;
    4e8c:	18 8a       	std	Y+16, r1	; 0x10

    // Устанавливаем настройки таймера
    Model.timer = 0;
    4e8e:	1c 8a       	std	Y+20, r1	; 0x14
    4e90:	1b 8a       	std	Y+19, r1	; 0x13
    Model.timer_mode = 0;
    4e92:	1d 8a       	std	Y+21, r1	; 0x15

    // Устанавливаем количество каналов
    Model.num_ch = 6;
    4e94:	86 e0       	ldi	r24, 0x06	; 6
    4e96:	8e 8b       	std	Y+22, r24	; 0x16

    // Устанавливаем размер структуры
    Model.size = sizeof(Model);
    4e98:	88 ef       	ldi	r24, 0xF8	; 248
    4e9a:	92 e0       	ldi	r25, 0x02	; 2
    4e9c:	9a 83       	std	Y+2, r25	; 0x02
    4e9e:	89 83       	std	Y+1, r24	; 0x01

    uint8_t* PtrSrc = (uint8_t*)(&Model);
    uint8_t* PtrDst = (uint8_t*)(&EEPROM_MODEL[ModelNum]);
    4ea0:	68 9e       	mul	r6, r24
    4ea2:	b0 01       	movw	r22, r0
    4ea4:	69 9e       	mul	r6, r25
    4ea6:	70 0d       	add	r23, r0
    4ea8:	78 9e       	mul	r7, r24
    4eaa:	70 0d       	add	r23, r0
    4eac:	11 24       	eor	r1, r1
    4eae:	60 50       	subi	r22, 0x00	; 0
    4eb0:	70 40       	sbci	r23, 0x00	; 0

    eeprom_write_block(PtrSrc, PtrDst, Model.size);
    4eb2:	48 ef       	ldi	r20, 0xF8	; 248
    4eb4:	52 e0       	ldi	r21, 0x02	; 2
    4eb6:	c6 01       	movw	r24, r12
    4eb8:	0e 94 16 4b 	call	0x962c	; 0x962c <__eewr_block_m2560>
}
    4ebc:	cc 5f       	subi	r28, 0xFC	; 252
    4ebe:	dc 4f       	sbci	r29, 0xFC	; 252
    4ec0:	0f b6       	in	r0, 0x3f	; 63
    4ec2:	f8 94       	cli
    4ec4:	de bf       	out	0x3e, r29	; 62
    4ec6:	0f be       	out	0x3f, r0	; 63
    4ec8:	cd bf       	out	0x3d, r28	; 61
    4eca:	df 91       	pop	r29
    4ecc:	cf 91       	pop	r28
    4ece:	1f 91       	pop	r17
    4ed0:	0f 91       	pop	r16
    4ed2:	ff 90       	pop	r15
    4ed4:	ef 90       	pop	r14
    4ed6:	df 90       	pop	r13
    4ed8:	cf 90       	pop	r12
    4eda:	bf 90       	pop	r11
    4edc:	af 90       	pop	r10
    4ede:	9f 90       	pop	r9
    4ee0:	8f 90       	pop	r8
    4ee2:	7f 90       	pop	r7
    4ee4:	6f 90       	pop	r6
    4ee6:	5f 90       	pop	r5
    4ee8:	4f 90       	pop	r4
    4eea:	3f 90       	pop	r3
    4eec:	2f 90       	pop	r2
    4eee:	08 95       	ret

00004ef0 <_Z9MODE_Copyaa>:

void MODE_Copy(int8_t From, int8_t To)
{
    4ef0:	af 92       	push	r10
    4ef2:	bf 92       	push	r11
    4ef4:	cf 92       	push	r12
    4ef6:	df 92       	push	r13
    4ef8:	ef 92       	push	r14
    4efa:	ff 92       	push	r15
    4efc:	0f 93       	push	r16
    4efe:	1f 93       	push	r17
    4f00:	cf 93       	push	r28
    4f02:	df 93       	push	r29
    cli();
    4f04:	f8 94       	cli
    4f06:	c0 e0       	ldi	r28, 0x00	; 0
    4f08:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i = 0; i < MODE_NAME_LEN; i++)
    {
        eeprom_write_byte(
                (uint8_t*)&EEPROM_MODEL[Settings.ModelNum].Mode[To].name[i],
                eeprom_read_byte((uint8_t*)&EEPROM_MODEL[Settings.ModelNum].Mode[From].name[i])
            );
    4f0a:	26 ef       	ldi	r18, 0xF6	; 246
    4f0c:	38 2f       	mov	r19, r24
    4f0e:	32 03       	mulsu	r19, r18
    4f10:	70 01       	movw	r14, r0
    4f12:	11 24       	eor	r1, r1
    4f14:	78 ef       	ldi	r23, 0xF8	; 248
    4f16:	a7 2e       	mov	r10, r23
    4f18:	72 e0       	ldi	r23, 0x02	; 2
    4f1a:	b7 2e       	mov	r11, r23
    4f1c:	62 03       	mulsu	r22, r18
    4f1e:	80 01       	movw	r16, r0
    4f20:	11 24       	eor	r1, r1

    for(uint8_t i = 0; i < MODE_NAME_LEN; i++)
    {
        eeprom_write_byte(
                (uint8_t*)&EEPROM_MODEL[Settings.ModelNum].Mode[To].name[i],
                eeprom_read_byte((uint8_t*)&EEPROM_MODEL[Settings.ModelNum].Mode[From].name[i])
    4f22:	20 91 81 0c 	lds	r18, 0x0C81
            );
    4f26:	ce 01       	movw	r24, r28
    4f28:	8e 0d       	add	r24, r14
    4f2a:	9f 1d       	adc	r25, r15
    4f2c:	a5 01       	movw	r20, r10
    4f2e:	24 03       	mulsu	r18, r20
    4f30:	60 01       	movw	r12, r0
    4f32:	25 9f       	mul	r18, r21
    4f34:	d0 0c       	add	r13, r0
    4f36:	11 24       	eor	r1, r1
    4f38:	8c 0d       	add	r24, r12
    4f3a:	9d 1d       	adc	r25, r13
    4f3c:	8a 5e       	subi	r24, 0xEA	; 234
    4f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f40:	0e 94 08 4b 	call	0x9610	; 0x9610 <__eerd_byte_m2560>
    4f44:	9e 01       	movw	r18, r28
    4f46:	20 0f       	add	r18, r16
    4f48:	31 1f       	adc	r19, r17
    4f4a:	2c 0d       	add	r18, r12
    4f4c:	3d 1d       	adc	r19, r13
    4f4e:	68 2f       	mov	r22, r24
    4f50:	c9 01       	movw	r24, r18
    4f52:	8a 5e       	subi	r24, 0xEA	; 234
    4f54:	9f 4f       	sbci	r25, 0xFF	; 255
    4f56:	0e 94 20 4b 	call	0x9640	; 0x9640 <__eewr_byte_m2560>
    4f5a:	21 96       	adiw	r28, 0x01	; 1

void MODE_Copy(int8_t From, int8_t To)
{
    cli();

    for(uint8_t i = 0; i < MODE_NAME_LEN; i++)
    4f5c:	cb 30       	cpi	r28, 0x0B	; 11
    4f5e:	d1 05       	cpc	r29, r1
    4f60:	01 f7       	brne	.-64     	; 0x4f22 <_Z9MODE_Copyaa+0x32>
                (uint8_t*)&EEPROM_MODEL[Settings.ModelNum].Mode[To].name[i],
                eeprom_read_byte((uint8_t*)&EEPROM_MODEL[Settings.ModelNum].Mode[From].name[i])
            );
    }

    uint8_t* PtrFrom = (uint8_t*)(&EEPROM_MODEL[Settings.ModelNum].Mode[From]);
    4f62:	40 91 81 0c 	lds	r20, 0x0C81
    4f66:	28 ef       	ldi	r18, 0xF8	; 248
    4f68:	32 e0       	ldi	r19, 0x02	; 2
    4f6a:	42 03       	mulsu	r20, r18
    4f6c:	c0 01       	movw	r24, r0
    4f6e:	43 9f       	mul	r20, r19
    4f70:	90 0d       	add	r25, r0
    4f72:	11 24       	eor	r1, r1
    4f74:	e8 0e       	add	r14, r24
    4f76:	f9 1e       	adc	r15, r25
    4f78:	97 01       	movw	r18, r14
    4f7a:	2a 5e       	subi	r18, 0xEA	; 234
    4f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f7e:	79 01       	movw	r14, r18
    uint8_t* PtrTo   = (uint8_t*)(&EEPROM_MODEL[Settings.ModelNum].Mode[To]);
    4f80:	08 0f       	add	r16, r24
    4f82:	19 1f       	adc	r17, r25
    4f84:	0a 5e       	subi	r16, 0xEA	; 234
    4f86:	1f 4f       	sbci	r17, 0xFF	; 255
    4f88:	c0 e0       	ldi	r28, 0x00	; 0
    4f8a:	d0 e0       	ldi	r29, 0x00	; 0

    for(uint8_t i = 0; i < sizeof(DEF_MODE); ++i)
        eeprom_write_byte(PtrTo++, eeprom_read_byte(PtrFrom++));
    4f8c:	c7 01       	movw	r24, r14
    4f8e:	8c 0f       	add	r24, r28
    4f90:	9d 1f       	adc	r25, r29
    4f92:	0e 94 08 4b 	call	0x9610	; 0x9610 <__eerd_byte_m2560>
    4f96:	68 2f       	mov	r22, r24
    4f98:	c8 01       	movw	r24, r16
    4f9a:	8c 0f       	add	r24, r28
    4f9c:	9d 1f       	adc	r25, r29
    4f9e:	0e 94 20 4b 	call	0x9640	; 0x9640 <__eewr_byte_m2560>
    4fa2:	21 96       	adiw	r28, 0x01	; 1
    }

    uint8_t* PtrFrom = (uint8_t*)(&EEPROM_MODEL[Settings.ModelNum].Mode[From]);
    uint8_t* PtrTo   = (uint8_t*)(&EEPROM_MODEL[Settings.ModelNum].Mode[To]);

    for(uint8_t i = 0; i < sizeof(DEF_MODE); ++i)
    4fa4:	c6 3f       	cpi	r28, 0xF6	; 246
    4fa6:	d1 05       	cpc	r29, r1
    4fa8:	89 f7       	brne	.-30     	; 0x4f8c <_Z9MODE_Copyaa+0x9c>
        eeprom_write_byte(PtrTo++, eeprom_read_byte(PtrFrom++));

    
    Recalc_EEPROM_CRC();
    4faa:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <_Z17Recalc_EEPROM_CRCv>

    sei();
    4fae:	78 94       	sei
}
    4fb0:	df 91       	pop	r29
    4fb2:	cf 91       	pop	r28
    4fb4:	1f 91       	pop	r17
    4fb6:	0f 91       	pop	r16
    4fb8:	ff 90       	pop	r15
    4fba:	ef 90       	pop	r14
    4fbc:	df 90       	pop	r13
    4fbe:	cf 90       	pop	r12
    4fc0:	bf 90       	pop	r11
    4fc2:	af 90       	pop	r10
    4fc4:	08 95       	ret

00004fc6 <_Z11Calibrationv>:

void Calibration()
{
    4fc6:	7f 92       	push	r7
    4fc8:	8f 92       	push	r8
    4fca:	9f 92       	push	r9
    4fcc:	af 92       	push	r10
    4fce:	bf 92       	push	r11
    4fd0:	cf 92       	push	r12
    4fd2:	df 92       	push	r13
    4fd4:	ef 92       	push	r14
    4fd6:	ff 92       	push	r15
    4fd8:	0f 93       	push	r16
    4fda:	1f 93       	push	r17
    4fdc:	cf 93       	push	r28
    4fde:	df 93       	push	r29
    4fe0:	cd b7       	in	r28, 0x3d	; 61
    4fe2:	de b7       	in	r29, 0x3e	; 62
    4fe4:	6e 97       	sbiw	r28, 0x1e	; 30
    4fe6:	0f b6       	in	r0, 0x3f	; 63
    4fe8:	f8 94       	cli
    4fea:	de bf       	out	0x3e, r29	; 62
    4fec:	0f be       	out	0x3f, r0	; 63
    4fee:	cd bf       	out	0x3d, r28	; 61
    cli();
    4ff0:	f8 94       	cli
    4ff2:	0e e8       	ldi	r16, 0x8E	; 142
    4ff4:	1c e0       	ldi	r17, 0x0C	; 12
    4ff6:	99 e7       	ldi	r25, 0x79	; 121
    4ff8:	e9 2e       	mov	r14, r25
    4ffa:	99 e0       	ldi	r25, 0x09	; 9
    4ffc:	f9 2e       	mov	r15, r25

    for(uint8_t i = 0; i < MAX_ADC; ++i)
    4ffe:	d1 2c       	mov	r13, r1
    {
        AD[i] = read_adc(i);
    5000:	8d 2d       	mov	r24, r13
    5002:	0e 94 0f 44 	call	0x881e	; 0x881e <_Z8read_adch>
    5006:	f7 01       	movw	r30, r14
    5008:	81 93       	st	Z+, r24
    500a:	91 93       	st	Z+, r25
    500c:	7f 01       	movw	r14, r30

        Settings.ADmin[i] = AD[i];
    500e:	f8 01       	movw	r30, r16
    5010:	81 93       	st	Z+, r24
    5012:	91 93       	st	Z+, r25
    5014:	8f 01       	movw	r16, r30
        Settings.ADmax[i] = AD[i];
    5016:	93 87       	std	Z+11, r25	; 0x0b
    5018:	82 87       	std	Z+10, r24	; 0x0a

void Calibration()
{
    cli();

    for(uint8_t i = 0; i < MAX_ADC; ++i)
    501a:	d3 94       	inc	r13
    501c:	f6 e0       	ldi	r31, 0x06	; 6
    501e:	df 12       	cpse	r13, r31
    5020:	ef cf       	rjmp	.-34     	; 0x5000 <_Z11Calibrationv+0x3a>

        Settings.ADmin[i] = AD[i];
        Settings.ADmax[i] = AD[i];
    }

    gfx_ClearBuf();
    5022:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z12gfx_ClearBufv>
    gfx_PrintString(30, TFT_ScreenHeight / 2, "Calibrating", COLOR_FRONT, Font_8x12);
    5026:	e1 2c       	mov	r14, r1
    5028:	f1 2c       	mov	r15, r1
    502a:	04 ec       	ldi	r16, 0xC4	; 196
    502c:	1c e0       	ldi	r17, 0x0C	; 12
    502e:	21 e0       	ldi	r18, 0x01	; 1
    5030:	30 e0       	ldi	r19, 0x00	; 0
    5032:	45 eb       	ldi	r20, 0xB5	; 181
    5034:	56 e0       	ldi	r21, 0x06	; 6
    5036:	60 e4       	ldi	r22, 0x40	; 64
    5038:	8e e1       	ldi	r24, 0x1E	; 30
    503a:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    gfx_Refresh();
    503e:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>
    5042:	2f ef       	ldi	r18, 0xFF	; 255
    5044:	83 ed       	ldi	r24, 0xD3	; 211
    5046:	90 e3       	ldi	r25, 0x30	; 48
    5048:	21 50       	subi	r18, 0x01	; 1
    504a:	80 40       	sbci	r24, 0x00	; 0
    504c:	90 40       	sbci	r25, 0x00	; 0
    504e:	e1 f7       	brne	.-8      	; 0x5048 <_Z11Calibrationv+0x82>
    5050:	00 c0       	rjmp	.+0      	; 0x5052 <_Z11Calibrationv+0x8c>
    5052:	00 00       	nop

    enum { Stick_Min = 0, Stick_Max, Stick_Val, StickGroup_Count };

    int16_t Sticks[StickGroup_Count][5];
    
    while(!HB_ENTER)
    5054:	01 9b       	sbis	0x00, 1	; 0
    5056:	02 c0       	rjmp	.+4      	; 0x505c <_Z11Calibrationv+0x96>
    5058:	07 99       	sbic	0x00, 7	; 0
    505a:	87 c0       	rjmp	.+270    	; 0x516a <_Z11Calibrationv+0x1a4>
        DrawSticks(Sticks[Stick_Min], Sticks[Stick_Max], Sticks[Stick_Val]);

        gfx_Refresh();
    }

    MsgBox("Center all\nsticks and\npress Enter", Font_8x12, "Calibration");
    505c:	e1 2c       	mov	r14, r1
    505e:	f1 2c       	mov	r15, r1
    5060:	00 e0       	ldi	r16, 0x00	; 0
    5062:	2a ec       	ldi	r18, 0xCA	; 202
    5064:	3c e0       	ldi	r19, 0x0C	; 12
    5066:	41 ec       	ldi	r20, 0xC1	; 193
    5068:	56 e0       	ldi	r21, 0x06	; 6
    506a:	64 ec       	ldi	r22, 0xC4	; 196
    506c:	7c e0       	ldi	r23, 0x0C	; 12
    506e:	8d ec       	ldi	r24, 0xCD	; 205
    5070:	96 e0       	ldi	r25, 0x06	; 6
    5072:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx>
    
    // Используется прямой доступ к кнопкам потому, что во время калибровки драйвер клавиатуры не работатает.
    while(HB_ENTER);  // Ждем отпускания кнопок
    5076:	01 9b       	sbis	0x00, 1	; 0
    5078:	fe cf       	rjmp	.-4      	; 0x5076 <_Z11Calibrationv+0xb0>
    507a:	07 9b       	sbis	0x00, 7	; 0
    507c:	fc cf       	rjmp	.-8      	; 0x5076 <_Z11Calibrationv+0xb0>
    while(!HB_ENTER); // Ждем нажатия кнопоки ВВОД
    507e:	01 99       	sbic	0x00, 1	; 0
    5080:	14 c0       	rjmp	.+40     	; 0x50aa <_Z11Calibrationv+0xe4>
    5082:	0d e7       	ldi	r16, 0x7D	; 125
    5084:	1c e0       	ldi	r17, 0x0C	; 12
    5086:	f8 ed       	ldi	r31, 0xD8	; 216
    5088:	ef 2e       	mov	r14, r31
    508a:	fe e0       	ldi	r31, 0x0E	; 14
    508c:	ff 2e       	mov	r15, r31
    508e:	a2 eb       	ldi	r26, 0xB2	; 178
    5090:	8a 2e       	mov	r8, r26
    5092:	ac e0       	ldi	r26, 0x0C	; 12
    5094:	9a 2e       	mov	r9, r26
    5096:	b6 ea       	ldi	r27, 0xA6	; 166
    5098:	cb 2e       	mov	r12, r27
    509a:	bc e0       	ldi	r27, 0x0C	; 12
    509c:	db 2e       	mov	r13, r27
    
    while(!HB_ENTER)
    {
        gfx_ClearBuf();

        for (uint8_t i = 0; i < MAX_ADC; ++i)
    509e:	71 2c       	mov	r7, r1
        
        // Коэффициент нормализации умножается на 10, что бы он был больше.
        // В математике при рассчётах результат делится на 10.
        // Читаем и записываем коэффициент нормализации при отклонении
        // управляющего элемента в большую сторону относительно центра
        Settings.Kmax[i] = (TimerClockPerUSec(500) * 10) / (Settings.ADmax[i] - Settings.ADmid[i]);
    50a0:	80 e1       	ldi	r24, 0x10	; 16
    50a2:	a8 2e       	mov	r10, r24
    50a4:	87 e2       	ldi	r24, 0x27	; 39
    50a6:	b8 2e       	mov	r11, r24
    50a8:	03 c0       	rjmp	.+6      	; 0x50b0 <_Z11Calibrationv+0xea>

    MsgBox("Center all\nsticks and\npress Enter", Font_8x12, "Calibration");
    
    // Используется прямой доступ к кнопкам потому, что во время калибровки драйвер клавиатуры не работатает.
    while(HB_ENTER);  // Ждем отпускания кнопок
    while(!HB_ENTER); // Ждем нажатия кнопоки ВВОД
    50aa:	07 9b       	sbis	0x00, 7	; 0
    50ac:	ea cf       	rjmp	.-44     	; 0x5082 <_Z11Calibrationv+0xbc>
    50ae:	e7 cf       	rjmp	.-50     	; 0x507e <_Z11Calibrationv+0xb8>

    for(uint8_t i = 0; i < MAX_ADC; ++i)
    {
        // Читаем и записываем центральное положение аналоговых каналов
        Settings.ADmid[i] = read_adc(i);
    50b0:	87 2d       	mov	r24, r7
    50b2:	0e 94 0f 44 	call	0x881e	; 0x881e <_Z8read_adch>
    50b6:	f8 01       	movw	r30, r16
    50b8:	96 83       	std	Z+6, r25	; 0x06
    50ba:	85 83       	std	Z+5, r24	; 0x05
        eeprom_write_word((uint16_t*)&EEPROM_SETTINGS.ADmid[i], Settings.ADmid[i]);
    50bc:	bc 01       	movw	r22, r24
    50be:	c7 01       	movw	r24, r14
    50c0:	05 96       	adiw	r24, 0x05	; 5
    50c2:	0e 94 2e 4b 	call	0x965c	; 0x965c <__eewr_word_m2560>
        eeprom_write_word((uint16_t*)&EEPROM_SETTINGS.ADmin[i], Settings.ADmin[i]);
    50c6:	f8 01       	movw	r30, r16
    50c8:	61 89       	ldd	r22, Z+17	; 0x11
    50ca:	72 89       	ldd	r23, Z+18	; 0x12
    50cc:	c7 01       	movw	r24, r14
    50ce:	41 96       	adiw	r24, 0x11	; 17
    50d0:	0e 94 2e 4b 	call	0x965c	; 0x965c <__eewr_word_m2560>
        eeprom_write_word((uint16_t*)&EEPROM_SETTINGS.ADmax[i], Settings.ADmax[i]);
    50d4:	f8 01       	movw	r30, r16
    50d6:	65 8d       	ldd	r22, Z+29	; 0x1d
    50d8:	76 8d       	ldd	r23, Z+30	; 0x1e
    50da:	c7 01       	movw	r24, r14
    50dc:	4d 96       	adiw	r24, 0x1d	; 29
    50de:	0e 94 2e 4b 	call	0x965c	; 0x965c <__eewr_word_m2560>
        
        // Коэффициент нормализации умножается на 10, что бы он был больше.
        // В математике при рассчётах результат делится на 10.
        // Читаем и записываем коэффициент нормализации при отклонении
        // управляющего элемента в большую сторону относительно центра
        Settings.Kmax[i] = (TimerClockPerUSec(500) * 10) / (Settings.ADmax[i] - Settings.ADmid[i]);
    50e2:	f8 01       	movw	r30, r16
    50e4:	65 8d       	ldd	r22, Z+29	; 0x1d
    50e6:	76 8d       	ldd	r23, Z+30	; 0x1e
    50e8:	85 81       	ldd	r24, Z+5	; 0x05
    50ea:	96 81       	ldd	r25, Z+6	; 0x06
    50ec:	68 1b       	sub	r22, r24
    50ee:	79 0b       	sbc	r23, r25
    50f0:	c5 01       	movw	r24, r10
    50f2:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    50f6:	f4 01       	movw	r30, r8
    50f8:	61 93       	st	Z+, r22
    50fa:	71 93       	st	Z+, r23
    50fc:	4f 01       	movw	r8, r30
        eeprom_write_word((uint16_t*)&EEPROM_SETTINGS.Kmax[i], Settings.Kmax[i]); 
    50fe:	c7 01       	movw	r24, r14
    5100:	c5 96       	adiw	r24, 0x35	; 53
    5102:	0e 94 2e 4b 	call	0x965c	; 0x965c <__eewr_word_m2560>
        // Читаем и записываем коэффициент нормализации при отклонении
        // управляющего элемента в меньшую сторону относительно центра
        Settings.Kmin[i] = (TimerClockPerUSec(500) * 10) / (Settings.ADmid[i] - Settings.ADmin[i]);
    5106:	f8 01       	movw	r30, r16
    5108:	65 81       	ldd	r22, Z+5	; 0x05
    510a:	76 81       	ldd	r23, Z+6	; 0x06
    510c:	81 89       	ldd	r24, Z+17	; 0x11
    510e:	92 89       	ldd	r25, Z+18	; 0x12
    5110:	68 1b       	sub	r22, r24
    5112:	79 0b       	sbc	r23, r25
    5114:	c5 01       	movw	r24, r10
    5116:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    511a:	f6 01       	movw	r30, r12
    511c:	61 93       	st	Z+, r22
    511e:	71 93       	st	Z+, r23
    5120:	6f 01       	movw	r12, r30
        eeprom_write_word((uint16_t*)&EEPROM_SETTINGS.Kmin[i], Settings.Kmin[i]); 
    5122:	c7 01       	movw	r24, r14
    5124:	89 96       	adiw	r24, 0x29	; 41
    5126:	0e 94 2e 4b 	call	0x965c	; 0x965c <__eewr_word_m2560>
    
    // Используется прямой доступ к кнопкам потому, что во время калибровки драйвер клавиатуры не работатает.
    while(HB_ENTER);  // Ждем отпускания кнопок
    while(!HB_ENTER); // Ждем нажатия кнопоки ВВОД

    for(uint8_t i = 0; i < MAX_ADC; ++i)
    512a:	73 94       	inc	r7
    512c:	0e 5f       	subi	r16, 0xFE	; 254
    512e:	1f 4f       	sbci	r17, 0xFF	; 255
    5130:	f2 e0       	ldi	r31, 0x02	; 2
    5132:	ef 0e       	add	r14, r31
    5134:	f1 1c       	adc	r15, r1
    5136:	26 e0       	ldi	r18, 0x06	; 6
    5138:	72 12       	cpse	r7, r18
    513a:	ba cf       	rjmp	.-140    	; 0x50b0 <_Z11Calibrationv+0xea>
        // управляющего элемента в меньшую сторону относительно центра
        Settings.Kmin[i] = (TimerClockPerUSec(500) * 10) / (Settings.ADmid[i] - Settings.ADmin[i]);
        eeprom_write_word((uint16_t*)&EEPROM_SETTINGS.Kmin[i], Settings.Kmin[i]); 
    }

    Recalc_EEPROM_CRC();
    513c:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <_Z17Recalc_EEPROM_CRCv>

    sei();
    5140:	78 94       	sei
}
    5142:	6e 96       	adiw	r28, 0x1e	; 30
    5144:	0f b6       	in	r0, 0x3f	; 63
    5146:	f8 94       	cli
    5148:	de bf       	out	0x3e, r29	; 62
    514a:	0f be       	out	0x3f, r0	; 63
    514c:	cd bf       	out	0x3d, r28	; 61
    514e:	df 91       	pop	r29
    5150:	cf 91       	pop	r28
    5152:	1f 91       	pop	r17
    5154:	0f 91       	pop	r16
    5156:	ff 90       	pop	r15
    5158:	ef 90       	pop	r14
    515a:	df 90       	pop	r13
    515c:	cf 90       	pop	r12
    515e:	bf 90       	pop	r11
    5160:	af 90       	pop	r10
    5162:	9f 90       	pop	r9
    5164:	8f 90       	pop	r8
    5166:	7f 90       	pop	r7
    5168:	08 95       	ret

    int16_t Sticks[StickGroup_Count][5];
    
    while(!HB_ENTER)
    {
        gfx_ClearBuf();
    516a:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z12gfx_ClearBufv>
    516e:	0e e8       	ldi	r16, 0x8E	; 142
    5170:	1c e0       	ldi	r17, 0x0C	; 12
    5172:	e9 e7       	ldi	r30, 0x79	; 121
    5174:	ee 2e       	mov	r14, r30
    5176:	e9 e0       	ldi	r30, 0x09	; 9
    5178:	fe 2e       	mov	r15, r30

        for (uint8_t i = 0; i < MAX_ADC; ++i)
    517a:	d1 2c       	mov	r13, r1
        {
            AD[i] = read_adc(i);
    517c:	8d 2d       	mov	r24, r13
    517e:	0e 94 0f 44 	call	0x881e	; 0x881e <_Z8read_adch>
    5182:	f7 01       	movw	r30, r14
    5184:	81 93       	st	Z+, r24
    5186:	91 93       	st	Z+, r25
    5188:	7f 01       	movw	r14, r30
            
            if(Settings.ADmin[i] > AD[i])
    518a:	f8 01       	movw	r30, r16
    518c:	20 81       	ld	r18, Z
    518e:	31 81       	ldd	r19, Z+1	; 0x01
    5190:	82 17       	cp	r24, r18
    5192:	93 07       	cpc	r25, r19
    5194:	14 f4       	brge	.+4      	; 0x519a <_Z11Calibrationv+0x1d4>
                Settings.ADmin[i] = AD[i];
    5196:	91 83       	std	Z+1, r25	; 0x01
    5198:	80 83       	st	Z, r24
            
            if(Settings.ADmax[i] < AD[i])
    519a:	f8 01       	movw	r30, r16
    519c:	24 85       	ldd	r18, Z+12	; 0x0c
    519e:	35 85       	ldd	r19, Z+13	; 0x0d
    51a0:	28 17       	cp	r18, r24
    51a2:	39 07       	cpc	r19, r25
    51a4:	14 f4       	brge	.+4      	; 0x51aa <_Z11Calibrationv+0x1e4>
                Settings.ADmax[i] = AD[i];
    51a6:	95 87       	std	Z+13, r25	; 0x0d
    51a8:	84 87       	std	Z+12, r24	; 0x0c
    
    while(!HB_ENTER)
    {
        gfx_ClearBuf();

        for (uint8_t i = 0; i < MAX_ADC; ++i)
    51aa:	d3 94       	inc	r13
    51ac:	0e 5f       	subi	r16, 0xFE	; 254
    51ae:	1f 4f       	sbci	r17, 0xFF	; 255
    51b0:	f6 e0       	ldi	r31, 0x06	; 6
    51b2:	df 12       	cpse	r13, r31
    51b4:	e3 cf       	rjmp	.-58     	; 0x517c <_Z11Calibrationv+0x1b6>
            
            if(Settings.ADmax[i] < AD[i])
                Settings.ADmax[i] = AD[i];
        }

        Sticks[Stick_Min][CTRL_AIL]  = Settings.ADmin[ADC_AIL];
    51b6:	80 91 90 0c 	lds	r24, 0x0C90
    51ba:	90 91 91 0c 	lds	r25, 0x0C91
    51be:	9a 83       	std	Y+2, r25	; 0x02
    51c0:	89 83       	std	Y+1, r24	; 0x01
        Sticks[Stick_Min][CTRL_ELE]  = Settings.ADmin[ADC_ELE];
    51c2:	80 91 8e 0c 	lds	r24, 0x0C8E
    51c6:	90 91 8f 0c 	lds	r25, 0x0C8F
    51ca:	9c 83       	std	Y+4, r25	; 0x04
    51cc:	8b 83       	std	Y+3, r24	; 0x03
        Sticks[Stick_Min][CTRL_THR]  = Settings.ADmin[ADC_THR];
    51ce:	80 91 92 0c 	lds	r24, 0x0C92
    51d2:	90 91 93 0c 	lds	r25, 0x0C93
    51d6:	9e 83       	std	Y+6, r25	; 0x06
    51d8:	8d 83       	std	Y+5, r24	; 0x05
        Sticks[Stick_Min][CTRL_RUD]  = Settings.ADmin[ADC_RUD];
    51da:	80 91 94 0c 	lds	r24, 0x0C94
    51de:	90 91 95 0c 	lds	r25, 0x0C95
    51e2:	98 87       	std	Y+8, r25	; 0x08
    51e4:	8f 83       	std	Y+7, r24	; 0x07
        Sticks[Stick_Min][CTRL_AUX1] = Settings.ADmin[ADC_AUX1];
    51e6:	80 91 96 0c 	lds	r24, 0x0C96
    51ea:	90 91 97 0c 	lds	r25, 0x0C97
    51ee:	9a 87       	std	Y+10, r25	; 0x0a
    51f0:	89 87       	std	Y+9, r24	; 0x09

        Sticks[Stick_Max][CTRL_AIL]  = Settings.ADmax[ADC_AIL];
    51f2:	80 91 9c 0c 	lds	r24, 0x0C9C
    51f6:	90 91 9d 0c 	lds	r25, 0x0C9D
    51fa:	9c 87       	std	Y+12, r25	; 0x0c
    51fc:	8b 87       	std	Y+11, r24	; 0x0b
        Sticks[Stick_Max][CTRL_ELE]  = Settings.ADmax[ADC_ELE];
    51fe:	80 91 9a 0c 	lds	r24, 0x0C9A
    5202:	90 91 9b 0c 	lds	r25, 0x0C9B
    5206:	9e 87       	std	Y+14, r25	; 0x0e
    5208:	8d 87       	std	Y+13, r24	; 0x0d
        Sticks[Stick_Max][CTRL_THR]  = Settings.ADmax[ADC_THR];
    520a:	80 91 9e 0c 	lds	r24, 0x0C9E
    520e:	90 91 9f 0c 	lds	r25, 0x0C9F
    5212:	98 8b       	std	Y+16, r25	; 0x10
    5214:	8f 87       	std	Y+15, r24	; 0x0f
        Sticks[Stick_Max][CTRL_RUD]  = Settings.ADmax[ADC_RUD];
    5216:	80 91 a0 0c 	lds	r24, 0x0CA0
    521a:	90 91 a1 0c 	lds	r25, 0x0CA1
    521e:	9a 8b       	std	Y+18, r25	; 0x12
    5220:	89 8b       	std	Y+17, r24	; 0x11
        Sticks[Stick_Max][CTRL_AUX1] = Settings.ADmax[ADC_AUX1];
    5222:	80 91 a2 0c 	lds	r24, 0x0CA2
    5226:	90 91 a3 0c 	lds	r25, 0x0CA3
    522a:	9c 8b       	std	Y+20, r25	; 0x14
    522c:	8b 8b       	std	Y+19, r24	; 0x13

        Sticks[Stick_Val][CTRL_AIL]  = AD[ADC_AIL];
    522e:	80 91 7b 09 	lds	r24, 0x097B
    5232:	90 91 7c 09 	lds	r25, 0x097C
    5236:	9e 8b       	std	Y+22, r25	; 0x16
    5238:	8d 8b       	std	Y+21, r24	; 0x15
        Sticks[Stick_Val][CTRL_ELE]  = AD[ADC_ELE];
    523a:	80 91 79 09 	lds	r24, 0x0979
    523e:	90 91 7a 09 	lds	r25, 0x097A
    5242:	98 8f       	std	Y+24, r25	; 0x18
    5244:	8f 8b       	std	Y+23, r24	; 0x17
        Sticks[Stick_Val][CTRL_THR]  = AD[ADC_THR];
    5246:	80 91 7d 09 	lds	r24, 0x097D
    524a:	90 91 7e 09 	lds	r25, 0x097E
    524e:	9a 8f       	std	Y+26, r25	; 0x1a
    5250:	89 8f       	std	Y+25, r24	; 0x19
        Sticks[Stick_Val][CTRL_RUD]  = AD[ADC_RUD];
    5252:	80 91 7f 09 	lds	r24, 0x097F
    5256:	90 91 80 09 	lds	r25, 0x0980
    525a:	9c 8f       	std	Y+28, r25	; 0x1c
    525c:	8b 8f       	std	Y+27, r24	; 0x1b
        Sticks[Stick_Val][CTRL_AUX1] = AD[ADC_AUX1];
    525e:	80 91 81 09 	lds	r24, 0x0981
    5262:	90 91 82 09 	lds	r25, 0x0982
    5266:	9e 8f       	std	Y+30, r25	; 0x1e
    5268:	8d 8f       	std	Y+29, r24	; 0x1d
        
        DrawSticks(Sticks[Stick_Min], Sticks[Stick_Max], Sticks[Stick_Val]);
    526a:	20 e0       	ldi	r18, 0x00	; 0
    526c:	ae 01       	movw	r20, r28
    526e:	4b 5e       	subi	r20, 0xEB	; 235
    5270:	5f 4f       	sbci	r21, 0xFF	; 255
    5272:	be 01       	movw	r22, r28
    5274:	65 5f       	subi	r22, 0xF5	; 245
    5276:	7f 4f       	sbci	r23, 0xFF	; 255
    5278:	ce 01       	movw	r24, r28
    527a:	01 96       	adiw	r24, 0x01	; 1
    527c:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <_Z10DrawSticksPiS_S_b>

        gfx_Refresh();
    5280:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>
    5284:	e7 ce       	rjmp	.-562    	; 0x5054 <_Z11Calibrationv+0x8e>

00005286 <_Z8TX_Resetv>:

    sei();
}

void TX_Reset()
{
    5286:	ef 92       	push	r14
    5288:	ff 92       	push	r15
    528a:	0f 93       	push	r16
    528c:	1f 93       	push	r17
    528e:	cf 93       	push	r28
    5290:	df 93       	push	r29
    Settings.SoundFlag = ON;
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	80 93 80 0c 	sts	0x0C80, r24

    gfx_ClearBuf();
    5298:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z12gfx_ClearBufv>

    const FontProfile& Font = Font_8x12;
    const uint8_t StartPos = (TFT_ScreenHeight - Font.H) / 2 - Font.H;
    529c:	80 91 c5 0c 	lds	r24, 0x0CC5
    52a0:	60 e8       	ldi	r22, 0x80	; 128
    52a2:	70 e0       	ldi	r23, 0x00	; 0
    52a4:	68 1b       	sub	r22, r24
    52a6:	71 09       	sbc	r23, r1
    52a8:	77 ff       	sbrs	r23, 7
    52aa:	02 c0       	rjmp	.+4      	; 0x52b0 <_Z8TX_Resetv+0x2a>
    52ac:	6f 5f       	subi	r22, 0xFF	; 255
    52ae:	7f 4f       	sbci	r23, 0xFF	; 255
    52b0:	75 95       	asr	r23
    52b2:	67 95       	ror	r22
    52b4:	d6 2f       	mov	r29, r22
    52b6:	d8 1b       	sub	r29, r24

    gfx_PrintString((TFT_ScreenWidth - Font.W * 10) / 2, StartPos,          "Please" , COLOR_FRONT, Font);
    52b8:	80 91 c4 0c 	lds	r24, 0x0CC4
    52bc:	cb ef       	ldi	r28, 0xFB	; 251
    52be:	8c 9f       	mul	r24, r28
    52c0:	80 2d       	mov	r24, r0
    52c2:	11 24       	eor	r1, r1
    52c4:	e1 2c       	mov	r14, r1
    52c6:	f1 2c       	mov	r15, r1
    52c8:	04 ec       	ldi	r16, 0xC4	; 196
    52ca:	1c e0       	ldi	r17, 0x0C	; 12
    52cc:	21 e0       	ldi	r18, 0x01	; 1
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	4f ee       	ldi	r20, 0xEF	; 239
    52d2:	56 e0       	ldi	r21, 0x06	; 6
    52d4:	6d 2f       	mov	r22, r29
    52d6:	80 5b       	subi	r24, 0xB0	; 176
    52d8:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    gfx_PrintString((TFT_ScreenWidth - Font.W * 5 ) / 2, StartPos + Font.H, "wait...", COLOR_FRONT, Font);
    52dc:	60 91 c5 0c 	lds	r22, 0x0CC5
    52e0:	6d 0f       	add	r22, r29
    52e2:	20 91 c4 0c 	lds	r18, 0x0CC4
    52e6:	3c 2f       	mov	r19, r28
    52e8:	32 03       	mulsu	r19, r18
    52ea:	c0 01       	movw	r24, r0
    52ec:	11 24       	eor	r1, r1
    52ee:	80 56       	subi	r24, 0x60	; 96
    52f0:	9f 4f       	sbci	r25, 0xFF	; 255
    52f2:	97 fd       	sbrc	r25, 7
    52f4:	01 96       	adiw	r24, 0x01	; 1
    52f6:	95 95       	asr	r25
    52f8:	87 95       	ror	r24
    52fa:	e1 2c       	mov	r14, r1
    52fc:	f1 2c       	mov	r15, r1
    52fe:	04 ec       	ldi	r16, 0xC4	; 196
    5300:	1c e0       	ldi	r17, 0x0C	; 12
    5302:	21 e0       	ldi	r18, 0x01	; 1
    5304:	30 e0       	ldi	r19, 0x00	; 0
    5306:	40 e0       	ldi	r20, 0x00	; 0
    5308:	59 e0       	ldi	r21, 0x09	; 9
    530a:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    gfx_DrawRectangle(0, StartPos + Font.H*2, TFT_ScreenWidth - 1, StartPos + Font.H * 3, COLOR_FRONT);
    530e:	80 91 c5 0c 	lds	r24, 0x0CC5
    5312:	28 2f       	mov	r18, r24
    5314:	22 0f       	add	r18, r18
    5316:	28 0f       	add	r18, r24
    5318:	2d 0f       	add	r18, r29
    531a:	62 2f       	mov	r22, r18
    531c:	68 1b       	sub	r22, r24
    531e:	e1 2c       	mov	r14, r1
    5320:	01 e0       	ldi	r16, 0x01	; 1
    5322:	10 e0       	ldi	r17, 0x00	; 0
    5324:	4f e9       	ldi	r20, 0x9F	; 159
    5326:	80 e0       	ldi	r24, 0x00	; 0
    5328:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
    gfx_Refresh();
    532c:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>

    const uint8_t Step = TFT_ScreenWidth / MAX_MODELS;
    for(uint8_t i = 0, x = Step; i < MAX_MODELS; ++i, x += Step)
    5330:	30 e2       	ldi	r19, 0x20	; 32
    5332:	f3 2e       	mov	r15, r19
    5334:	c0 e0       	ldi	r28, 0x00	; 0
    {
        Settings.ModelNum = i;
    5336:	c0 93 81 0c 	sts	0x0C81, r28
        MODEL_Reset(Settings.ModelNum);
    533a:	8c 2f       	mov	r24, r28
    533c:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11MODEL_Reseta>
        gfx_FillRectangle(0, StartPos + Font.H * 2, x, StartPos + Font.H * 3, COLOR_FRONT);
    5340:	80 91 c5 0c 	lds	r24, 0x0CC5
    5344:	28 2f       	mov	r18, r24
    5346:	22 0f       	add	r18, r18
    5348:	28 0f       	add	r18, r24
    534a:	2d 0f       	add	r18, r29
    534c:	62 2f       	mov	r22, r18
    534e:	68 1b       	sub	r22, r24
    5350:	01 e0       	ldi	r16, 0x01	; 1
    5352:	10 e0       	ldi	r17, 0x00	; 0
    5354:	4f 2d       	mov	r20, r15
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
        gfx_Refresh();
    535c:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>
    gfx_PrintString((TFT_ScreenWidth - Font.W * 5 ) / 2, StartPos + Font.H, "wait...", COLOR_FRONT, Font);
    gfx_DrawRectangle(0, StartPos + Font.H*2, TFT_ScreenWidth - 1, StartPos + Font.H * 3, COLOR_FRONT);
    gfx_Refresh();

    const uint8_t Step = TFT_ScreenWidth / MAX_MODELS;
    for(uint8_t i = 0, x = Step; i < MAX_MODELS; ++i, x += Step)
    5360:	cf 5f       	subi	r28, 0xFF	; 255
    5362:	80 e2       	ldi	r24, 0x20	; 32
    5364:	f8 0e       	add	r15, r24
    5366:	c5 30       	cpi	r28, 0x05	; 5
    5368:	31 f7       	brne	.-52     	; 0x5336 <_Z8TX_Resetv+0xb0>
    536a:	9f ef       	ldi	r25, 0xFF	; 255
    536c:	29 e6       	ldi	r18, 0x69	; 105
    536e:	38 e1       	ldi	r19, 0x18	; 24
    5370:	91 50       	subi	r25, 0x01	; 1
    5372:	20 40       	sbci	r18, 0x00	; 0
    5374:	30 40       	sbci	r19, 0x00	; 0
    5376:	e1 f7       	brne	.-8      	; 0x5370 <_Z8TX_Resetv+0xea>
    5378:	00 c0       	rjmp	.+0      	; 0x537a <_Z8TX_Resetv+0xf4>
    537a:	00 00       	nop
        gfx_Refresh();
    }

    _delay_ms(500);

    eeprom_write_word((uint16_t*)&EEPROM_SETTINGS.size, sizeof(EEPROM_SETTINGS));
    537c:	61 e4       	ldi	r22, 0x41	; 65
    537e:	70 e0       	ldi	r23, 0x00	; 0
    5380:	88 ed       	ldi	r24, 0xD8	; 216
    5382:	9e e0       	ldi	r25, 0x0E	; 14
    5384:	0e 94 2e 4b 	call	0x965c	; 0x965c <__eewr_word_m2560>
    eeprom_write_byte((uint8_t* )&EEPROM_SETTINGS.ModelNum, 0);
    5388:	60 e0       	ldi	r22, 0x00	; 0
    538a:	8c ed       	ldi	r24, 0xDC	; 220
    538c:	9e e0       	ldi	r25, 0x0E	; 14
    538e:	0e 94 20 4b 	call	0x9640	; 0x9640 <__eewr_byte_m2560>
    eeprom_write_byte((uint8_t* )&EEPROM_SETTINGS.SoundFlag, true);
    5392:	61 e0       	ldi	r22, 0x01	; 1
    5394:	8b ed       	ldi	r24, 0xDB	; 219
    5396:	9e e0       	ldi	r25, 0x0E	; 14
    5398:	0e 94 20 4b 	call	0x9640	; 0x9640 <__eewr_byte_m2560>
    
    Calibration();
    539c:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <_Z11Calibrationv>

    eeprom_write_byte((uint8_t*)&EEPROM_SETTINGS.FirstStartComplete, true);
    53a0:	61 e0       	ldi	r22, 0x01	; 1
    53a2:	8a ed       	ldi	r24, 0xDA	; 218
    53a4:	9e e0       	ldi	r25, 0x0E	; 14
    53a6:	0e 94 20 4b 	call	0x9640	; 0x9640 <__eewr_byte_m2560>

    Recalc_EEPROM_CRC();
}
    53aa:	df 91       	pop	r29
    53ac:	cf 91       	pop	r28
    53ae:	1f 91       	pop	r17
    53b0:	0f 91       	pop	r16
    53b2:	ff 90       	pop	r15
    53b4:	ef 90       	pop	r14
    
    Calibration();

    eeprom_write_byte((uint8_t*)&EEPROM_SETTINGS.FirstStartComplete, true);

    Recalc_EEPROM_CRC();
    53b6:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <_Z17Recalc_EEPROM_CRCv>

000053ba <_Z14GetRunningTimev>:
// Private functions
//

uint32_t GetRunningTime()
{
    return TickCount * TASK_TICK_TIME;
    53ba:	20 91 62 09 	lds	r18, 0x0962
    53be:	30 91 63 09 	lds	r19, 0x0963
    53c2:	40 91 64 09 	lds	r20, 0x0964
    53c6:	50 91 65 09 	lds	r21, 0x0965
    53ca:	a4 e1       	ldi	r26, 0x14	; 20
    53cc:	b0 e0       	ldi	r27, 0x00	; 0
    53ce:	0e 94 e3 47 	call	0x8fc6	; 0x8fc6 <__muluhisi3>
}
    53d2:	08 95       	ret

000053d4 <_Z19SetTrimmersSaveTimej>:
//


// Time in msec
void SetTrimmersSaveTime(uint16_t Time)
{
    53d4:	fc 01       	movw	r30, r24
    NeedSaveTrimmers = true;
    53d6:	81 e0       	ldi	r24, 0x01	; 1
    53d8:	80 93 2a 0d 	sts	0x0D2A, r24
// Private functions
//

uint32_t GetRunningTime()
{
    return TickCount * TASK_TICK_TIME;
    53dc:	20 91 62 09 	lds	r18, 0x0962
    53e0:	30 91 63 09 	lds	r19, 0x0963
    53e4:	40 91 64 09 	lds	r20, 0x0964
    53e8:	50 91 65 09 	lds	r21, 0x0965
    53ec:	a4 e1       	ldi	r26, 0x14	; 20
    53ee:	b0 e0       	ldi	r27, 0x00	; 0
    53f0:	0e 94 e3 47 	call	0x8fc6	; 0x8fc6 <__muluhisi3>

// Time in msec
void SetTrimmersSaveTime(uint16_t Time)
{
    NeedSaveTrimmers = true;
    TimeToTrimmersSave = GetRunningTime() + Time;
    53f4:	6e 0f       	add	r22, r30
    53f6:	7f 1f       	adc	r23, r31
    53f8:	81 1d       	adc	r24, r1
    53fa:	91 1d       	adc	r25, r1
    53fc:	60 93 26 0d 	sts	0x0D26, r22
    5400:	70 93 27 0d 	sts	0x0D27, r23
    5404:	80 93 28 0d 	sts	0x0D28, r24
    5408:	90 93 29 0d 	sts	0x0D29, r25
    540c:	08 95       	ret

0000540e <_Z17TrimmersSave_Taskv>:
}

void TrimmersSave_Task()
{   
    540e:	0f 93       	push	r16
    5410:	1f 93       	push	r17
    if(!NeedSaveTrimmers || TimeToTrimmersSave > GetRunningTime())
    5412:	80 91 2a 0d 	lds	r24, 0x0D2A
    5416:	88 23       	and	r24, r24
    5418:	f9 f0       	breq	.+62     	; 0x5458 <_Z17TrimmersSave_Taskv+0x4a>
// Private functions
//

uint32_t GetRunningTime()
{
    return TickCount * TASK_TICK_TIME;
    541a:	20 91 62 09 	lds	r18, 0x0962
    541e:	30 91 63 09 	lds	r19, 0x0963
    5422:	40 91 64 09 	lds	r20, 0x0964
    5426:	50 91 65 09 	lds	r21, 0x0965
    542a:	a4 e1       	ldi	r26, 0x14	; 20
    542c:	b0 e0       	ldi	r27, 0x00	; 0
    542e:	0e 94 e3 47 	call	0x8fc6	; 0x8fc6 <__muluhisi3>
    TimeToTrimmersSave = GetRunningTime() + Time;
}

void TrimmersSave_Task()
{   
    if(!NeedSaveTrimmers || TimeToTrimmersSave > GetRunningTime())
    5432:	00 91 26 0d 	lds	r16, 0x0D26
    5436:	10 91 27 0d 	lds	r17, 0x0D27
    543a:	20 91 28 0d 	lds	r18, 0x0D28
    543e:	30 91 29 0d 	lds	r19, 0x0D29
    5442:	60 17       	cp	r22, r16
    5444:	71 07       	cpc	r23, r17
    5446:	82 07       	cpc	r24, r18
    5448:	93 07       	cpc	r25, r19
    544a:	30 f0       	brcs	.+12     	; 0x5458 <_Z17TrimmersSave_Taskv+0x4a>
        return;

    NeedSaveTrimmers = false;
    544c:	10 92 2a 0d 	sts	0x0D2A, r1
    
    MODEL_Save_Trimmers();
}
    5450:	1f 91       	pop	r17
    5452:	0f 91       	pop	r16
    if(!NeedSaveTrimmers || TimeToTrimmersSave > GetRunningTime())
        return;

    NeedSaveTrimmers = false;
    
    MODEL_Save_Trimmers();
    5454:	0c 94 ac 25 	jmp	0x4b58	; 0x4b58 <_Z19MODEL_Save_Trimmersv>
}
    5458:	1f 91       	pop	r17
    545a:	0f 91       	pop	r16
    545c:	08 95       	ret

0000545e <_Z19KeyboardDriver_Taskv>:
void KeyboardDriver_Task()
{
    uint8_t NewKbdStat = 0;
    static uint8_t OldKbdStat = 0;

    if(HB_UP)    NewKbdStat |= B_UP;
    545e:	80 b1       	in	r24, 0x00	; 0
    5460:	85 fb       	bst	r24, 5
    5462:	88 27       	eor	r24, r24
    5464:	80 f9       	bld	r24, 0
    5466:	91 e0       	ldi	r25, 0x01	; 1
    5468:	89 27       	eor	r24, r25
    if(HB_DOWN)  NewKbdStat |= B_DOWN;
    546a:	02 9b       	sbis	0x00, 2	; 0
    546c:	82 60       	ori	r24, 0x02	; 2
    if(HB_LEFT)  NewKbdStat |= B_LEFT;
    546e:	03 9b       	sbis	0x00, 3	; 0
    5470:	84 60       	ori	r24, 0x04	; 4
    if(HB_RIGHT) NewKbdStat |= B_RIGHT;
    5472:	00 9b       	sbis	0x00, 0	; 0
    5474:	88 60       	ori	r24, 0x08	; 8
    if(HB_BACK)  NewKbdStat |= B_BACK;
    5476:	04 9b       	sbis	0x00, 4	; 0
    5478:	80 61       	ori	r24, 0x10	; 16
    if(HB_ENTER) NewKbdStat |= B_ENTER;
    547a:	01 9b       	sbis	0x00, 1	; 0
    547c:	10 c0       	rjmp	.+32     	; 0x549e <_Z19KeyboardDriver_Taskv+0x40>
    547e:	07 9b       	sbis	0x00, 7	; 0
    5480:	0e c0       	rjmp	.+28     	; 0x549e <_Z19KeyboardDriver_Taskv+0x40>

    if(NewKbdStat != OldKbdStat)
    5482:	90 91 1c 0d 	lds	r25, 0x0D1C
    5486:	89 17       	cp	r24, r25
    5488:	19 f0       	breq	.+6      	; 0x5490 <_Z19KeyboardDriver_Taskv+0x32>
        OldKbdStat = NewKbdStat;
    548a:	80 93 1c 0d 	sts	0x0D1C, r24
    548e:	08 95       	ret
    else
    if(NewKbdStat != KbdStat)
    5490:	90 91 25 0d 	lds	r25, 0x0D25
    5494:	89 17       	cp	r24, r25
    5496:	29 f0       	breq	.+10     	; 0x54a2 <_Z19KeyboardDriver_Taskv+0x44>
        KbdStat = NewKbdStat;
    5498:	80 93 25 0d 	sts	0x0D25, r24
    549c:	08 95       	ret
    if(HB_UP)    NewKbdStat |= B_UP;
    if(HB_DOWN)  NewKbdStat |= B_DOWN;
    if(HB_LEFT)  NewKbdStat |= B_LEFT;
    if(HB_RIGHT) NewKbdStat |= B_RIGHT;
    if(HB_BACK)  NewKbdStat |= B_BACK;
    if(HB_ENTER) NewKbdStat |= B_ENTER;
    549e:	80 62       	ori	r24, 0x20	; 32
    54a0:	f0 cf       	rjmp	.-32     	; 0x5482 <_Z19KeyboardDriver_Taskv+0x24>
    54a2:	08 95       	ret

000054a4 <_Z16WaitEmptyButtonsj>:
}

// Delay in msec
void WaitEmptyButtons(uint16_t Delay)
{
    if(Delay == 0)
    54a4:	00 97       	sbiw	r24, 0x00	; 0
    54a6:	71 f4       	brne	.+28     	; 0x54c4 <_Z16WaitEmptyButtonsj+0x20>
    {
        while(KbdStat)
    54a8:	80 91 25 0d 	lds	r24, 0x0D25
    54ac:	81 11       	cpse	r24, r1
    54ae:	fc cf       	rjmp	.-8      	; 0x54a8 <_Z16WaitEmptyButtonsj+0x4>
    54b0:	08 95       	ret
    54b2:	ef e9       	ldi	r30, 0x9F	; 159
    54b4:	ff e0       	ldi	r31, 0x0F	; 15
    54b6:	31 97       	sbiw	r30, 0x01	; 1
    54b8:	f1 f7       	brne	.-4      	; 0x54b6 <_Z16WaitEmptyButtonsj+0x12>
    54ba:	00 c0       	rjmp	.+0      	; 0x54bc <_Z16WaitEmptyButtonsj+0x18>
    54bc:	00 00       	nop
    else
    {
        while(KbdStat)
        {
            _delay_ms(1);
            Delay--;
    54be:	01 97       	sbiw	r24, 0x01	; 1
            if(Delay == 0)
    54c0:	00 97       	sbiw	r24, 0x00	; 0
    54c2:	21 f0       	breq	.+8      	; 0x54cc <_Z16WaitEmptyButtonsj+0x28>
        while(KbdStat)
            ;
    }
    else
    {
        while(KbdStat)
    54c4:	20 91 25 0d 	lds	r18, 0x0D25
    54c8:	21 11       	cpse	r18, r1
    54ca:	f3 cf       	rjmp	.-26     	; 0x54b2 <_Z16WaitEmptyButtonsj+0xe>
    54cc:	08 95       	ret

000054ce <_Z15WaitButtonPressh>:

}

uint8_t WaitButtonPress(uint8_t mask)
{
    while(!(KbdStat & mask))
    54ce:	90 91 25 0d 	lds	r25, 0x0D25
    54d2:	98 23       	and	r25, r24
    54d4:	e1 f3       	breq	.-8      	; 0x54ce <_Z15WaitButtonPressh>
        ;
    
    return KbdStat;
    54d6:	80 91 25 0d 	lds	r24, 0x0D25
}
    54da:	08 95       	ret

000054dc <_Z10AskButtonsv>:

uint8_t AskButtons()
{
    return KbdStat;
    54dc:	80 91 25 0d 	lds	r24, 0x0D25
}
    54e0:	08 95       	ret

000054e2 <_Z10Timer_Taskh>:
    // Нужны для пищания при достижении таймером значения
    static uint8_t counter;
    static uint8_t precounter;

    // Подсчет значения таймера
    if(IsCountingFlag == ON)
    54e2:	90 91 20 0d 	lds	r25, 0x0D20
    54e6:	99 23       	and	r25, r25
    54e8:	09 f4       	brne	.+2      	; 0x54ec <_Z10Timer_Taskh+0xa>
    54ea:	57 c0       	rjmp	.+174    	; 0x559a <_Z10Timer_Taskh+0xb8>
    {
        // Увеличиваем временную переменную: количество пропущенных прерываний + текущее
        TimerSubValue += int16_t(MissedInterruptsCount) + 1;
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	01 96       	adiw	r24, 0x01	; 1
    54f0:	20 91 21 0d 	lds	r18, 0x0D21
    54f4:	30 91 22 0d 	lds	r19, 0x0D22
    54f8:	82 0f       	add	r24, r18
    54fa:	93 1f       	adc	r25, r19
    54fc:	40 91 99 09 	lds	r20, 0x0999

        // Если временная переменная больше 50(количество прерываний в секунду) - прошла 1 сек
        if(TimerSubValue >= TICKS_IN_SEC)
    5500:	82 33       	cpi	r24, 0x32	; 50
    5502:	91 05       	cpc	r25, r1
    5504:	2c f4       	brge	.+10     	; 0x5510 <_Z10Timer_Taskh+0x2e>

    // Подсчет значения таймера
    if(IsCountingFlag == ON)
    {
        // Увеличиваем временную переменную: количество пропущенных прерываний + текущее
        TimerSubValue += int16_t(MissedInterruptsCount) + 1;
    5506:	90 93 22 0d 	sts	0x0D22, r25
    550a:	80 93 21 0d 	sts	0x0D21, r24
    550e:	12 c0       	rjmp	.+36     	; 0x5534 <_Z10Timer_Taskh+0x52>

        // Если временная переменная больше 50(количество прерываний в секунду) - прошла 1 сек
        if(TimerSubValue >= TICKS_IN_SEC)
        {
            TimerSubValue -= TICKS_IN_SEC; // Отнимаем 50(количество прерываний в секунду) - 1 сек
    5510:	c2 97       	sbiw	r24, 0x32	; 50
    5512:	90 93 22 0d 	sts	0x0D22, r25
    5516:	80 93 21 0d 	sts	0x0D21, r24
    551a:	80 91 23 0d 	lds	r24, 0x0D23
    551e:	90 91 24 0d 	lds	r25, 0x0D24

            // Изменяем значение таймера, в зависимости от текущего режима
            if(CurModel.timer_mode & 0x02)
    5522:	41 ff       	sbrs	r20, 1
    5524:	02 c0       	rjmp	.+4      	; 0x552a <_Z10Timer_Taskh+0x48>
                TimerValue--; // Timer Mode DOWN
    5526:	01 97       	sbiw	r24, 0x01	; 1
    5528:	01 c0       	rjmp	.+2      	; 0x552c <_Z10Timer_Taskh+0x4a>
            else
                TimerValue++; // Timer Mode UP
    552a:	01 96       	adiw	r24, 0x01	; 1
    552c:	90 93 24 0d 	sts	0x0D24, r25
    5530:	80 93 23 0d 	sts	0x0D23, r24
        }

        // Если задан подсчет ВВЕРХ, значение таймера равно заданному, включен подсчет и заданное значение не равно 0
        if((CurModel.timer_mode & 0x01) && (TimerValue == CurModel.timer) && (IsCountingFlag == ON) && (TimerValue != 0))
    5534:	40 ff       	sbrs	r20, 0
    5536:	14 c0       	rjmp	.+40     	; 0x5560 <_Z10Timer_Taskh+0x7e>
    5538:	80 91 23 0d 	lds	r24, 0x0D23
    553c:	90 91 24 0d 	lds	r25, 0x0D24
    5540:	20 91 97 09 	lds	r18, 0x0997
    5544:	30 91 98 09 	lds	r19, 0x0998
    5548:	82 17       	cp	r24, r18
    554a:	93 07       	cpc	r25, r19
    554c:	49 f4       	brne	.+18     	; 0x5560 <_Z10Timer_Taskh+0x7e>
    554e:	89 2b       	or	r24, r25
    5550:	39 f0       	breq	.+14     	; 0x5560 <_Z10Timer_Taskh+0x7e>
        {
            // Включаем писк таймера
            bIsTimerSound = ON;
    5552:	81 e0       	ldi	r24, 0x01	; 1
    5554:	80 93 1f 0d 	sts	0x0D1F, r24

            // Эти переменные нужны для писка таймера
            counter = 0;
    5558:	10 92 1b 0d 	sts	0x0D1B, r1
            precounter = 0;
    555c:	10 92 1a 0d 	sts	0x0D1A, r1
        }

        // Если задан подсчет ВНИЗ, значение таймера равно 0 и включен подсчет
        if((CurModel.timer_mode & 0x02) && (TimerValue == 0) && (IsCountingFlag == ON))
    5560:	41 ff       	sbrs	r20, 1
    5562:	1b c0       	rjmp	.+54     	; 0x559a <_Z10Timer_Taskh+0xb8>
    5564:	80 91 23 0d 	lds	r24, 0x0D23
    5568:	90 91 24 0d 	lds	r25, 0x0D24
    556c:	89 2b       	or	r24, r25
    556e:	a9 f4       	brne	.+42     	; 0x559a <_Z10Timer_Taskh+0xb8>
        {
            // Останавливаем подсчет таймера
            IsCountingFlag = OFF;
    5570:	10 92 20 0d 	sts	0x0D20, r1
            // Сбрасываем значение таймера на первоначальное
            TimerValue = CurModel.timer;
    5574:	80 91 97 09 	lds	r24, 0x0997
    5578:	90 91 98 09 	lds	r25, 0x0998
    557c:	90 93 24 0d 	sts	0x0D24, r25
    5580:	80 93 23 0d 	sts	0x0D23, r24
            TimerSubValue = 0;
    5584:	10 92 22 0d 	sts	0x0D22, r1
    5588:	10 92 21 0d 	sts	0x0D21, r1

            // Включаем писк таймера
            bIsTimerSound = ON;
    558c:	81 e0       	ldi	r24, 0x01	; 1
    558e:	80 93 1f 0d 	sts	0x0D1F, r24

            // Эти переменные нужны для писка таймера
            counter = 0;
    5592:	10 92 1b 0d 	sts	0x0D1B, r1
            precounter = 0;
    5596:	10 92 1a 0d 	sts	0x0D1A, r1
        }
    }

    // Писк таймера
    if(bIsTimerSound == ON)
    559a:	80 91 1f 0d 	lds	r24, 0x0D1F
    559e:	88 23       	and	r24, r24
    55a0:	09 f1       	breq	.+66     	; 0x55e4 <_Z10Timer_Taskh+0x102>
    {
        if(precounter == 20 || precounter == 0)
    55a2:	80 91 1a 0d 	lds	r24, 0x0D1A
    55a6:	84 31       	cpi	r24, 0x14	; 20
    55a8:	11 f0       	breq	.+4      	; 0x55ae <_Z10Timer_Taskh+0xcc>
    55aa:	81 11       	cpse	r24, r1
    55ac:	10 c0       	rjmp	.+32     	; 0x55ce <_Z10Timer_Taskh+0xec>
        {
            precounter = 0;
    55ae:	10 92 1a 0d 	sts	0x0D1A, r1
            counter++;
    55b2:	80 91 1b 0d 	lds	r24, 0x0D1B
    55b6:	8f 5f       	subi	r24, 0xFF	; 255
    55b8:	80 93 1b 0d 	sts	0x0D1B, r24
            if(counter % 2 == 0)
    55bc:	80 fd       	sbrc	r24, 0
    55be:	03 c0       	rjmp	.+6      	; 0x55c6 <_Z10Timer_Taskh+0xe4>
                Tone(1000); // Включение пищалки
    55c0:	88 ee       	ldi	r24, 0xE8	; 232
    55c2:	93 e0       	ldi	r25, 0x03	; 3
    55c4:	02 c0       	rjmp	.+4      	; 0x55ca <_Z10Timer_Taskh+0xe8>
            else
                Tone(0);    // Выключение пищалки
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
        }
        if(counter == 25)
    55ce:	80 91 1b 0d 	lds	r24, 0x0D1B
    55d2:	89 31       	cpi	r24, 0x19	; 25
    55d4:	11 f4       	brne	.+4      	; 0x55da <_Z10Timer_Taskh+0xf8>
            bIsTimerSound = OFF;
    55d6:	10 92 1f 0d 	sts	0x0D1F, r1
        precounter++;
    55da:	80 91 1a 0d 	lds	r24, 0x0D1A
    55de:	8f 5f       	subi	r24, 0xFF	; 255
    55e0:	80 93 1a 0d 	sts	0x0D1A, r24
    55e4:	08 95       	ret

000055e6 <_Z13GetTimerValuev>:
}

int16_t GetTimerValue()
{
    return TimerValue;
}
    55e6:	80 91 23 0d 	lds	r24, 0x0D23
    55ea:	90 91 24 0d 	lds	r25, 0x0D24
    55ee:	08 95       	ret

000055f0 <_Z16GetTimerSubValuev>:
int16_t GetTimerSubValue()
{
    return TimerSubValue * TASK_TICK_TIME;
    55f0:	80 91 21 0d 	lds	r24, 0x0D21
    55f4:	90 91 22 0d 	lds	r25, 0x0D22
}
    55f8:	24 e1       	ldi	r18, 0x14	; 20
    55fa:	ac 01       	movw	r20, r24
    55fc:	24 9f       	mul	r18, r20
    55fe:	c0 01       	movw	r24, r0
    5600:	25 9f       	mul	r18, r21
    5602:	90 0d       	add	r25, r0
    5604:	11 24       	eor	r1, r1
    5606:	08 95       	ret

00005608 <_Z10Timer_Initv>:

void Timer_Init()
{
    // Устанавливаем начальное значение таймера в зависимости от режима
    if(CurModel.timer_mode & 0x02)
    5608:	80 91 99 09 	lds	r24, 0x0999
    560c:	81 ff       	sbrs	r24, 1
    560e:	09 c0       	rjmp	.+18     	; 0x5622 <_Z10Timer_Initv+0x1a>
        TimerValue = CurModel.timer; // Timer Mode DOWN
    5610:	80 91 97 09 	lds	r24, 0x0997
    5614:	90 91 98 09 	lds	r25, 0x0998
    5618:	90 93 24 0d 	sts	0x0D24, r25
    561c:	80 93 23 0d 	sts	0x0D23, r24
    5620:	04 c0       	rjmp	.+8      	; 0x562a <_Z10Timer_Initv+0x22>
    else
        TimerValue = 0;              // Timer Mode UP
    5622:	10 92 24 0d 	sts	0x0D24, r1
    5626:	10 92 23 0d 	sts	0x0D23, r1
    
    TimerSubValue = 0;
    562a:	10 92 22 0d 	sts	0x0D22, r1
    562e:	10 92 21 0d 	sts	0x0D21, r1

    IsCountingFlag = OFF;
    5632:	10 92 20 0d 	sts	0x0D20, r1
    bIsTimerSound  = OFF;
    5636:	10 92 1f 0d 	sts	0x0D1F, r1
    563a:	08 95       	ret

0000563c <_Z11Timer_Startv>:
}

void Timer_Start()
{
    IsCountingFlag = ON;
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	80 93 20 0d 	sts	0x0D20, r24
    5642:	08 95       	ret

00005644 <_Z10Timer_Stopv>:
}

void Timer_Stop()
{
    IsCountingFlag = OFF;
    5644:	10 92 20 0d 	sts	0x0D20, r1
    5648:	08 95       	ret

0000564a <_Z12IsTimerSoundv>:
}

bool IsTimerSound()
{
    return bIsTimerSound;
}
    564a:	80 91 1f 0d 	lds	r24, 0x0D1F
    564e:	08 95       	ret

00005650 <_Z15IsTimerSoundOffv>:

void IsTimerSoundOff()
{
    bIsTimerSound = OFF;
    5650:	10 92 1f 0d 	sts	0x0D1F, r1
    5654:	08 95       	ret

00005656 <_Z18BatteryDriver_Taskv>:
}

void BatteryDriver_Task()
{
    U_Bat = AD[ADC_BAT] * U_BAT_K;
    5656:	20 91 83 09 	lds	r18, 0x0983
    565a:	30 91 84 09 	lds	r19, 0x0984
    565e:	45 e0       	ldi	r20, 0x05	; 5
    5660:	42 9f       	mul	r20, r18
    5662:	c0 01       	movw	r24, r0
    5664:	43 9f       	mul	r20, r19
    5666:	90 0d       	add	r25, r0
    5668:	11 24       	eor	r1, r1
    566a:	90 93 1e 0d 	sts	0x0D1E, r25
    566e:	80 93 1d 0d 	sts	0x0D1D, r24
    5672:	08 95       	ret

00005674 <_Z16GetBatteryStatusv>:
}

int16_t GetBatteryStatus()
{
    return U_Bat;
    5674:	80 91 1d 0d 	lds	r24, 0x0D1D
    5678:	90 91 1e 0d 	lds	r25, 0x0D1E
    567c:	08 95       	ret

0000567e <_ZN7CStringC1EPKcR11FontProfile8ColorIdxh>:

//
// CString
//

CString::CString(const char* Str, FontProfile& Font, ColorIdx Color, uint8_t VSpace)
    567e:	0f 93       	push	r16
    5680:	fc 01       	movw	r30, r24
{
    m_Str     = Str;
    5682:	71 83       	std	Z+1, r23	; 0x01
    5684:	60 83       	st	Z, r22
    m_Len     = strlen(Str);
    5686:	db 01       	movw	r26, r22
    5688:	0d 90       	ld	r0, X+
    568a:	00 20       	and	r0, r0
    568c:	e9 f7       	brne	.-6      	; 0x5688 <_ZN7CStringC1EPKcR11FontProfile8ColorIdxh+0xa>
    568e:	11 97       	sbiw	r26, 0x01	; 1
    5690:	a6 1b       	sub	r26, r22
    5692:	b7 0b       	sbc	r27, r23
    5694:	a2 83       	std	Z+2, r26	; 0x02
    m_StrFont = &Font;
    5696:	54 83       	std	Z+4, r21	; 0x04
    5698:	43 83       	std	Z+3, r20	; 0x03
    m_Color   = Color;
    569a:	36 83       	std	Z+6, r19	; 0x06
    569c:	25 83       	std	Z+5, r18	; 0x05
    m_VSpace  = VSpace;
    569e:	07 83       	std	Z+7, r16	; 0x07
}
    56a0:	0f 91       	pop	r16
    56a2:	08 95       	ret

000056a4 <_ZN5CMenuC1EPKcPKNS_4ItemEhRK11FontProfile>:
// CMenu
//

const uint8_t CMenu::ScrollBarWidth = 3;

CMenu::CMenu(const char* Caption, const Item* Items, const uint8_t ItemsCount, const FontProfile& ItemFont):
    56a4:	0f 93       	push	r16
    56a6:	1f 93       	push	r17
    56a8:	fc 01       	movw	r30, r24
    m_Caption(Caption),
    m_Items(Items),
    m_ItemsCount(ItemsCount),
    m_ItemFont(ItemFont),
    m_CurrentPos(0)
    56aa:	71 83       	std	Z+1, r23	; 0x01
    56ac:	60 83       	st	Z, r22
    56ae:	53 83       	std	Z+3, r21	; 0x03
    56b0:	42 83       	std	Z+2, r20	; 0x02
    56b2:	24 83       	std	Z+4, r18	; 0x04
    56b4:	16 83       	std	Z+6, r17	; 0x06
    56b6:	05 83       	std	Z+5, r16	; 0x05
    56b8:	17 82       	std	Z+7, r1	; 0x07
{
}
    56ba:	1f 91       	pop	r17
    56bc:	0f 91       	pop	r16
    56be:	08 95       	ret

000056c0 <_ZNK5CMenu16GetCaptionHeightEv>:

const uint8_t CMenu::GetCaptionHeight() const
{
    return Font_8x12.H;
}
    56c0:	80 91 c5 0c 	lds	r24, 0x0CC5
    56c4:	08 95       	ret

000056c6 <_ZNK5CMenu13GetItemsCountEv>:
uint8_t CMenu::GetItemsCount() const
{
    return m_ItemsCount;
}
    56c6:	fc 01       	movw	r30, r24
    56c8:	84 81       	ldd	r24, Z+4	; 0x04
    56ca:	08 95       	ret

000056cc <_ZNK5CMenu7GetItemEh>:
const CMenu::Item* CMenu::GetItem(const uint8_t _ItemIdx) const
{
    return &m_Items[_ItemIdx];
    56cc:	fc 01       	movw	r30, r24
    56ce:	82 81       	ldd	r24, Z+2	; 0x02
    56d0:	93 81       	ldd	r25, Z+3	; 0x03
}
    56d2:	f7 e0       	ldi	r31, 0x07	; 7
    56d4:	6f 9f       	mul	r22, r31
    56d6:	80 0d       	add	r24, r0
    56d8:	91 1d       	adc	r25, r1
    56da:	11 24       	eor	r1, r1
    56dc:	08 95       	ret

000056de <_ZNK5CMenu11GetItemFontEv>:

const FontProfile& CMenu::GetItemFont() const
{
    return m_ItemFont;
}
    56de:	fc 01       	movw	r30, r24
    56e0:	85 81       	ldd	r24, Z+5	; 0x05
    56e2:	96 81       	ldd	r25, Z+6	; 0x06
    56e4:	08 95       	ret

000056e6 <_ZNK5CMenu13GetCurrentPosEv>:

uint8_t CMenu::GetCurrentPos() const
{
    return m_CurrentPos;
}
    56e6:	fc 01       	movw	r30, r24
    56e8:	87 81       	ldd	r24, Z+7	; 0x07
    56ea:	08 95       	ret

000056ec <_ZN5CMenu13SetCurrentPosEh>:
void CMenu::SetCurrentPos(uint8_t CurrentPos)
{
    m_CurrentPos = CurrentPos;
    56ec:	fc 01       	movw	r30, r24
    56ee:	67 83       	std	Z+7, r22	; 0x07
    56f0:	08 95       	ret

000056f2 <_ZNK5CMenu13DrawStatusBarEv>:
    
    gfx_Refresh();
}

void CMenu::DrawStatusBar() const
{
    56f2:	ef 92       	push	r14
    56f4:	ff 92       	push	r15
    56f6:	0f 93       	push	r16
    56f8:	1f 93       	push	r17
    56fa:	cf 93       	push	r28
    56fc:	df 93       	push	r29
    const FontProfile& Font = GetStatusBarFont();
    static char str[10];

    gfx_FillRectangle(0, 0, TFT_ScreenWidth - 1, Font.H, COLOR_BACKG);
    56fe:	00 e0       	ldi	r16, 0x00	; 0
    5700:	10 e0       	ldi	r17, 0x00	; 0
    5702:	20 91 cb 0c 	lds	r18, 0x0CCB
    5706:	4f e9       	ldi	r20, 0x9F	; 159
    5708:	60 e0       	ldi	r22, 0x00	; 0
    570a:	80 e0       	ldi	r24, 0x00	; 0
    570c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>

    // Номер модели
    sprintf(str, "%d", Settings.ModelNum + 1);
    5710:	80 91 81 0c 	lds	r24, 0x0C81
    5714:	99 27       	eor	r25, r25
    5716:	87 fd       	sbrc	r24, 7
    5718:	90 95       	com	r25
    571a:	01 96       	adiw	r24, 0x01	; 1
    571c:	9f 93       	push	r25
    571e:	8f 93       	push	r24
    5720:	88 e6       	ldi	r24, 0x68	; 104
    5722:	98 e0       	ldi	r25, 0x08	; 8
    5724:	9f 93       	push	r25
    5726:	8f 93       	push	r24
    5728:	cb e2       	ldi	r28, 0x2B	; 43
    572a:	dd e0       	ldi	r29, 0x0D	; 13
    572c:	df 93       	push	r29
    572e:	cf 93       	push	r28
    5730:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    gfx_PrintString(0, 0, str, COLOR_FRONT, Font);
    5734:	e1 2c       	mov	r14, r1
    5736:	f1 2c       	mov	r15, r1
    5738:	0a ec       	ldi	r16, 0xCA	; 202
    573a:	1c e0       	ldi	r17, 0x0C	; 12
    573c:	21 e0       	ldi	r18, 0x01	; 1
    573e:	30 e0       	ldi	r19, 0x00	; 0
    5740:	ae 01       	movw	r20, r28
    5742:	60 e0       	ldi	r22, 0x00	; 0
    5744:	80 e0       	ldi	r24, 0x00	; 0
    5746:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    
    if(CurModel.type == TYPE_HELI)
    574a:	80 91 94 09 	lds	r24, 0x0994
    574e:	0f 90       	pop	r0
    5750:	0f 90       	pop	r0
    5752:	0f 90       	pop	r0
    5754:	0f 90       	pop	r0
    5756:	0f 90       	pop	r0
    5758:	0f 90       	pop	r0
    575a:	81 30       	cpi	r24, 0x01	; 1
    575c:	01 f5       	brne	.+64     	; 0x579e <_ZNK5CMenu13DrawStatusBarEv+0xac>
    {
        sprintf(str, "%c%c", 125, 126); // Значек верта
    575e:	1f 92       	push	r1
    5760:	8e e7       	ldi	r24, 0x7E	; 126
    5762:	8f 93       	push	r24
    5764:	1f 92       	push	r1
    5766:	8d e7       	ldi	r24, 0x7D	; 125
    5768:	8f 93       	push	r24
    576a:	8e e0       	ldi	r24, 0x0E	; 14
    576c:	97 e0       	ldi	r25, 0x07	; 7
    576e:	9f 93       	push	r25
    5770:	8f 93       	push	r24
    5772:	df 93       	push	r29
    5774:	cf 93       	push	r28
    5776:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
        gfx_PrintString(Font.W * 2, 0, str, COLOR_FRONT, Font);
    577a:	80 91 ca 0c 	lds	r24, 0x0CCA
    577e:	21 e0       	ldi	r18, 0x01	; 1
    5780:	30 e0       	ldi	r19, 0x00	; 0
    5782:	ae 01       	movw	r20, r28
    5784:	60 e0       	ldi	r22, 0x00	; 0
    5786:	88 0f       	add	r24, r24
    5788:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    578c:	8d b7       	in	r24, 0x3d	; 61
    578e:	9e b7       	in	r25, 0x3e	; 62
    5790:	08 96       	adiw	r24, 0x08	; 8
    5792:	0f b6       	in	r0, 0x3f	; 63
    5794:	f8 94       	cli
    5796:	9e bf       	out	0x3e, r25	; 62
    5798:	0f be       	out	0x3f, r0	; 63
    579a:	8d bf       	out	0x3d, r24	; 61
    579c:	26 c0       	rjmp	.+76     	; 0x57ea <_ZNK5CMenu13DrawStatusBarEv+0xf8>
    }
    else
    if(CurModel.type == TYPE_PLANE)
    579e:	81 11       	cpse	r24, r1
    57a0:	24 c0       	rjmp	.+72     	; 0x57ea <_ZNK5CMenu13DrawStatusBarEv+0xf8>
    {
        sprintf(str, "%c%c", 127, 128); // Значек самолета
    57a2:	1f 92       	push	r1
    57a4:	80 e8       	ldi	r24, 0x80	; 128
    57a6:	8f 93       	push	r24
    57a8:	1f 92       	push	r1
    57aa:	8f e7       	ldi	r24, 0x7F	; 127
    57ac:	8f 93       	push	r24
    57ae:	8e e0       	ldi	r24, 0x0E	; 14
    57b0:	97 e0       	ldi	r25, 0x07	; 7
    57b2:	9f 93       	push	r25
    57b4:	8f 93       	push	r24
    57b6:	df 93       	push	r29
    57b8:	cf 93       	push	r28
    57ba:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
        gfx_PrintString(Font.W * 2, 0, str, COLOR_FRONT, Font);
    57be:	80 91 ca 0c 	lds	r24, 0x0CCA
    57c2:	e1 2c       	mov	r14, r1
    57c4:	f1 2c       	mov	r15, r1
    57c6:	0a ec       	ldi	r16, 0xCA	; 202
    57c8:	1c e0       	ldi	r17, 0x0C	; 12
    57ca:	21 e0       	ldi	r18, 0x01	; 1
    57cc:	30 e0       	ldi	r19, 0x00	; 0
    57ce:	4b e2       	ldi	r20, 0x2B	; 43
    57d0:	5d e0       	ldi	r21, 0x0D	; 13
    57d2:	60 e0       	ldi	r22, 0x00	; 0
    57d4:	88 0f       	add	r24, r24
    57d6:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    57da:	8d b7       	in	r24, 0x3d	; 61
    57dc:	9e b7       	in	r25, 0x3e	; 62
    57de:	08 96       	adiw	r24, 0x08	; 8
    57e0:	0f b6       	in	r0, 0x3f	; 63
    57e2:	f8 94       	cli
    57e4:	9e bf       	out	0x3e, r25	; 62
    57e6:	0f be       	out	0x3f, r0	; 63
    57e8:	8d bf       	out	0x3d, r24	; 61
    }
    
    gfx_PrintString(TFT_ScreenWidth / 2, 0, CurModel.name, COLOR_FRONT, Font, ALIGN_CENTER);
    57ea:	ee 24       	eor	r14, r14
    57ec:	e3 94       	inc	r14
    57ee:	f1 2c       	mov	r15, r1
    57f0:	0a ec       	ldi	r16, 0xCA	; 202
    57f2:	1c e0       	ldi	r17, 0x0C	; 12
    57f4:	21 e0       	ldi	r18, 0x01	; 1
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	47 e8       	ldi	r20, 0x87	; 135
    57fa:	59 e0       	ldi	r21, 0x09	; 9
    57fc:	60 e0       	ldi	r22, 0x00	; 0
    57fe:	80 e5       	ldi	r24, 0x50	; 80
    5800:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>

    // Название режима
    gfx_PrintString(TFT_ScreenWidth, 0, CurModel.Mode[FLY_MODE].name, COLOR_FRONT, Font_6x8, ALIGN_RIGHT);
    5804:	40 91 68 09 	lds	r20, 0x0968
    5808:	26 ef       	ldi	r18, 0xF6	; 246
    580a:	42 03       	mulsu	r20, r18
    580c:	a0 01       	movw	r20, r0
    580e:	11 24       	eor	r1, r1
    5810:	45 56       	subi	r20, 0x65	; 101
    5812:	56 4f       	sbci	r21, 0xF6	; 246
    5814:	92 e0       	ldi	r25, 0x02	; 2
    5816:	e9 2e       	mov	r14, r25
    5818:	f1 2c       	mov	r15, r1
    581a:	00 ed       	ldi	r16, 0xD0	; 208
    581c:	1c e0       	ldi	r17, 0x0C	; 12
    581e:	21 e0       	ldi	r18, 0x01	; 1
    5820:	30 e0       	ldi	r19, 0x00	; 0
    5822:	60 e0       	ldi	r22, 0x00	; 0
    5824:	80 ea       	ldi	r24, 0xA0	; 160
    5826:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
}
    582a:	df 91       	pop	r29
    582c:	cf 91       	pop	r28
    582e:	1f 91       	pop	r17
    5830:	0f 91       	pop	r16
    5832:	ff 90       	pop	r15
    5834:	ef 90       	pop	r14
    5836:	08 95       	ret

00005838 <_ZNK5CMenu10DrawHeaderEv>:

void CMenu::DrawHeader() const
{
    5838:	ef 92       	push	r14
    583a:	ff 92       	push	r15
    583c:	0f 93       	push	r16
    583e:	1f 93       	push	r17
    5840:	cf 93       	push	r28
    5842:	df 93       	push	r29
    5844:	7c 01       	movw	r14, r24
{
    return Font_8x8;
}
inline uint8_t CMenu::GetStatusBarHeight() const
{
    return GetStatusBarFont().H;
    5846:	cb ec       	ldi	r28, 0xCB	; 203
    5848:	dc e0       	ldi	r29, 0x0C	; 12
    584a:	68 81       	ld	r22, Y

void CMenu::DrawHeader() const
{
    const FontProfile & Font = Font_8x12;

    gfx_FillRectangle(0, GetStatusBarHeight(), TFT_ScreenWidth - 1, GetStatusBarHeight() + Font.H, COLOR_FRONT);
    584c:	20 91 c5 0c 	lds	r18, 0x0CC5
    5850:	26 0f       	add	r18, r22
    5852:	01 e0       	ldi	r16, 0x01	; 1
    5854:	10 e0       	ldi	r17, 0x00	; 0
    5856:	4f e9       	ldi	r20, 0x9F	; 159
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
    gfx_PrintString(TFT_ScreenWidth / 2, GetStatusBarHeight(), m_Caption, COLOR_BACKG, Font, ALIGN_CENTER);
    585e:	f7 01       	movw	r30, r14
    5860:	40 81       	ld	r20, Z
    5862:	51 81       	ldd	r21, Z+1	; 0x01
    5864:	ee 24       	eor	r14, r14
    5866:	e3 94       	inc	r14
    5868:	f1 2c       	mov	r15, r1
    586a:	04 ec       	ldi	r16, 0xC4	; 196
    586c:	1c e0       	ldi	r17, 0x0C	; 12
    586e:	20 e0       	ldi	r18, 0x00	; 0
    5870:	30 e0       	ldi	r19, 0x00	; 0
    5872:	68 81       	ld	r22, Y
    5874:	80 e5       	ldi	r24, 0x50	; 80
    5876:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
}
    587a:	df 91       	pop	r29
    587c:	cf 91       	pop	r28
    587e:	1f 91       	pop	r17
    5880:	0f 91       	pop	r16
    5882:	ff 90       	pop	r15
    5884:	ef 90       	pop	r14
    5886:	08 95       	ret

00005888 <_ZNK5CMenu13DrawScrollBarEv>:

void CMenu::DrawScrollBar() const
{
    5888:	ef 92       	push	r14
    588a:	ff 92       	push	r15
    588c:	0f 93       	push	r16
    588e:	1f 93       	push	r17
    5890:	cf 93       	push	r28
    5892:	df 93       	push	r29
    5894:	ec 01       	movw	r28, r24
    return GetStatusBarFont().H;
}

inline uint8_t CMenu::GetHeaderHeight() const
{
    return GetStatusBarHeight() + GetCaptionHeight();
    5896:	00 91 c5 0c 	lds	r16, 0x0CC5
    589a:	80 91 cb 0c 	lds	r24, 0x0CCB
    589e:	08 0f       	add	r16, r24
}

void CMenu::DrawScrollBar() const
{
    const uint8_t HeaderHeight     = GetHeaderHeight();
    const uint8_t ScrollAreaHeight = TFT_ScreenHeight - (HeaderHeight + 2 + 2);
    58a0:	1c e7       	ldi	r17, 0x7C	; 124
    58a2:	10 1b       	sub	r17, r16

    // Высота индикатора полосы прокрутки:
    // (количество отображаемых пунктов меню * количество доступных точек) / количество пунктов меню
    uint8_t ScrollBarHeight = (uint16_t(GetMenuVisibleCount()) * ScrollAreaHeight) / GetItemsCount();
    58a4:	ce 01       	movw	r24, r28
    58a6:	0e 94 ae 47 	call	0x8f5c	; 0x8f5c <_ZNK5CMenu19GetMenuVisibleCountEv>
{
    return Font_8x12.H;
}
uint8_t CMenu::GetItemsCount() const
{
    return m_ItemsCount;
    58aa:	ec 81       	ldd	r30, Y+4	; 0x04
    const uint8_t HeaderHeight     = GetHeaderHeight();
    const uint8_t ScrollAreaHeight = TFT_ScreenHeight - (HeaderHeight + 2 + 2);

    // Высота индикатора полосы прокрутки:
    // (количество отображаемых пунктов меню * количество доступных точек) / количество пунктов меню
    uint8_t ScrollBarHeight = (uint16_t(GetMenuVisibleCount()) * ScrollAreaHeight) / GetItemsCount();
    58ac:	81 9f       	mul	r24, r17
    58ae:	c0 01       	movw	r24, r0
    58b0:	11 24       	eor	r1, r1
    58b2:	f0 e0       	ldi	r31, 0x00	; 0
    58b4:	bf 01       	movw	r22, r30
    58b6:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    // Если размер индикатора больше половины полосы прокрутки - приравниваем к половине
    if(ScrollBarHeight > ScrollAreaHeight / 2)
    58ba:	81 2f       	mov	r24, r17
    58bc:	86 95       	lsr	r24
    58be:	f6 2e       	mov	r15, r22
    58c0:	86 17       	cp	r24, r22
    58c2:	08 f4       	brcc	.+2      	; 0x58c6 <_ZNK5CMenu13DrawScrollBarEv+0x3e>
    58c4:	f8 2e       	mov	r15, r24
    return m_ItemFont;
}

uint8_t CMenu::GetCurrentPos() const
{
    return m_CurrentPos;
    58c6:	af 81       	ldd	r26, Y+7	; 0x07
    // Если размер индикатора больше половины полосы прокрутки - приравниваем к половине
    if(ScrollBarHeight > ScrollAreaHeight / 2)
         ScrollBarHeight = ScrollAreaHeight / 2;

    // высота заголовка меню + (текущяя позицию в меню * количество доступных точек для индикатора) / количество пунктов меню
    uint8_t ScrollBarStart = HeaderHeight + 2 + (GetCurrentPos() * uint16_t(ScrollAreaHeight - ScrollBarHeight)) / (GetItemsCount() - 1);
    58c8:	bf 01       	movw	r22, r30
    58ca:	61 50       	subi	r22, 0x01	; 1
    58cc:	71 09       	sbc	r23, r1
    58ce:	d2 e0       	ldi	r29, 0x02	; 2
    58d0:	d0 0f       	add	r29, r16
    if(GetCurrentPos() == GetItemsCount() - 1)
    58d2:	b0 e0       	ldi	r27, 0x00	; 0
    58d4:	a6 17       	cp	r26, r22
    58d6:	b7 07       	cpc	r27, r23
    58d8:	81 f0       	breq	.+32     	; 0x58fa <_ZNK5CMenu13DrawScrollBarEv+0x72>
    // Если размер индикатора больше половины полосы прокрутки - приравниваем к половине
    if(ScrollBarHeight > ScrollAreaHeight / 2)
         ScrollBarHeight = ScrollAreaHeight / 2;

    // высота заголовка меню + (текущяя позицию в меню * количество доступных точек для индикатора) / количество пунктов меню
    uint8_t ScrollBarStart = HeaderHeight + 2 + (GetCurrentPos() * uint16_t(ScrollAreaHeight - ScrollBarHeight)) / (GetItemsCount() - 1);
    58da:	41 2f       	mov	r20, r17
    58dc:	50 e0       	ldi	r21, 0x00	; 0
    58de:	4f 19       	sub	r20, r15
    58e0:	51 09       	sbc	r21, r1
    58e2:	4a 9f       	mul	r20, r26
    58e4:	c0 01       	movw	r24, r0
    58e6:	4b 9f       	mul	r20, r27
    58e8:	90 0d       	add	r25, r0
    58ea:	5a 9f       	mul	r21, r26
    58ec:	90 0d       	add	r25, r0
    58ee:	11 24       	eor	r1, r1
    58f0:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    58f4:	cd 2f       	mov	r28, r29
    58f6:	c6 0f       	add	r28, r22
    58f8:	02 c0       	rjmp	.+4      	; 0x58fe <_ZNK5CMenu13DrawScrollBarEv+0x76>
    if(GetCurrentPos() == GetItemsCount() - 1)
    {
        // Если выбран последний пункт меню устанавливаем индикатор в самый низ, т.к. при подсчете может потерятся точность и появится дырка
        ScrollBarStart = ScrollAreaHeight - ScrollBarHeight + HeaderHeight + 2;
    58fa:	ce e7       	ldi	r28, 0x7E	; 126
    58fc:	cf 19       	sub	r28, r15
    }

    gfx_FillRectangle(0, HeaderHeight + 2, ScrollBarWidth - 1, TFT_ScreenHeight - 1,             COLOR_FRONT); // Очищаем место под полосу прокрутки
    58fe:	01 e0       	ldi	r16, 0x01	; 1
    5900:	10 e0       	ldi	r17, 0x00	; 0
    5902:	2f e7       	ldi	r18, 0x7F	; 127
    5904:	42 e0       	ldi	r20, 0x02	; 2
    5906:	6d 2f       	mov	r22, r29
    5908:	80 e0       	ldi	r24, 0x00	; 0
    590a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
    gfx_DrawRectangle(0, HeaderHeight + 2, ScrollBarWidth - 1, TFT_ScreenHeight - 1,             COLOR_BACKG); // Отрисовываем полосу прокрутки
    590e:	e1 2c       	mov	r14, r1
    5910:	00 e0       	ldi	r16, 0x00	; 0
    5912:	10 e0       	ldi	r17, 0x00	; 0
    5914:	2f e7       	ldi	r18, 0x7F	; 127
    5916:	42 e0       	ldi	r20, 0x02	; 2
    5918:	6d 2f       	mov	r22, r29
    591a:	80 e0       	ldi	r24, 0x00	; 0
    591c:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
    gfx_FillRectangle(0, ScrollBarStart,   ScrollBarWidth - 1, ScrollBarStart + ScrollBarHeight, COLOR_FRONT); // Отрисовываем индикатор полосы прокрутки
    5920:	2c 2f       	mov	r18, r28
    5922:	2f 0d       	add	r18, r15
    5924:	01 e0       	ldi	r16, 0x01	; 1
    5926:	10 e0       	ldi	r17, 0x00	; 0
    5928:	42 e0       	ldi	r20, 0x02	; 2
    592a:	6c 2f       	mov	r22, r28
    592c:	80 e0       	ldi	r24, 0x00	; 0
    592e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
}
    5932:	df 91       	pop	r29
    5934:	cf 91       	pop	r28
    5936:	1f 91       	pop	r17
    5938:	0f 91       	pop	r16
    593a:	ff 90       	pop	r15
    593c:	ef 90       	pop	r14
    593e:	08 95       	ret

00005940 <_ZNK5CMenu8DrawMenuEh>:
    // Ждем отпускания кнопок
    WaitEmptyButtons();
}

void CMenu::DrawMenu(const uint8_t StartPos) const
{
    5940:	4f 92       	push	r4
    5942:	5f 92       	push	r5
    5944:	6f 92       	push	r6
    5946:	7f 92       	push	r7
    5948:	8f 92       	push	r8
    594a:	9f 92       	push	r9
    594c:	af 92       	push	r10
    594e:	bf 92       	push	r11
    5950:	cf 92       	push	r12
    5952:	df 92       	push	r13
    5954:	ef 92       	push	r14
    5956:	ff 92       	push	r15
    5958:	0f 93       	push	r16
    595a:	1f 93       	push	r17
    595c:	cf 93       	push	r28
    595e:	df 93       	push	r29
    5960:	cd b7       	in	r28, 0x3d	; 61
    5962:	de b7       	in	r29, 0x3e	; 62
    5964:	a0 97       	sbiw	r28, 0x20	; 32
    5966:	0f b6       	in	r0, 0x3f	; 63
    5968:	f8 94       	cli
    596a:	de bf       	out	0x3e, r29	; 62
    596c:	0f be       	out	0x3f, r0	; 63
    596e:	cd bf       	out	0x3d, r28	; 61
    5970:	6c 01       	movw	r12, r24
    5972:	46 2e       	mov	r4, r22
    gfx_ClearBuf();
    5974:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z12gfx_ClearBufv>

    DrawHeader();
    5978:	c6 01       	movw	r24, r12
    597a:	0e 94 1c 2c 	call	0x5838	; 0x5838 <_ZNK5CMenu10DrawHeaderEv>

    DrawStatusBar();
    597e:	c6 01       	movw	r24, r12
    5980:	0e 94 79 2b 	call	0x56f2	; 0x56f2 <_ZNK5CMenu13DrawStatusBarEv>
    DrawScrollBar();
    5984:	c6 01       	movw	r24, r12
    5986:	0e 94 44 2c 	call	0x5888	; 0x5888 <_ZNK5CMenu13DrawScrollBarEv>

    // Draw items
    for(uint8_t i = StartPos; i < StartPos + GetMenuVisibleCount(); ++i)
    598a:	64 2c       	mov	r6, r4
    598c:	71 2c       	mov	r7, r1
    598e:	84 2c       	mov	r8, r4
    5990:	91 2c       	mov	r9, r1
    5992:	c6 01       	movw	r24, r12
    5994:	0e 94 ae 47 	call	0x8f5c	; 0x8f5c <_ZNK5CMenu19GetMenuVisibleCountEv>
    5998:	93 01       	movw	r18, r6
    599a:	28 0f       	add	r18, r24
    599c:	31 1d       	adc	r19, r1
    599e:	82 16       	cp	r8, r18
    59a0:	93 06       	cpc	r9, r19
    59a2:	0c f0       	brlt	.+2      	; 0x59a6 <_ZNK5CMenu8DrawMenuEh+0x66>
    59a4:	65 c0       	rjmp	.+202    	; 0x5a70 <_ZNK5CMenu8DrawMenuEh+0x130>
{
    return m_ItemsCount;
}
const CMenu::Item* CMenu::GetItem(const uint8_t _ItemIdx) const
{
    return &m_Items[_ItemIdx];
    59a6:	d6 01       	movw	r26, r12
    59a8:	12 96       	adiw	r26, 0x02	; 2
    59aa:	ad 90       	ld	r10, X+
    59ac:	bc 90       	ld	r11, X
    59ae:	13 97       	sbiw	r26, 0x03	; 3
    59b0:	b7 e0       	ldi	r27, 0x07	; 7
    59b2:	4b 9e       	mul	r4, r27
    59b4:	a0 0c       	add	r10, r0
    59b6:	b1 1c       	adc	r11, r1
    59b8:	11 24       	eor	r1, r1
    for(uint8_t i = StartPos; i < StartPos + GetMenuVisibleCount(); ++i)
    {
        const Item*    item  = GetItem(i);
        const uint8_t  x1    = ScrollBarWidth + 2;
        const uint8_t  x2    = TFT_ScreenWidth - 2;
        const uint8_t  y     = GetHeaderHeight() + 2 + GetItemFont().H * (i - StartPos);
    59ba:	d6 01       	movw	r26, r12
    59bc:	15 96       	adiw	r26, 0x05	; 5
    59be:	ed 91       	ld	r30, X+
    59c0:	fc 91       	ld	r31, X
    59c2:	16 97       	sbiw	r26, 0x06	; 6
    59c4:	21 81       	ldd	r18, Z+1	; 0x01
    return GetStatusBarFont().H;
}

inline uint8_t CMenu::GetHeaderHeight() const
{
    return GetStatusBarHeight() + GetCaptionHeight();
    59c6:	50 90 cb 0c 	lds	r5, 0x0CCB
    59ca:	80 91 c5 0c 	lds	r24, 0x0CC5
    59ce:	58 0e       	add	r5, r24
    for(uint8_t i = StartPos; i < StartPos + GetMenuVisibleCount(); ++i)
    {
        const Item*    item  = GetItem(i);
        const uint8_t  x1    = ScrollBarWidth + 2;
        const uint8_t  x2    = TFT_ScreenWidth - 2;
        const uint8_t  y     = GetHeaderHeight() + 2 + GetItemFont().H * (i - StartPos);
    59d0:	53 94       	inc	r5
    59d2:	53 94       	inc	r5
    59d4:	86 18       	sub	r8, r6
    59d6:	97 08       	sbc	r9, r7
    59d8:	28 9d       	mul	r18, r8
    59da:	50 0c       	add	r5, r0
    59dc:	11 24       	eor	r1, r1
    return m_ItemFont;
}

uint8_t CMenu::GetCurrentPos() const
{
    return m_CurrentPos;
    59de:	17 96       	adiw	r26, 0x07	; 7
    59e0:	8c 91       	ld	r24, X
    {
        const Item*    item  = GetItem(i);
        const uint8_t  x1    = ScrollBarWidth + 2;
        const uint8_t  x2    = TFT_ScreenWidth - 2;
        const uint8_t  y     = GetHeaderHeight() + 2 + GetItemFont().H * (i - StartPos);
        const ColorIdx Color = (GetCurrentPos() == i) ? COLOR_BACKG : COLOR_FRONT;
    59e2:	88 24       	eor	r8, r8
    59e4:	83 94       	inc	r8
    59e6:	91 2c       	mov	r9, r1
    59e8:	84 11       	cpse	r24, r4
    59ea:	02 c0       	rjmp	.+4      	; 0x59f0 <_ZNK5CMenu8DrawMenuEh+0xb0>
    59ec:	81 2c       	mov	r8, r1
    59ee:	91 2c       	mov	r9, r1

        if (GetCurrentPos() == i)
    59f0:	84 11       	cpse	r24, r4
    59f2:	11 c0       	rjmp	.+34     	; 0x5a16 <_ZNK5CMenu8DrawMenuEh+0xd6>
        {
            gfx_FillRectangle(x1, y, x2, y + GetItemFont().H, COLOR_FRONT);
    59f4:	25 0d       	add	r18, r5
    59f6:	01 e0       	ldi	r16, 0x01	; 1
    59f8:	10 e0       	ldi	r17, 0x00	; 0
    59fa:	4e e9       	ldi	r20, 0x9E	; 158
    59fc:	65 2d       	mov	r22, r5
    59fe:	85 e0       	ldi	r24, 0x05	; 5
    5a00:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
            gfx_PrintChar(x1, y, '>', Color, GetItemFont());
    5a04:	f6 01       	movw	r30, r12
    5a06:	05 81       	ldd	r16, Z+5	; 0x05
    5a08:	16 81       	ldd	r17, Z+6	; 0x06
    5a0a:	94 01       	movw	r18, r8
    5a0c:	4e e3       	ldi	r20, 0x3E	; 62
    5a0e:	65 2d       	mov	r22, r5
    5a10:	85 e0       	ldi	r24, 0x05	; 5
    5a12:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
    return &m_Items[_ItemIdx];
}

const FontProfile& CMenu::GetItemFont() const
{
    return m_ItemFont;
    5a16:	d6 01       	movw	r26, r12
    5a18:	15 96       	adiw	r26, 0x05	; 5
    5a1a:	0d 91       	ld	r16, X+
    5a1c:	1c 91       	ld	r17, X
    5a1e:	16 97       	sbiw	r26, 0x06	; 6
        {
            gfx_FillRectangle(x1, y, x2, y + GetItemFont().H, COLOR_FRONT);
            gfx_PrintChar(x1, y, '>', Color, GetItemFont());
        }
        
        gfx_PrintString(GetItemFont().W + x1, y, item->Name, Color, GetItemFont(), ALIGN_LEFT);
    5a20:	f5 01       	movw	r30, r10
    5a22:	40 81       	ld	r20, Z
    5a24:	51 81       	ldd	r21, Z+1	; 0x01
    5a26:	d8 01       	movw	r26, r16
    5a28:	8c 91       	ld	r24, X
    5a2a:	e1 2c       	mov	r14, r1
    5a2c:	f1 2c       	mov	r15, r1
    5a2e:	94 01       	movw	r18, r8
    5a30:	65 2d       	mov	r22, r5
    5a32:	8b 5f       	subi	r24, 0xFB	; 251
    5a34:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
        if(item->GetInfo != NULL)
    5a38:	d5 01       	movw	r26, r10
    5a3a:	14 96       	adiw	r26, 0x04	; 4
    5a3c:	ed 91       	ld	r30, X+
    5a3e:	fc 91       	ld	r31, X
    5a40:	15 97       	sbiw	r26, 0x05	; 5
    5a42:	30 97       	sbiw	r30, 0x00	; 0
    5a44:	99 f0       	breq	.+38     	; 0x5a6c <_ZNK5CMenu8DrawMenuEh+0x12c>
        {
            char buf[32];
            item->GetInfo(buf, item->AddParam);
    5a46:	16 96       	adiw	r26, 0x06	; 6
    5a48:	6c 91       	ld	r22, X
    5a4a:	ce 01       	movw	r24, r28
    5a4c:	01 96       	adiw	r24, 0x01	; 1
    5a4e:	19 95       	eicall

            gfx_PrintString(x2, y, buf, Color, GetItemFont(), ALIGN_RIGHT);
    5a50:	f6 01       	movw	r30, r12
    5a52:	05 81       	ldd	r16, Z+5	; 0x05
    5a54:	16 81       	ldd	r17, Z+6	; 0x06
    5a56:	32 e0       	ldi	r19, 0x02	; 2
    5a58:	e3 2e       	mov	r14, r19
    5a5a:	f1 2c       	mov	r15, r1
    5a5c:	94 01       	movw	r18, r8
    5a5e:	ae 01       	movw	r20, r28
    5a60:	4f 5f       	subi	r20, 0xFF	; 255
    5a62:	5f 4f       	sbci	r21, 0xFF	; 255
    5a64:	65 2d       	mov	r22, r5
    5a66:	8e e9       	ldi	r24, 0x9E	; 158
    5a68:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>

    DrawStatusBar();
    DrawScrollBar();

    // Draw items
    for(uint8_t i = StartPos; i < StartPos + GetMenuVisibleCount(); ++i)
    5a6c:	43 94       	inc	r4
    5a6e:	8f cf       	rjmp	.-226    	; 0x598e <_ZNK5CMenu8DrawMenuEh+0x4e>

            gfx_PrintString(x2, y, buf, Color, GetItemFont(), ALIGN_RIGHT);
        }
    }
    
    gfx_Refresh();
    5a70:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>
}
    5a74:	a0 96       	adiw	r28, 0x20	; 32
    5a76:	0f b6       	in	r0, 0x3f	; 63
    5a78:	f8 94       	cli
    5a7a:	de bf       	out	0x3e, r29	; 62
    5a7c:	0f be       	out	0x3f, r0	; 63
    5a7e:	cd bf       	out	0x3d, r28	; 61
    5a80:	df 91       	pop	r29
    5a82:	cf 91       	pop	r28
    5a84:	1f 91       	pop	r17
    5a86:	0f 91       	pop	r16
    5a88:	ff 90       	pop	r15
    5a8a:	ef 90       	pop	r14
    5a8c:	df 90       	pop	r13
    5a8e:	cf 90       	pop	r12
    5a90:	bf 90       	pop	r11
    5a92:	af 90       	pop	r10
    5a94:	9f 90       	pop	r9
    5a96:	8f 90       	pop	r8
    5a98:	7f 90       	pop	r7
    5a9a:	6f 90       	pop	r6
    5a9c:	5f 90       	pop	r5
    5a9e:	4f 90       	pop	r4
    5aa0:	08 95       	ret

00005aa2 <_ZN5CMenu3RunEv>:
{
    m_CurrentPos = CurrentPos;
}

void CMenu::Run()
{
    5aa2:	ff 92       	push	r15
    5aa4:	0f 93       	push	r16
    5aa6:	1f 93       	push	r17
    5aa8:	cf 93       	push	r28
    5aaa:	df 93       	push	r29
    5aac:	ec 01       	movw	r28, r24
    5aae:	10 e0       	ldi	r17, 0x00	; 0
    do
    {
        uint8_t StartPos = 0;
        do
        {
            DrawMenu(StartPos);
    5ab0:	61 2f       	mov	r22, r17
    5ab2:	ce 01       	movw	r24, r28
    5ab4:	0e 94 a0 2c 	call	0x5940	; 0x5940 <_ZNK5CMenu8DrawMenuEh>

            WaitEmptyButtons();
    5ab8:	80 e0       	ldi	r24, 0x00	; 0
    5aba:	90 e0       	ldi	r25, 0x00	; 0
    5abc:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
            
            Kbd = WaitButtonPress(B_ANY);
    5ac0:	8f ef       	ldi	r24, 0xFF	; 255
    5ac2:	0e 94 67 2a 	call	0x54ce	; 0x54ce <_Z15WaitButtonPressh>
    5ac6:	08 2f       	mov	r16, r24

            if((Kbd & B_UP) && (GetCurrentPos() > 0))
    5ac8:	80 ff       	sbrs	r24, 0
    5aca:	03 c0       	rjmp	.+6      	; 0x5ad2 <_ZN5CMenu3RunEv+0x30>
    return m_ItemFont;
}

uint8_t CMenu::GetCurrentPos() const
{
    return m_CurrentPos;
    5acc:	8f 81       	ldd	r24, Y+7	; 0x07

            WaitEmptyButtons();
            
            Kbd = WaitButtonPress(B_ANY);

            if((Kbd & B_UP) && (GetCurrentPos() > 0))
    5ace:	81 11       	cpse	r24, r1
    5ad0:	38 c0       	rjmp	.+112    	; 0x5b42 <_ZN5CMenu3RunEv+0xa0>
            {
                SetCurrentPos(GetCurrentPos() - 1);
            }
            if((Kbd & B_DOWN) && (GetCurrentPos() < GetItemsCount() - 1))
    5ad2:	01 ff       	sbrs	r16, 1
    5ad4:	0a c0       	rjmp	.+20     	; 0x5aea <_ZN5CMenu3RunEv+0x48>
    return m_ItemFont;
}

uint8_t CMenu::GetCurrentPos() const
{
    return m_CurrentPos;
    5ad6:	8f 81       	ldd	r24, Y+7	; 0x07

            if((Kbd & B_UP) && (GetCurrentPos() > 0))
            {
                SetCurrentPos(GetCurrentPos() - 1);
            }
            if((Kbd & B_DOWN) && (GetCurrentPos() < GetItemsCount() - 1))
    5ad8:	48 2f       	mov	r20, r24
    5ada:	50 e0       	ldi	r21, 0x00	; 0
    5adc:	2c 81       	ldd	r18, Y+4	; 0x04
    5ade:	30 e0       	ldi	r19, 0x00	; 0
    5ae0:	21 50       	subi	r18, 0x01	; 1
    5ae2:	31 09       	sbc	r19, r1
    5ae4:	42 17       	cp	r20, r18
    5ae6:	53 07       	cpc	r21, r19
    5ae8:	7c f1       	brlt	.+94     	; 0x5b48 <_ZN5CMenu3RunEv+0xa6>
    return m_ItemFont;
}

uint8_t CMenu::GetCurrentPos() const
{
    return m_CurrentPos;
    5aea:	ff 80       	ldd	r15, Y+7	; 0x07
            {
                SetCurrentPos(GetCurrentPos() + 1);
            }

            // Если курсор вышел за границы экрана - сдигаем меню на один пункт
            if(GetCurrentPos() < StartPos)
    5aec:	f1 16       	cp	r15, r17
    5aee:	08 f4       	brcc	.+2      	; 0x5af2 <_ZN5CMenu3RunEv+0x50>
                StartPos--;
    5af0:	11 50       	subi	r17, 0x01	; 1
            if(GetCurrentPos() > StartPos + GetMenuVisibleCount() - 1)
    5af2:	ce 01       	movw	r24, r28
    5af4:	0e 94 ae 47 	call	0x8f5c	; 0x8f5c <_ZNK5CMenu19GetMenuVisibleCountEv>
    5af8:	28 2f       	mov	r18, r24
    5afa:	30 e0       	ldi	r19, 0x00	; 0
    5afc:	21 0f       	add	r18, r17
    5afe:	31 1d       	adc	r19, r1
    5b00:	4f 2d       	mov	r20, r15
    5b02:	50 e0       	ldi	r21, 0x00	; 0
    5b04:	42 17       	cp	r20, r18
    5b06:	53 07       	cpc	r21, r19
    5b08:	0c f0       	brlt	.+2      	; 0x5b0c <_ZN5CMenu3RunEv+0x6a>
                StartPos++;
    5b0a:	1f 5f       	subi	r17, 0xFF	; 255
        }
        while(!(Kbd & (B_BACK | B_ENTER)));
    5b0c:	80 2f       	mov	r24, r16
    5b0e:	80 73       	andi	r24, 0x30	; 48
{
    uint8_t Kbd = 0;
    do
    {
        uint8_t StartPos = 0;
        do
    5b10:	79 f2       	breq	.-98     	; 0x5ab0 <_ZN5CMenu3RunEv+0xe>
                StartPos++;
        }
        while(!(Kbd & (B_BACK | B_ENTER)));

        // Если нажали ВВОД и у выбранного пункта установлен обработчик
        if((Kbd & B_ENTER) && (GetItem(GetCurrentPos())->OnEnter != NULL))
    5b12:	05 ff       	sbrs	r16, 5
    5b14:	0b c0       	rjmp	.+22     	; 0x5b2c <_ZN5CMenu3RunEv+0x8a>
    5b16:	ea 81       	ldd	r30, Y+2	; 0x02
    5b18:	fb 81       	ldd	r31, Y+3	; 0x03
    5b1a:	87 e0       	ldi	r24, 0x07	; 7
    5b1c:	f8 9e       	mul	r15, r24
    5b1e:	e0 0d       	add	r30, r0
    5b20:	f1 1d       	adc	r31, r1
    5b22:	11 24       	eor	r1, r1
    5b24:	22 81       	ldd	r18, Z+2	; 0x02
    5b26:	33 81       	ldd	r19, Z+3	; 0x03
    5b28:	23 2b       	or	r18, r19
    5b2a:	89 f4       	brne	.+34     	; 0x5b4e <_ZN5CMenu3RunEv+0xac>
}

void CMenu::Run()
{
    uint8_t Kbd = 0;
    do
    5b2c:	04 ff       	sbrs	r16, 4
    5b2e:	bf cf       	rjmp	.-130    	; 0x5aae <_ZN5CMenu3RunEv+0xc>
        }
    }
    while(!(Kbd & B_BACK));

    // Ждем отпускания кнопок
    WaitEmptyButtons();
    5b30:	80 e0       	ldi	r24, 0x00	; 0
    5b32:	90 e0       	ldi	r25, 0x00	; 0
}
    5b34:	df 91       	pop	r29
    5b36:	cf 91       	pop	r28
    5b38:	1f 91       	pop	r17
    5b3a:	0f 91       	pop	r16
    5b3c:	ff 90       	pop	r15
        }
    }
    while(!(Kbd & B_BACK));

    // Ждем отпускания кнопок
    WaitEmptyButtons();
    5b3e:	0c 94 52 2a 	jmp	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
            
            Kbd = WaitButtonPress(B_ANY);

            if((Kbd & B_UP) && (GetCurrentPos() > 0))
            {
                SetCurrentPos(GetCurrentPos() - 1);
    5b42:	81 50       	subi	r24, 0x01	; 1
{
    return m_CurrentPos;
}
void CMenu::SetCurrentPos(uint8_t CurrentPos)
{
    m_CurrentPos = CurrentPos;
    5b44:	8f 83       	std	Y+7, r24	; 0x07
    5b46:	c5 cf       	rjmp	.-118    	; 0x5ad2 <_ZN5CMenu3RunEv+0x30>
            {
                SetCurrentPos(GetCurrentPos() - 1);
            }
            if((Kbd & B_DOWN) && (GetCurrentPos() < GetItemsCount() - 1))
            {
                SetCurrentPos(GetCurrentPos() + 1);
    5b48:	8f 5f       	subi	r24, 0xFF	; 255
{
    return m_CurrentPos;
}
void CMenu::SetCurrentPos(uint8_t CurrentPos)
{
    m_CurrentPos = CurrentPos;
    5b4a:	8f 83       	std	Y+7, r24	; 0x07
    5b4c:	ce cf       	rjmp	.-100    	; 0x5aea <_ZN5CMenu3RunEv+0x48>
        while(!(Kbd & (B_BACK | B_ENTER)));

        // Если нажали ВВОД и у выбранного пункта установлен обработчик
        if((Kbd & B_ENTER) && (GetItem(GetCurrentPos())->OnEnter != NULL))
        {
            WaitEmptyButtons();
    5b4e:	80 e0       	ldi	r24, 0x00	; 0
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
    return m_ItemFont;
}

uint8_t CMenu::GetCurrentPos() const
{
    return m_CurrentPos;
    5b56:	8f 81       	ldd	r24, Y+7	; 0x07
{
    return m_ItemsCount;
}
const CMenu::Item* CMenu::GetItem(const uint8_t _ItemIdx) const
{
    return &m_Items[_ItemIdx];
    5b58:	aa 81       	ldd	r26, Y+2	; 0x02
    5b5a:	bb 81       	ldd	r27, Y+3	; 0x03
    5b5c:	97 e0       	ldi	r25, 0x07	; 7
    5b5e:	89 9f       	mul	r24, r25
    5b60:	a0 0d       	add	r26, r0
    5b62:	b1 1d       	adc	r27, r1
    5b64:	11 24       	eor	r1, r1
        // Если нажали ВВОД и у выбранного пункта установлен обработчик
        if((Kbd & B_ENTER) && (GetItem(GetCurrentPos())->OnEnter != NULL))
        {
            WaitEmptyButtons();
            
            GetItem(GetCurrentPos())->OnEnter(GetItem(GetCurrentPos())->AddParam);
    5b66:	12 96       	adiw	r26, 0x02	; 2
    5b68:	ed 91       	ld	r30, X+
    5b6a:	fc 91       	ld	r31, X
    5b6c:	13 97       	sbiw	r26, 0x03	; 3
    5b6e:	16 96       	adiw	r26, 0x06	; 6
    5b70:	8c 91       	ld	r24, X
    5b72:	19 95       	eicall
    5b74:	db cf       	rjmp	.-74     	; 0x5b2c <_ZN5CMenu3RunEv+0x8a>

00005b76 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx>:
            const FontProfile& BodyFont,
            const char*        Header,
            const FontProfile& HeaderFont,
            const uint8_t      WidthMin,
            const ColorIdx     Color)
{
    5b76:	2f 92       	push	r2
    5b78:	3f 92       	push	r3
    5b7a:	4f 92       	push	r4
    5b7c:	5f 92       	push	r5
    5b7e:	6f 92       	push	r6
    5b80:	7f 92       	push	r7
    5b82:	8f 92       	push	r8
    5b84:	9f 92       	push	r9
    5b86:	af 92       	push	r10
    5b88:	bf 92       	push	r11
    5b8a:	cf 92       	push	r12
    5b8c:	df 92       	push	r13
    5b8e:	ef 92       	push	r14
    5b90:	ff 92       	push	r15
    5b92:	0f 93       	push	r16
    5b94:	1f 93       	push	r17
    5b96:	cf 93       	push	r28
    5b98:	df 93       	push	r29
    5b9a:	cd b7       	in	r28, 0x3d	; 61
    5b9c:	de b7       	in	r29, 0x3e	; 62
    5b9e:	c6 57       	subi	r28, 0x76	; 118
    5ba0:	d1 09       	sbc	r29, r1
    5ba2:	0f b6       	in	r0, 0x3f	; 63
    5ba4:	f8 94       	cli
    5ba6:	de bf       	out	0x3e, r29	; 62
    5ba8:	0f be       	out	0x3f, r0	; 63
    5baa:	cd bf       	out	0x3d, r28	; 61
    5bac:	6b 01       	movw	r12, r22
    5bae:	5a 01       	movw	r10, r20
    5bb0:	29 01       	movw	r4, r18
    5bb2:	e6 96       	adiw	r28, 0x36	; 54
    5bb4:	ff ae       	std	Y+63, r15	; 0x3f
    5bb6:	ee ae       	std	Y+62, r14	; 0x3e
    5bb8:	e6 97       	sbiw	r28, 0x36	; 54
    char*   Line[MSG_BOX_MAX_LINES];
    uint8_t LineLength[MSG_BOX_MAX_LINES];
    uint8_t LineCount = 0;

    char Str[100];
    strcpy(Str, Body);
    5bba:	bc 01       	movw	r22, r24
    5bbc:	ce 01       	movw	r24, r28
    5bbe:	01 96       	adiw	r24, 0x01	; 1
    5bc0:	4c 01       	movw	r8, r24
    5bc2:	0e 94 8a 48 	call	0x9114	; 0x9114 <strcpy>

    uint8_t H = 0;
    uint8_t W = WidthMin;

    Line[0] = Str;
    5bc6:	a7 96       	adiw	r28, 0x27	; 39
    5bc8:	9f ae       	std	Y+63, r9	; 0x3f
    5bca:	8e ae       	std	Y+62, r8	; 0x3e
    5bcc:	a7 97       	sbiw	r28, 0x27	; 39
    // Clip Str to Lines and calc W and H
    for (uint8_t count = 0; count < MSG_BOX_MAX_LINES; ++count)
    5bce:	f1 2c       	mov	r15, r1
    uint8_t LineCount = 0;

    char Str[100];
    strcpy(Str, Body);

    uint8_t H = 0;
    5bd0:	10 e0       	ldi	r17, 0x00	; 0

    Line[0] = Str;
    // Clip Str to Lines and calc W and H
    for (uint8_t count = 0; count < MSG_BOX_MAX_LINES; ++count)
    {
        char* p = strchr(Line[count], '\n');
    5bd2:	8f 2c       	mov	r8, r15
    5bd4:	91 2c       	mov	r9, r1
    5bd6:	f4 01       	movw	r30, r8
    5bd8:	ee 0f       	add	r30, r30
    5bda:	ff 1f       	adc	r31, r31
    5bdc:	a5 e6       	ldi	r26, 0x65	; 101
    5bde:	b0 e0       	ldi	r27, 0x00	; 0
    5be0:	ac 0f       	add	r26, r28
    5be2:	bd 1f       	adc	r27, r29
    5be4:	ea 0f       	add	r30, r26
    5be6:	fb 1f       	adc	r31, r27
    5be8:	20 80       	ld	r2, Z
    5bea:	31 80       	ldd	r3, Z+1	; 0x01
    5bec:	6a e0       	ldi	r22, 0x0A	; 10
    5bee:	70 e0       	ldi	r23, 0x00	; 0
    5bf0:	c1 01       	movw	r24, r2
    5bf2:	0e 94 7f 48 	call	0x90fe	; 0x90fe <strchr>
        
        LineLength[count] = p ? (p - Line[count]) : strlen(Line[count]);
    5bf6:	00 97       	sbiw	r24, 0x00	; 0
    5bf8:	11 f0       	breq	.+4      	; 0x5bfe <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0x88>
    5bfa:	e8 2f       	mov	r30, r24
    5bfc:	05 c0       	rjmp	.+10     	; 0x5c08 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0x92>
    5bfe:	f1 01       	movw	r30, r2
    5c00:	01 90       	ld	r0, Z+
    5c02:	00 20       	and	r0, r0
    5c04:	e9 f7       	brne	.-6      	; 0x5c00 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0x8a>
    5c06:	31 97       	sbiw	r30, 0x01	; 1
    5c08:	e2 19       	sub	r30, r2
    5c0a:	af e6       	ldi	r26, 0x6F	; 111
    5c0c:	b0 e0       	ldi	r27, 0x00	; 0
    5c0e:	ac 0f       	add	r26, r28
    5c10:	bd 1f       	adc	r27, r29
    5c12:	a8 0d       	add	r26, r8
    5c14:	b9 1d       	adc	r27, r9
    5c16:	ec 93       	st	X, r30

        const uint8_t StrW = BodyFont.W * LineLength[count];
    5c18:	d6 01       	movw	r26, r12
    5c1a:	2c 90       	ld	r2, X
    5c1c:	e2 9d       	mul	r30, r2
    5c1e:	e0 2d       	mov	r30, r0
    5c20:	11 24       	eor	r1, r1
    5c22:	0e 17       	cp	r16, r30
    5c24:	08 f4       	brcc	.+2      	; 0x5c28 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0xb2>
    5c26:	0e 2f       	mov	r16, r30
        if(W < StrW)
            W = StrW;
        H += BodyFont.H;
    5c28:	f6 01       	movw	r30, r12
    5c2a:	21 81       	ldd	r18, Z+1	; 0x01
    5c2c:	12 0f       	add	r17, r18

        if(p == NULL)
    5c2e:	00 97       	sbiw	r24, 0x00	; 0
    5c30:	81 f0       	breq	.+32     	; 0x5c52 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0xdc>
        {
            LineCount = count;
            break;
        }
        else
            *p = '\0';
    5c32:	fc 01       	movw	r30, r24
    5c34:	11 92       	st	Z+, r1

        Line[count + 1] = p + 1;
    5c36:	d4 01       	movw	r26, r8
    5c38:	11 96       	adiw	r26, 0x01	; 1
    5c3a:	aa 0f       	add	r26, r26
    5c3c:	bb 1f       	adc	r27, r27
    5c3e:	85 e6       	ldi	r24, 0x65	; 101
    5c40:	90 e0       	ldi	r25, 0x00	; 0
    5c42:	8c 0f       	add	r24, r28
    5c44:	9d 1f       	adc	r25, r29
    5c46:	a8 0f       	add	r26, r24
    5c48:	b9 1f       	adc	r27, r25
    5c4a:	ed 93       	st	X+, r30
    5c4c:	fc 93       	st	X, r31
    uint8_t H = 0;
    uint8_t W = WidthMin;

    Line[0] = Str;
    // Clip Str to Lines and calc W and H
    for (uint8_t count = 0; count < MSG_BOX_MAX_LINES; ++count)
    5c4e:	f3 94       	inc	r15
    5c50:	c0 cf       	rjmp	.-128    	; 0x5bd2 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0x5c>
    5c52:	80 2f       	mov	r24, r16
            *p = '\0';

        Line[count + 1] = p + 1;
    }

    if(Header != NULL)
    5c54:	a1 14       	cp	r10, r1
    5c56:	b1 04       	cpc	r11, r1
    5c58:	79 f0       	breq	.+30     	; 0x5c78 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0x102>
    {
        const uint8_t StrW = HeaderFont.W * strlen(Header);
    5c5a:	f5 01       	movw	r30, r10
    5c5c:	01 90       	ld	r0, Z+
    5c5e:	00 20       	and	r0, r0
    5c60:	e9 f7       	brne	.-6      	; 0x5c5c <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0xe6>
    5c62:	31 97       	sbiw	r30, 0x01	; 1
    5c64:	ea 19       	sub	r30, r10
    5c66:	fb 09       	sbc	r31, r11
    5c68:	d2 01       	movw	r26, r4
    5c6a:	0c 91       	ld	r16, X
    5c6c:	0e 9f       	mul	r16, r30
    5c6e:	00 2d       	mov	r16, r0
    5c70:	11 24       	eor	r1, r1
    5c72:	08 17       	cp	r16, r24
    5c74:	08 f4       	brcc	.+2      	; 0x5c78 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0x102>
    5c76:	08 2f       	mov	r16, r24
        if(W < StrW)
            W = StrW;
    }

    // Additional MsgBox padding
    W += BodyFont.W * 2;
    5c78:	22 0c       	add	r2, r2
    5c7a:	20 0e       	add	r2, r16
    H += BodyFont.H;
    5c7c:	92 2f       	mov	r25, r18
    5c7e:	91 0f       	add	r25, r17

    uint8_t X = TFT_ScreenWidth  / 2 - W / 2;
    5c80:	62 2c       	mov	r6, r2
    5c82:	66 94       	lsr	r6
    5c84:	10 e5       	ldi	r17, 0x50	; 80
    5c86:	71 2e       	mov	r7, r17
    5c88:	76 18       	sub	r7, r6
    uint8_t Y = TFT_ScreenHeight / 2 - H / 2;
    5c8a:	89 2f       	mov	r24, r25
    5c8c:	86 95       	lsr	r24
    5c8e:	00 e4       	ldi	r16, 0x40	; 64
    5c90:	30 2e       	mov	r3, r16
    5c92:	38 1a       	sub	r3, r24
    5c94:	27 0c       	add	r2, r7

    if(Header != NULL)
    5c96:	a1 14       	cp	r10, r1
    5c98:	b1 04       	cpc	r11, r1
    5c9a:	99 f1       	breq	.+102    	; 0x5d02 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0x18c>
    {
        // Draw header
        Y += HeaderFont.H / 2;
    5c9c:	f2 01       	movw	r30, r4
    5c9e:	81 81       	ldd	r24, Z+1	; 0x01
    5ca0:	28 2f       	mov	r18, r24
    5ca2:	26 95       	lsr	r18
    5ca4:	32 0e       	add	r3, r18
        gfx_DrawRectangle(X - 1, Y - HeaderFont.H - 2, X + W + 1, Y + 1, COLOR_FRONT);
    5ca6:	21 e0       	ldi	r18, 0x01	; 1
    5ca8:	23 0d       	add	r18, r3
    5caa:	63 2d       	mov	r22, r3
    5cac:	68 1b       	sub	r22, r24
    5cae:	62 50       	subi	r22, 0x02	; 2
    5cb0:	e1 2c       	mov	r14, r1
    5cb2:	01 e0       	ldi	r16, 0x01	; 1
    5cb4:	10 e0       	ldi	r17, 0x00	; 0
    5cb6:	41 e0       	ldi	r20, 0x01	; 1
    5cb8:	42 0d       	add	r20, r2
    5cba:	8f e4       	ldi	r24, 0x4F	; 79
    5cbc:	86 19       	sub	r24, r6
    5cbe:	e7 96       	adiw	r28, 0x37	; 55
    5cc0:	9f af       	std	Y+63, r25	; 0x3f
    5cc2:	e7 97       	sbiw	r28, 0x37	; 55
    5cc4:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
        gfx_FillRectangle(X, Y - HeaderFont.H - 1, X + W, Y, COLOR_BACKG);
    5cc8:	d2 01       	movw	r26, r4
    5cca:	11 96       	adiw	r26, 0x01	; 1
    5ccc:	6c 91       	ld	r22, X
    5cce:	60 95       	com	r22
    5cd0:	63 0d       	add	r22, r3
    5cd2:	00 e0       	ldi	r16, 0x00	; 0
    5cd4:	10 e0       	ldi	r17, 0x00	; 0
    5cd6:	23 2d       	mov	r18, r3
    5cd8:	42 2d       	mov	r20, r2
    5cda:	87 2d       	mov	r24, r7
    5cdc:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
        gfx_PrintString(X + 1, Y - HeaderFont.H, Header, COLOR_FRONT, HeaderFont);
    5ce0:	f2 01       	movw	r30, r4
    5ce2:	81 81       	ldd	r24, Z+1	; 0x01
    5ce4:	63 2d       	mov	r22, r3
    5ce6:	68 1b       	sub	r22, r24
    5ce8:	e1 2c       	mov	r14, r1
    5cea:	f1 2c       	mov	r15, r1
    5cec:	82 01       	movw	r16, r4
    5cee:	21 e0       	ldi	r18, 0x01	; 1
    5cf0:	30 e0       	ldi	r19, 0x00	; 0
    5cf2:	a5 01       	movw	r20, r10
    5cf4:	81 e5       	ldi	r24, 0x51	; 81
    5cf6:	86 19       	sub	r24, r6
    5cf8:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    5cfc:	e7 96       	adiw	r28, 0x37	; 55
    5cfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d00:	e7 97       	sbiw	r28, 0x37	; 55
    }

    // Clear MsgBox area
    gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_FRONT);
    5d02:	f3 2c       	mov	r15, r3
    5d04:	f9 0e       	add	r15, r25
    5d06:	21 e0       	ldi	r18, 0x01	; 1
    5d08:	2f 0d       	add	r18, r15
    5d0a:	41 e0       	ldi	r20, 0x01	; 1
    5d0c:	42 0d       	add	r20, r2
    5d0e:	01 e0       	ldi	r16, 0x01	; 1
    5d10:	10 e0       	ldi	r17, 0x00	; 0
    5d12:	63 2d       	mov	r22, r3
    5d14:	8f e4       	ldi	r24, 0x4F	; 79
    5d16:	86 19       	sub	r24, r6
    5d18:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
    gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_BACKG);
    5d1c:	e1 2c       	mov	r14, r1
    5d1e:	00 e0       	ldi	r16, 0x00	; 0
    5d20:	10 e0       	ldi	r17, 0x00	; 0
    5d22:	2f 2d       	mov	r18, r15
    5d24:	42 2d       	mov	r20, r2
    5d26:	63 2d       	mov	r22, r3
    5d28:	87 2d       	mov	r24, r7
    5d2a:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>

    // Draw Lines
    for(uint8_t i = 0; i < LineCount + 1; ++i)
    5d2e:	51 2c       	mov	r5, r1
    {
        if(LineLength[i] == 0)
            continue;
        
        const uint8_t x = (TFT_ScreenWidth - BodyFont.W * LineLength[i]) / 2;
    5d30:	b0 ea       	ldi	r27, 0xA0	; 160
    5d32:	ab 2e       	mov	r10, r27
    5d34:	b1 2c       	mov	r11, r1
    // Clear MsgBox area
    gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_FRONT);
    gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_BACKG);

    // Draw Lines
    for(uint8_t i = 0; i < LineCount + 1; ++i)
    5d36:	85 2d       	mov	r24, r5
    5d38:	90 e0       	ldi	r25, 0x00	; 0
    5d3a:	88 16       	cp	r8, r24
    5d3c:	99 06       	cpc	r9, r25
    5d3e:	94 f1       	brlt	.+100    	; 0x5da4 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0x22e>
    {
        if(LineLength[i] == 0)
    5d40:	ef e6       	ldi	r30, 0x6F	; 111
    5d42:	f0 e0       	ldi	r31, 0x00	; 0
    5d44:	ec 0f       	add	r30, r28
    5d46:	fd 1f       	adc	r31, r29
    5d48:	e8 0f       	add	r30, r24
    5d4a:	f9 1f       	adc	r31, r25
    5d4c:	20 81       	ld	r18, Z
    5d4e:	22 23       	and	r18, r18
    5d50:	39 f1       	breq	.+78     	; 0x5da0 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0x22a>
            continue;
        
        const uint8_t x = (TFT_ScreenWidth - BodyFont.W * LineLength[i]) / 2;
    5d52:	d6 01       	movw	r26, r12
    5d54:	7c 91       	ld	r23, X
        const uint8_t y = Y + BodyFont.H/2 + i * BodyFont.H;
    5d56:	11 96       	adiw	r26, 0x01	; 1
    5d58:	3c 91       	ld	r19, X
        
        gfx_PrintString(x, y, Line[i], Color, BodyFont);
    5d5a:	fc 01       	movw	r30, r24
    5d5c:	ee 0f       	add	r30, r30
    5d5e:	ff 1f       	adc	r31, r31
    5d60:	85 e6       	ldi	r24, 0x65	; 101
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	8c 0f       	add	r24, r28
    5d66:	9d 1f       	adc	r25, r29
    5d68:	e8 0f       	add	r30, r24
    5d6a:	f9 1f       	adc	r31, r25
    5d6c:	40 81       	ld	r20, Z
    5d6e:	51 81       	ldd	r21, Z+1	; 0x01
    {
        if(LineLength[i] == 0)
            continue;
        
        const uint8_t x = (TFT_ScreenWidth - BodyFont.W * LineLength[i]) / 2;
        const uint8_t y = Y + BodyFont.H/2 + i * BodyFont.H;
    5d70:	63 2f       	mov	r22, r19
    5d72:	66 95       	lsr	r22
    5d74:	63 0d       	add	r22, r3
    5d76:	53 9e       	mul	r5, r19
    5d78:	60 0d       	add	r22, r0
    5d7a:	11 24       	eor	r1, r1
    for(uint8_t i = 0; i < LineCount + 1; ++i)
    {
        if(LineLength[i] == 0)
            continue;
        
        const uint8_t x = (TFT_ScreenWidth - BodyFont.W * LineLength[i]) / 2;
    5d7c:	c5 01       	movw	r24, r10
    5d7e:	72 9f       	mul	r23, r18
    5d80:	80 19       	sub	r24, r0
    5d82:	91 09       	sbc	r25, r1
    5d84:	11 24       	eor	r1, r1
    5d86:	97 fd       	sbrc	r25, 7
    5d88:	01 96       	adiw	r24, 0x01	; 1
    5d8a:	95 95       	asr	r25
    5d8c:	87 95       	ror	r24
        const uint8_t y = Y + BodyFont.H/2 + i * BodyFont.H;
        
        gfx_PrintString(x, y, Line[i], Color, BodyFont);
    5d8e:	e1 2c       	mov	r14, r1
    5d90:	f1 2c       	mov	r15, r1
    5d92:	86 01       	movw	r16, r12
    5d94:	e6 96       	adiw	r28, 0x36	; 54
    5d96:	2e ad       	ldd	r18, Y+62	; 0x3e
    5d98:	3f ad       	ldd	r19, Y+63	; 0x3f
    5d9a:	e6 97       	sbiw	r28, 0x36	; 54
    5d9c:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    // Clear MsgBox area
    gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_FRONT);
    gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_BACKG);

    // Draw Lines
    for(uint8_t i = 0; i < LineCount + 1; ++i)
    5da0:	53 94       	inc	r5
    5da2:	c9 cf       	rjmp	.-110    	; 0x5d36 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx+0x1c0>
        const uint8_t y = Y + BodyFont.H/2 + i * BodyFont.H;
        
        gfx_PrintString(x, y, Line[i], Color, BodyFont);
    }

    gfx_Refresh();
    5da4:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>
}
    5da8:	ca 58       	subi	r28, 0x8A	; 138
    5daa:	df 4f       	sbci	r29, 0xFF	; 255
    5dac:	0f b6       	in	r0, 0x3f	; 63
    5dae:	f8 94       	cli
    5db0:	de bf       	out	0x3e, r29	; 62
    5db2:	0f be       	out	0x3f, r0	; 63
    5db4:	cd bf       	out	0x3d, r28	; 61
    5db6:	df 91       	pop	r29
    5db8:	cf 91       	pop	r28
    5dba:	1f 91       	pop	r17
    5dbc:	0f 91       	pop	r16
    5dbe:	ff 90       	pop	r15
    5dc0:	ef 90       	pop	r14
    5dc2:	df 90       	pop	r13
    5dc4:	cf 90       	pop	r12
    5dc6:	bf 90       	pop	r11
    5dc8:	af 90       	pop	r10
    5dca:	9f 90       	pop	r9
    5dcc:	8f 90       	pop	r8
    5dce:	7f 90       	pop	r7
    5dd0:	6f 90       	pop	r6
    5dd2:	5f 90       	pop	r5
    5dd4:	4f 90       	pop	r4
    5dd6:	3f 90       	pop	r3
    5dd8:	2f 90       	pop	r2
    5dda:	08 95       	ret

00005ddc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_>:

int8_t SelectBox(const char** Strings, const uint8_t StrCount, uint8_t Selected, const FontProfile& BodyFont,
                 const char*  Header,  const FontProfile& HeaderFont)
{
    5ddc:	2f 92       	push	r2
    5dde:	3f 92       	push	r3
    5de0:	4f 92       	push	r4
    5de2:	5f 92       	push	r5
    5de4:	6f 92       	push	r6
    5de6:	7f 92       	push	r7
    5de8:	8f 92       	push	r8
    5dea:	9f 92       	push	r9
    5dec:	af 92       	push	r10
    5dee:	bf 92       	push	r11
    5df0:	cf 92       	push	r12
    5df2:	df 92       	push	r13
    5df4:	ef 92       	push	r14
    5df6:	ff 92       	push	r15
    5df8:	0f 93       	push	r16
    5dfa:	1f 93       	push	r17
    5dfc:	cf 93       	push	r28
    5dfe:	df 93       	push	r29
    5e00:	cd b7       	in	r28, 0x3d	; 61
    5e02:	de b7       	in	r29, 0x3e	; 62
    5e04:	60 97       	sbiw	r28, 0x10	; 16
    5e06:	0f b6       	in	r0, 0x3f	; 63
    5e08:	f8 94       	cli
    5e0a:	de bf       	out	0x3e, r29	; 62
    5e0c:	0f be       	out	0x3f, r0	; 63
    5e0e:	cd bf       	out	0x3d, r28	; 61
    5e10:	9c 83       	std	Y+4, r25	; 0x04
    5e12:	8b 83       	std	Y+3, r24	; 0x03
    5e14:	66 2e       	mov	r6, r22
    5e16:	74 2e       	mov	r7, r20
    5e18:	38 8b       	std	Y+16, r19	; 0x10
    5e1a:	2f 87       	std	Y+15, r18	; 0x0f
    5e1c:	58 01       	movw	r10, r16
    5e1e:	47 01       	movw	r8, r14
    const uint8_t PADDING_H = BodyFont.W * 2;
    5e20:	d9 01       	movw	r26, r18
    5e22:	cc 90       	ld	r12, X
    5e24:	dc 2c       	mov	r13, r12
    5e26:	dd 0c       	add	r13, r13
    const uint8_t PADDING_V = BodyFont.H / 2;
    5e28:	11 96       	adiw	r26, 0x01	; 1
    5e2a:	2c 91       	ld	r18, X
    5e2c:	42 2f       	mov	r20, r18
    5e2e:	46 95       	lsr	r20

    uint8_t StrVisibleCount = (TFT_ScreenHeight - HeaderFont.H - PADDING_V) / BodyFont.H;
    5e30:	f7 01       	movw	r30, r14
    5e32:	31 81       	ldd	r19, Z+1	; 0x01
    5e34:	80 e8       	ldi	r24, 0x80	; 128
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	83 1b       	sub	r24, r19
    5e3a:	91 09       	sbc	r25, r1
    5e3c:	84 1b       	sub	r24, r20
    5e3e:	91 09       	sbc	r25, r1
    5e40:	62 2f       	mov	r22, r18
    5e42:	70 e0       	ldi	r23, 0x00	; 0
    5e44:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    5e48:	f6 2e       	mov	r15, r22
    5e4a:	ab 81       	ldd	r26, Y+3	; 0x03
    5e4c:	bc 81       	ldd	r27, Y+4	; 0x04

    uint8_t W = 0;
    uint8_t H = 0;
    for(uint8_t i = 0; i < StrCount; ++i)
    5e4e:	50 e0       	ldi	r21, 0x00	; 0
    const uint8_t PADDING_V = BodyFont.H / 2;

    uint8_t StrVisibleCount = (TFT_ScreenHeight - HeaderFont.H - PADDING_V) / BodyFont.H;

    uint8_t W = 0;
    uint8_t H = 0;
    5e50:	70 e0       	ldi	r23, 0x00	; 0
    const uint8_t PADDING_H = BodyFont.W * 2;
    const uint8_t PADDING_V = BodyFont.H / 2;

    uint8_t StrVisibleCount = (TFT_ScreenHeight - HeaderFont.H - PADDING_V) / BodyFont.H;

    uint8_t W = 0;
    5e52:	31 2c       	mov	r3, r1
    uint8_t H = 0;
    for(uint8_t i = 0; i < StrCount; ++i)
    5e54:	56 15       	cp	r21, r6
    5e56:	a1 f0       	breq	.+40     	; 0x5e80 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0xa4>
    {
        const uint8_t StrW = BodyFont.W * strlen(Strings[i]);
    5e58:	8d 91       	ld	r24, X+
    5e5a:	9d 91       	ld	r25, X+
    5e5c:	fc 01       	movw	r30, r24
    5e5e:	01 90       	ld	r0, Z+
    5e60:	00 20       	and	r0, r0
    5e62:	e9 f7       	brne	.-6      	; 0x5e5e <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x82>
    5e64:	31 97       	sbiw	r30, 0x01	; 1
    5e66:	e8 1b       	sub	r30, r24
    5e68:	f9 0b       	sbc	r31, r25
    5e6a:	ce 9e       	mul	r12, r30
    5e6c:	e0 2d       	mov	r30, r0
    5e6e:	11 24       	eor	r1, r1
    5e70:	3e 16       	cp	r3, r30
    5e72:	08 f4       	brcc	.+2      	; 0x5e76 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x9a>
    5e74:	3e 2e       	mov	r3, r30
        
        if(W < StrW)
            W = StrW;
        
        if(i < StrVisibleCount) H += BodyFont.H;
    5e76:	5f 15       	cp	r21, r15
    5e78:	08 f4       	brcc	.+2      	; 0x5e7c <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0xa0>
    5e7a:	72 0f       	add	r23, r18

    uint8_t StrVisibleCount = (TFT_ScreenHeight - HeaderFont.H - PADDING_V) / BodyFont.H;

    uint8_t W = 0;
    uint8_t H = 0;
    for(uint8_t i = 0; i < StrCount; ++i)
    5e7c:	5f 5f       	subi	r21, 0xFF	; 255
    5e7e:	ea cf       	rjmp	.-44     	; 0x5e54 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x78>
    5e80:	83 2d       	mov	r24, r3
    5e82:	26 2c       	mov	r2, r6
    5e84:	f6 14       	cp	r15, r6
    5e86:	08 f4       	brcc	.+2      	; 0x5e8a <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0xae>
    5e88:	26 2e       	mov	r2, r22
    }

    if (StrVisibleCount > StrCount)
        StrVisibleCount = StrCount;

    if(Header != NULL)
    5e8a:	a1 14       	cp	r10, r1
    5e8c:	b1 04       	cpc	r11, r1
    5e8e:	79 f0       	breq	.+30     	; 0x5eae <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0xd2>
    {
        const uint8_t StrW = HeaderFont.W * strlen(Header);
    5e90:	f5 01       	movw	r30, r10
    5e92:	01 90       	ld	r0, Z+
    5e94:	00 20       	and	r0, r0
    5e96:	e9 f7       	brne	.-6      	; 0x5e92 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0xb6>
    5e98:	31 97       	sbiw	r30, 0x01	; 1
    5e9a:	ea 19       	sub	r30, r10
    5e9c:	fb 09       	sbc	r31, r11
    5e9e:	d4 01       	movw	r26, r8
    5ea0:	3c 90       	ld	r3, X
    5ea2:	3e 9e       	mul	r3, r30
    5ea4:	30 2c       	mov	r3, r0
    5ea6:	11 24       	eor	r1, r1
    5ea8:	38 16       	cp	r3, r24
    5eaa:	08 f4       	brcc	.+2      	; 0x5eae <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0xd2>
    5eac:	38 2e       	mov	r3, r24
        if(W < StrW)
            W = StrW;
    }

    // Additional padding
    W += PADDING_H;
    5eae:	3d 0c       	add	r3, r13
    H += PADDING_V;
    5eb0:	97 2f       	mov	r25, r23
    5eb2:	94 0f       	add	r25, r20

    uint8_t X = (TFT_ScreenWidth  - W) / 2;
    5eb4:	40 ea       	ldi	r20, 0xA0	; 160
    5eb6:	50 e0       	ldi	r21, 0x00	; 0
    5eb8:	43 19       	sub	r20, r3
    5eba:	51 09       	sbc	r21, r1
    5ebc:	57 ff       	sbrs	r21, 7
    5ebe:	02 c0       	rjmp	.+4      	; 0x5ec4 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0xe8>
    5ec0:	4f 5f       	subi	r20, 0xFF	; 255
    5ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ec4:	6a 01       	movw	r12, r20
    5ec6:	d5 94       	asr	r13
    5ec8:	c7 94       	ror	r12
    5eca:	4c 2c       	mov	r4, r12
    uint8_t Y = (TFT_ScreenHeight - H) / 2;
    5ecc:	40 e8       	ldi	r20, 0x80	; 128
    5ece:	50 e0       	ldi	r21, 0x00	; 0
    5ed0:	49 1b       	sub	r20, r25
    5ed2:	51 09       	sbc	r21, r1
    5ed4:	57 ff       	sbrs	r21, 7
    5ed6:	02 c0       	rjmp	.+4      	; 0x5edc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x100>
    5ed8:	4f 5f       	subi	r20, 0xFF	; 255
    5eda:	5f 4f       	sbci	r21, 0xFF	; 255
    5edc:	55 95       	asr	r21
    5ede:	47 95       	ror	r20
    5ee0:	54 2e       	mov	r5, r20

    if(Header != NULL)
    5ee2:	a1 14       	cp	r10, r1
    5ee4:	b1 04       	cpc	r11, r1
    5ee6:	79 f1       	breq	.+94     	; 0x5f46 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x16a>
    {
        // Draw header
        Y += HeaderFont.H / 2;
    5ee8:	53 2e       	mov	r5, r19
    5eea:	56 94       	lsr	r5
    5eec:	54 0e       	add	r5, r20
        gfx_DrawRectangle(X - 1, Y - HeaderFont.H - 2, X + W + 1, Y + 1, COLOR_BACKG);
    5eee:	f3 2c       	mov	r15, r3
    5ef0:	fc 0c       	add	r15, r12
    5ef2:	21 e0       	ldi	r18, 0x01	; 1
    5ef4:	25 0d       	add	r18, r5
    5ef6:	41 e0       	ldi	r20, 0x01	; 1
    5ef8:	4f 0d       	add	r20, r15
    5efa:	65 2d       	mov	r22, r5
    5efc:	63 1b       	sub	r22, r19
    5efe:	62 50       	subi	r22, 0x02	; 2
    5f00:	e1 2c       	mov	r14, r1
    5f02:	00 e0       	ldi	r16, 0x00	; 0
    5f04:	10 e0       	ldi	r17, 0x00	; 0
    5f06:	8f ef       	ldi	r24, 0xFF	; 255
    5f08:	8c 0d       	add	r24, r12
    5f0a:	9e 87       	std	Y+14, r25	; 0x0e
    5f0c:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
        gfx_FillRectangle(X, Y - HeaderFont.H - 1, X + W, Y, COLOR_FRONT);
    5f10:	f4 01       	movw	r30, r8
    5f12:	61 81       	ldd	r22, Z+1	; 0x01
    5f14:	60 95       	com	r22
    5f16:	65 0d       	add	r22, r5
    5f18:	01 e0       	ldi	r16, 0x01	; 1
    5f1a:	10 e0       	ldi	r17, 0x00	; 0
    5f1c:	25 2d       	mov	r18, r5
    5f1e:	4f 2d       	mov	r20, r15
    5f20:	8c 2d       	mov	r24, r12
    5f22:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
        gfx_PrintString(X + 1, Y - HeaderFont.H, Header, COLOR_BACKG, HeaderFont);
    5f26:	d4 01       	movw	r26, r8
    5f28:	11 96       	adiw	r26, 0x01	; 1
    5f2a:	8c 91       	ld	r24, X
    5f2c:	65 2d       	mov	r22, r5
    5f2e:	68 1b       	sub	r22, r24
    5f30:	e1 2c       	mov	r14, r1
    5f32:	f1 2c       	mov	r15, r1
    5f34:	84 01       	movw	r16, r8
    5f36:	20 e0       	ldi	r18, 0x00	; 0
    5f38:	30 e0       	ldi	r19, 0x00	; 0
    5f3a:	a5 01       	movw	r20, r10
    5f3c:	81 e0       	ldi	r24, 0x01	; 1
    5f3e:	8c 0d       	add	r24, r12
    5f40:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    5f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    }

    uint8_t Pos = 0;
    if(Selected > Pos + StrVisibleCount - 1)
    5f46:	e2 2d       	mov	r30, r2
    5f48:	f0 e0       	ldi	r31, 0x00	; 0
    5f4a:	fa 83       	std	Y+2, r31	; 0x02
    5f4c:	e9 83       	std	Y+1, r30	; 0x01
    5f4e:	27 2d       	mov	r18, r7
    5f50:	30 e0       	ldi	r19, 0x00	; 0
    5f52:	2e 17       	cp	r18, r30
    5f54:	3f 07       	cpc	r19, r31
    5f56:	2c f0       	brlt	.+10     	; 0x5f62 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x186>
        Pos = Selected + 1 - StrVisibleCount;
    5f58:	99 24       	eor	r9, r9
    5f5a:	93 94       	inc	r9
    5f5c:	97 0c       	add	r9, r7
    5f5e:	92 18       	sub	r9, r2
    5f60:	01 c0       	rjmp	.+2      	; 0x5f64 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x188>
        gfx_DrawRectangle(X - 1, Y - HeaderFont.H - 2, X + W + 1, Y + 1, COLOR_BACKG);
        gfx_FillRectangle(X, Y - HeaderFont.H - 1, X + W, Y, COLOR_FRONT);
        gfx_PrintString(X + 1, Y - HeaderFont.H, Header, COLOR_BACKG, HeaderFont);
    }

    uint8_t Pos = 0;
    5f62:	91 2c       	mov	r9, r1

    uint8_t Kbd = 0;
    do
    {
        // Clear Msg area
        gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_BACKG);
    5f64:	85 2c       	mov	r8, r5
    5f66:	89 0e       	add	r8, r25
    5f68:	34 0c       	add	r3, r4
    5f6a:	71 e0       	ldi	r23, 0x01	; 1
    5f6c:	78 0d       	add	r23, r8
    5f6e:	79 87       	std	Y+9, r23	; 0x09
    5f70:	71 e0       	ldi	r23, 0x01	; 1
    5f72:	73 0d       	add	r23, r3
    5f74:	7a 87       	std	Y+10, r23	; 0x0a
    5f76:	7f ef       	ldi	r23, 0xFF	; 255
    5f78:	74 0d       	add	r23, r4
    5f7a:	7b 87       	std	Y+11, r23	; 0x0b
            const uint8_t x = (TFT_ScreenWidth - BodyFont.W * strlen(Strings[i])) / 2;
            const uint8_t y = Y + BodyFont.H / 4 + (i - Pos) * BodyFont.H;

            if (i == Selected)
            {
                gfx_FillRectangle(X + 2, y, X + W - 4, y + BodyFont.H, COLOR_FRONT);
    5f7c:	7c ef       	ldi	r23, 0xFC	; 252
    5f7e:	73 0d       	add	r23, r3
    5f80:	7c 87       	std	Y+12, r23	; 0x0c
    5f82:	72 e0       	ldi	r23, 0x02	; 2
    5f84:	74 0d       	add	r23, r4
    5f86:	7d 87       	std	Y+13, r23	; 0x0d

        if((Kbd & B_UP) && (Selected > 0))
        {
            Selected--;
        }
        if((Kbd & B_DOWN) && (Selected < StrCount - 1))
    5f88:	a6 2c       	mov	r10, r6
    5f8a:	b1 2c       	mov	r11, r1
    5f8c:	81 e0       	ldi	r24, 0x01	; 1
    5f8e:	a8 1a       	sub	r10, r24
    5f90:	b1 08       	sbc	r11, r1

    uint8_t Kbd = 0;
    do
    {
        // Clear Msg area
        gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_BACKG);
    5f92:	00 e0       	ldi	r16, 0x00	; 0
    5f94:	10 e0       	ldi	r17, 0x00	; 0
    5f96:	29 85       	ldd	r18, Y+9	; 0x09
    5f98:	4a 85       	ldd	r20, Y+10	; 0x0a
    5f9a:	65 2d       	mov	r22, r5
    5f9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f9e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
        gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_FRONT);
    5fa2:	e1 2c       	mov	r14, r1
    5fa4:	01 e0       	ldi	r16, 0x01	; 1
    5fa6:	10 e0       	ldi	r17, 0x00	; 0
    5fa8:	28 2d       	mov	r18, r8
    5faa:	43 2d       	mov	r20, r3
    5fac:	65 2d       	mov	r22, r5
    5fae:	84 2d       	mov	r24, r4
    5fb0:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>

        // Draw Strings
        for(uint8_t i = Pos; i < Pos + StrVisibleCount; ++i)
    5fb4:	29 2c       	mov	r2, r9
    5fb6:	a9 2d       	mov	r26, r9
    5fb8:	b0 e0       	ldi	r27, 0x00	; 0
    5fba:	be 83       	std	Y+6, r27	; 0x06
    5fbc:	ad 83       	std	Y+5, r26	; 0x05
    5fbe:	e9 81       	ldd	r30, Y+1	; 0x01
    5fc0:	fa 81       	ldd	r31, Y+2	; 0x02
    5fc2:	ae 0f       	add	r26, r30
    5fc4:	bf 1f       	adc	r27, r31
    5fc6:	b8 87       	std	Y+8, r27	; 0x08
    5fc8:	af 83       	std	Y+7, r26	; 0x07
    5fca:	82 2d       	mov	r24, r2
    5fcc:	90 e0       	ldi	r25, 0x00	; 0
    5fce:	ef 81       	ldd	r30, Y+7	; 0x07
    5fd0:	f8 85       	ldd	r31, Y+8	; 0x08
    5fd2:	8e 17       	cp	r24, r30
    5fd4:	9f 07       	cpc	r25, r31
    5fd6:	0c f0       	brlt	.+2      	; 0x5fda <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x1fe>
    5fd8:	4d c0       	rjmp	.+154    	; 0x6074 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x298>
        {
            const uint8_t x = (TFT_ScreenWidth - BodyFont.W * strlen(Strings[i])) / 2;
    5fda:	7c 01       	movw	r14, r24
    5fdc:	ee 0c       	add	r14, r14
    5fde:	ff 1c       	adc	r15, r15
    5fe0:	2b 81       	ldd	r18, Y+3	; 0x03
    5fe2:	3c 81       	ldd	r19, Y+4	; 0x04
    5fe4:	e2 0e       	add	r14, r18
    5fe6:	f3 1e       	adc	r15, r19
    5fe8:	d7 01       	movw	r26, r14
    5fea:	4d 91       	ld	r20, X+
    5fec:	5c 91       	ld	r21, X
    5fee:	fa 01       	movw	r30, r20
    5ff0:	01 90       	ld	r0, Z+
    5ff2:	00 20       	and	r0, r0
    5ff4:	e9 f7       	brne	.-6      	; 0x5ff0 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x214>
    5ff6:	31 97       	sbiw	r30, 0x01	; 1
    5ff8:	e4 1b       	sub	r30, r20
    5ffa:	f5 0b       	sbc	r31, r21
    5ffc:	af 85       	ldd	r26, Y+15	; 0x0f
    5ffe:	b8 89       	ldd	r27, Y+16	; 0x10
    6000:	6c 91       	ld	r22, X
    6002:	6e 9f       	mul	r22, r30
    6004:	90 01       	movw	r18, r0
    6006:	6f 9f       	mul	r22, r31
    6008:	30 0d       	add	r19, r0
    600a:	11 24       	eor	r1, r1
    600c:	60 ea       	ldi	r22, 0xA0	; 160
    600e:	c6 2e       	mov	r12, r22
    6010:	d1 2c       	mov	r13, r1
    6012:	c2 1a       	sub	r12, r18
    6014:	d3 0a       	sbc	r13, r19
    6016:	d6 94       	lsr	r13
    6018:	c7 94       	ror	r12
            const uint8_t y = Y + BodyFont.H / 4 + (i - Pos) * BodyFont.H;
    601a:	11 96       	adiw	r26, 0x01	; 1
    601c:	2c 91       	ld	r18, X
    601e:	62 2e       	mov	r6, r18
    6020:	66 94       	lsr	r6
    6022:	66 94       	lsr	r6
    6024:	65 0c       	add	r6, r5
    6026:	ed 81       	ldd	r30, Y+5	; 0x05
    6028:	fe 81       	ldd	r31, Y+6	; 0x06
    602a:	8e 1b       	sub	r24, r30
    602c:	9f 0b       	sbc	r25, r31
    602e:	28 9f       	mul	r18, r24
    6030:	60 0c       	add	r6, r0
    6032:	11 24       	eor	r1, r1

            if (i == Selected)
    6034:	27 10       	cpse	r2, r7
    6036:	12 c0       	rjmp	.+36     	; 0x605c <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x280>
            {
                gfx_FillRectangle(X + 2, y, X + W - 4, y + BodyFont.H, COLOR_FRONT);
    6038:	26 0d       	add	r18, r6
    603a:	01 e0       	ldi	r16, 0x01	; 1
    603c:	10 e0       	ldi	r17, 0x00	; 0
    603e:	4c 85       	ldd	r20, Y+12	; 0x0c
    6040:	66 2d       	mov	r22, r6
    6042:	8d 85       	ldd	r24, Y+13	; 0x0d
    6044:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
                gfx_PrintString(x, y, Strings[i], COLOR_BACKG, BodyFont);
    6048:	d7 01       	movw	r26, r14
    604a:	4d 91       	ld	r20, X+
    604c:	5c 91       	ld	r21, X
    604e:	e1 2c       	mov	r14, r1
    6050:	f1 2c       	mov	r15, r1
    6052:	0f 85       	ldd	r16, Y+15	; 0x0f
    6054:	18 89       	ldd	r17, Y+16	; 0x10
    6056:	20 e0       	ldi	r18, 0x00	; 0
    6058:	30 e0       	ldi	r19, 0x00	; 0
    605a:	06 c0       	rjmp	.+12     	; 0x6068 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x28c>
            }
            else
            {
                gfx_PrintString(x, y, Strings[i], COLOR_FRONT, BodyFont);
    605c:	e1 2c       	mov	r14, r1
    605e:	f1 2c       	mov	r15, r1
    6060:	0f 85       	ldd	r16, Y+15	; 0x0f
    6062:	18 89       	ldd	r17, Y+16	; 0x10
    6064:	21 e0       	ldi	r18, 0x01	; 1
    6066:	30 e0       	ldi	r19, 0x00	; 0
    6068:	66 2d       	mov	r22, r6
    606a:	8c 2d       	mov	r24, r12
    606c:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
        // Clear Msg area
        gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_BACKG);
        gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_FRONT);

        // Draw Strings
        for(uint8_t i = Pos; i < Pos + StrVisibleCount; ++i)
    6070:	23 94       	inc	r2
    6072:	ab cf       	rjmp	.-170    	; 0x5fca <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x1ee>
            {
                gfx_PrintString(x, y, Strings[i], COLOR_FRONT, BodyFont);
            }
        }

        gfx_Refresh();
    6074:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>

        WaitEmptyButtons(100);
    6078:	84 e6       	ldi	r24, 0x64	; 100
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
        
        Kbd = WaitButtonPress(B_ANY);
    6080:	8f ef       	ldi	r24, 0xFF	; 255
    6082:	0e 94 67 2a 	call	0x54ce	; 0x54ce <_Z15WaitButtonPressh>

        if((Kbd & B_UP) && (Selected > 0))
    6086:	80 ff       	sbrs	r24, 0
    6088:	02 c0       	rjmp	.+4      	; 0x608e <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x2b2>
    608a:	71 10       	cpse	r7, r1
        {
            Selected--;
    608c:	7a 94       	dec	r7
        }
        if((Kbd & B_DOWN) && (Selected < StrCount - 1))
    608e:	81 ff       	sbrs	r24, 1
    6090:	06 c0       	rjmp	.+12     	; 0x609e <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x2c2>
    6092:	27 2d       	mov	r18, r7
    6094:	30 e0       	ldi	r19, 0x00	; 0
    6096:	2a 15       	cp	r18, r10
    6098:	3b 05       	cpc	r19, r11
    609a:	0c f4       	brge	.+2      	; 0x609e <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x2c2>
        {
            Selected++;
    609c:	73 94       	inc	r7
        }

        if(Selected > Pos + StrVisibleCount - 1)
    609e:	27 2d       	mov	r18, r7
    60a0:	30 e0       	ldi	r19, 0x00	; 0
    60a2:	4f 81       	ldd	r20, Y+7	; 0x07
    60a4:	58 85       	ldd	r21, Y+8	; 0x08
    60a6:	24 17       	cp	r18, r20
    60a8:	35 07       	cpc	r19, r21
    60aa:	0c f0       	brlt	.+2      	; 0x60ae <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x2d2>
            Pos++;
    60ac:	93 94       	inc	r9
        if(Selected < Pos)
    60ae:	79 14       	cp	r7, r9
    60b0:	08 f4       	brcc	.+2      	; 0x60b4 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x2d8>
            Pos--;
    60b2:	9a 94       	dec	r9
    }
    while(!(Kbd & (B_BACK | B_ENTER)));
    60b4:	98 2f       	mov	r25, r24
    60b6:	90 73       	andi	r25, 0x30	; 48
    uint8_t Pos = 0;
    if(Selected > Pos + StrVisibleCount - 1)
        Pos = Selected + 1 - StrVisibleCount;

    uint8_t Kbd = 0;
    do
    60b8:	09 f4       	brne	.+2      	; 0x60bc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x2e0>
    60ba:	6b cf       	rjmp	.-298    	; 0x5f92 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x1b6>
        if(Selected < Pos)
            Pos--;
    }
    while(!(Kbd & (B_BACK | B_ENTER)));

    if(Kbd & B_ENTER)
    60bc:	85 ff       	sbrs	r24, 5
    60be:	02 c0       	rjmp	.+4      	; 0x60c4 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x2e8>
        return Selected;
    60c0:	87 2d       	mov	r24, r7
    60c2:	01 c0       	rjmp	.+2      	; 0x60c6 <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_+0x2ea>
    
    return RESULT_INCORRECT;
    60c4:	8f ef       	ldi	r24, 0xFF	; 255
}
    60c6:	60 96       	adiw	r28, 0x10	; 16
    60c8:	0f b6       	in	r0, 0x3f	; 63
    60ca:	f8 94       	cli
    60cc:	de bf       	out	0x3e, r29	; 62
    60ce:	0f be       	out	0x3f, r0	; 63
    60d0:	cd bf       	out	0x3d, r28	; 61
    60d2:	df 91       	pop	r29
    60d4:	cf 91       	pop	r28
    60d6:	1f 91       	pop	r17
    60d8:	0f 91       	pop	r16
    60da:	ff 90       	pop	r15
    60dc:	ef 90       	pop	r14
    60de:	df 90       	pop	r13
    60e0:	cf 90       	pop	r12
    60e2:	bf 90       	pop	r11
    60e4:	af 90       	pop	r10
    60e6:	9f 90       	pop	r9
    60e8:	8f 90       	pop	r8
    60ea:	7f 90       	pop	r7
    60ec:	6f 90       	pop	r6
    60ee:	5f 90       	pop	r5
    60f0:	4f 90       	pop	r4
    60f2:	3f 90       	pop	r3
    60f4:	2f 90       	pop	r2
    60f6:	08 95       	ret

000060f8 <_Z10EditNumDlgPv11PointerTypeiihPKc>:

bool EditNumDlg(void* Val, const PointerType PtrType, const int16_t Min, const int16_t Max, const uint8_t WidthMin, const char* Header)
{
    60f8:	2f 92       	push	r2
    60fa:	3f 92       	push	r3
    60fc:	4f 92       	push	r4
    60fe:	5f 92       	push	r5
    6100:	6f 92       	push	r6
    6102:	7f 92       	push	r7
    6104:	8f 92       	push	r8
    6106:	9f 92       	push	r9
    6108:	af 92       	push	r10
    610a:	bf 92       	push	r11
    610c:	cf 92       	push	r12
    610e:	df 92       	push	r13
    6110:	ef 92       	push	r14
    6112:	ff 92       	push	r15
    6114:	0f 93       	push	r16
    6116:	1f 93       	push	r17
    6118:	cf 93       	push	r28
    611a:	df 93       	push	r29
    611c:	cd b7       	in	r28, 0x3d	; 61
    611e:	de b7       	in	r29, 0x3e	; 62
    6120:	2e 97       	sbiw	r28, 0x0e	; 14
    6122:	0f b6       	in	r0, 0x3f	; 63
    6124:	f8 94       	cli
    6126:	de bf       	out	0x3e, r29	; 62
    6128:	0f be       	out	0x3f, r0	; 63
    612a:	cd bf       	out	0x3d, r28	; 61
    612c:	2c 01       	movw	r4, r24
    612e:	5b 01       	movw	r10, r22
    6130:	3a 01       	movw	r6, r20
    6132:	49 01       	movw	r8, r18
    6134:	10 2f       	mov	r17, r16
    6136:	fe 86       	std	Y+14, r15	; 0x0e
    6138:	ed 86       	std	Y+13, r14	; 0x0d
    if(Val == NULL)
    613a:	00 97       	sbiw	r24, 0x00	; 0
    613c:	09 f4       	brne	.+2      	; 0x6140 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x48>
    613e:	82 c0       	rjmp	.+260    	; 0x6244 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x14c>
        return false;

    int16_t BackUp;
    switch(PtrType)
    6140:	61 30       	cpi	r22, 0x01	; 1
    6142:	71 05       	cpc	r23, r1
    6144:	69 f0       	breq	.+26     	; 0x6160 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x68>
    6146:	62 30       	cpi	r22, 0x02	; 2
    6148:	71 05       	cpc	r23, r1
    614a:	71 f0       	breq	.+28     	; 0x6168 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x70>
    614c:	61 15       	cp	r22, r1
    614e:	71 05       	cpc	r23, r1
    6150:	09 f0       	breq	.+2      	; 0x6154 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x5c>
    6152:	78 c0       	rjmp	.+240    	; 0x6244 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x14c>
    {
        case (PTR_INT8):  { BackUp = *((int8_t*)Val);  break; }
    6154:	d2 01       	movw	r26, r4
    6156:	2c 90       	ld	r2, X
    6158:	33 24       	eor	r3, r3
    615a:	27 fc       	sbrc	r2, 7
    615c:	30 94       	com	r3
    615e:	07 c0       	rjmp	.+14     	; 0x616e <_Z10EditNumDlgPv11PointerTypeiihPKc+0x76>
        case (PTR_UINT8): { BackUp = *((uint8_t*)Val); break; }
    6160:	f2 01       	movw	r30, r4
    6162:	20 80       	ld	r2, Z
    6164:	31 2c       	mov	r3, r1
    6166:	03 c0       	rjmp	.+6      	; 0x616e <_Z10EditNumDlgPv11PointerTypeiihPKc+0x76>
        case (PTR_INT16): { BackUp = *((int16_t*)Val); break; }
    6168:	d2 01       	movw	r26, r4
    616a:	2d 90       	ld	r2, X+
    616c:	3c 90       	ld	r3, X

        default:        
            return false;
    }

    int16_t CurVal = BackUp;
    616e:	61 01       	movw	r12, r2
    uint8_t Kbd = 0;
    char    str[10];
    do
    {
        sprintf(str, "%d", CurVal);
    6170:	fe 01       	movw	r30, r28
    6172:	31 96       	adiw	r30, 0x01	; 1
    6174:	fc 87       	std	Y+12, r31	; 0x0c
    6176:	eb 87       	std	Y+11, r30	; 0x0b
    6178:	df 92       	push	r13
    617a:	cf 92       	push	r12
    617c:	a8 e6       	ldi	r26, 0x68	; 104
    617e:	b8 e0       	ldi	r27, 0x08	; 8
    6180:	bf 93       	push	r27
    6182:	af 93       	push	r26
    6184:	fc 85       	ldd	r31, Y+12	; 0x0c
    6186:	ff 93       	push	r31
    6188:	8b 85       	ldd	r24, Y+11	; 0x0b
    618a:	8f 93       	push	r24
    618c:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
        
        MsgBox(str, Font_12x16, Header, Font_8x8, WidthMin, COLOR_BACKG);
    6190:	e1 2c       	mov	r14, r1
    6192:	f1 2c       	mov	r15, r1
    6194:	01 2f       	mov	r16, r17
    6196:	2a ec       	ldi	r18, 0xCA	; 202
    6198:	3c e0       	ldi	r19, 0x0C	; 12
    619a:	4d 85       	ldd	r20, Y+13	; 0x0d
    619c:	5e 85       	ldd	r21, Y+14	; 0x0e
    619e:	6e eb       	ldi	r22, 0xBE	; 190
    61a0:	7c e0       	ldi	r23, 0x0C	; 12
    61a2:	ce 01       	movw	r24, r28
    61a4:	01 96       	adiw	r24, 0x01	; 1
    61a6:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx>
        
        WaitEmptyButtons();
    61aa:	80 e0       	ldi	r24, 0x00	; 0
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
        Kbd = WaitButtonPress(B_ANY);
    61b2:	8f ef       	ldi	r24, 0xFF	; 255
    61b4:	0e 94 67 2a 	call	0x54ce	; 0x54ce <_Z15WaitButtonPressh>
        
        if((Kbd & B_DOWN) && (CurVal > Min))
    61b8:	0f 90       	pop	r0
    61ba:	0f 90       	pop	r0
    61bc:	0f 90       	pop	r0
    61be:	0f 90       	pop	r0
    61c0:	0f 90       	pop	r0
    61c2:	0f 90       	pop	r0
    61c4:	81 ff       	sbrs	r24, 1
    61c6:	06 c0       	rjmp	.+12     	; 0x61d4 <_Z10EditNumDlgPv11PointerTypeiihPKc+0xdc>
    61c8:	6c 14       	cp	r6, r12
    61ca:	7d 04       	cpc	r7, r13
    61cc:	1c f4       	brge	.+6      	; 0x61d4 <_Z10EditNumDlgPv11PointerTypeiihPKc+0xdc>
            CurVal--;
    61ce:	91 e0       	ldi	r25, 0x01	; 1
    61d0:	c9 1a       	sub	r12, r25
    61d2:	d1 08       	sbc	r13, r1
        
        if((Kbd & B_UP) && (CurVal < Max))
    61d4:	80 ff       	sbrs	r24, 0
    61d6:	06 c0       	rjmp	.+12     	; 0x61e4 <_Z10EditNumDlgPv11PointerTypeiihPKc+0xec>
    61d8:	c8 14       	cp	r12, r8
    61da:	d9 04       	cpc	r13, r9
    61dc:	1c f4       	brge	.+6      	; 0x61e4 <_Z10EditNumDlgPv11PointerTypeiihPKc+0xec>
            CurVal++;
    61de:	af ef       	ldi	r26, 0xFF	; 255
    61e0:	ca 1a       	sub	r12, r26
    61e2:	da 0a       	sbc	r13, r26
        
        if(Kbd & B_LEFT)
    61e4:	82 ff       	sbrs	r24, 2
    61e6:	07 c0       	rjmp	.+14     	; 0x61f6 <_Z10EditNumDlgPv11PointerTypeiihPKc+0xfe>
            CurVal = (CurVal - 10 > Min) ? (CurVal - 10) : Min;
    61e8:	ba e0       	ldi	r27, 0x0A	; 10
    61ea:	cb 1a       	sub	r12, r27
    61ec:	d1 08       	sbc	r13, r1
    61ee:	c6 14       	cp	r12, r6
    61f0:	d7 04       	cpc	r13, r7
    61f2:	0c f4       	brge	.+2      	; 0x61f6 <_Z10EditNumDlgPv11PointerTypeiihPKc+0xfe>
    61f4:	63 01       	movw	r12, r6
        
        if(Kbd & B_RIGHT)
    61f6:	83 ff       	sbrs	r24, 3
    61f8:	07 c0       	rjmp	.+14     	; 0x6208 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x110>
            CurVal = (CurVal + 10 < Max) ? (CurVal + 10) : Max;
    61fa:	ea e0       	ldi	r30, 0x0A	; 10
    61fc:	ce 0e       	add	r12, r30
    61fe:	d1 1c       	adc	r13, r1
    6200:	8c 14       	cp	r8, r12
    6202:	9d 04       	cpc	r9, r13
    6204:	0c f4       	brge	.+2      	; 0x6208 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x110>
    6206:	64 01       	movw	r12, r8
        

        // Изменяем значение по указателю потому, что от него может что-либо зависеть.
        // Например при изменении сабтриммера можно будет визуально наблюдать результат
        // не выходя из диалога изменения значения.
        switch(PtrType)
    6208:	f1 e0       	ldi	r31, 0x01	; 1
    620a:	af 16       	cp	r10, r31
    620c:	b1 04       	cpc	r11, r1
    620e:	51 f0       	breq	.+20     	; 0x6224 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x12c>
    6210:	92 e0       	ldi	r25, 0x02	; 2
    6212:	a9 16       	cp	r10, r25
    6214:	b1 04       	cpc	r11, r1
    6216:	49 f0       	breq	.+18     	; 0x622a <_Z10EditNumDlgPv11PointerTypeiihPKc+0x132>
    6218:	a1 14       	cp	r10, r1
    621a:	b1 04       	cpc	r11, r1
    621c:	49 f4       	brne	.+18     	; 0x6230 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x138>
        {
            case (PTR_INT8):  { *((int8_t*)Val)  = CurVal; break; }
    621e:	d2 01       	movw	r26, r4
    6220:	cc 92       	st	X, r12
    6222:	06 c0       	rjmp	.+12     	; 0x6230 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x138>
            case (PTR_UINT8): { *((uint8_t*)Val) = CurVal; break; }
    6224:	f2 01       	movw	r30, r4
    6226:	c0 82       	st	Z, r12
    6228:	03 c0       	rjmp	.+6      	; 0x6230 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x138>
            case (PTR_INT16): { *((int16_t*)Val) = CurVal; break; }
    622a:	d2 01       	movw	r26, r4
    622c:	cd 92       	st	X+, r12
    622e:	dc 92       	st	X, r13
    }

    int16_t CurVal = BackUp;
    uint8_t Kbd = 0;
    char    str[10];
    do
    6230:	80 32       	cpi	r24, 0x20	; 32
    6232:	21 f0       	breq	.+8      	; 0x623c <_Z10EditNumDlgPv11PointerTypeiihPKc+0x144>
            case (PTR_INT8):  { *((int8_t*)Val)  = CurVal; break; }
            case (PTR_UINT8): { *((uint8_t*)Val) = CurVal; break; }
            case (PTR_INT16): { *((int16_t*)Val) = CurVal; break; }
        }

    } while((Kbd != B_ENTER) && (Kbd != B_BACK));
    6234:	80 31       	cpi	r24, 0x10	; 16
    6236:	09 f0       	breq	.+2      	; 0x623a <_Z10EditNumDlgPv11PointerTypeiihPKc+0x142>
    6238:	9f cf       	rjmp	.-194    	; 0x6178 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x80>
    623a:	06 c0       	rjmp	.+12     	; 0x6248 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x150>

    if(Kbd == B_ENTER)
        return BackUp != CurVal;
    623c:	81 e0       	ldi	r24, 0x01	; 1
    623e:	2c 14       	cp	r2, r12
    6240:	3d 04       	cpc	r3, r13
    6242:	b1 f4       	brne	.+44     	; 0x6270 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x178>
    6244:	80 e0       	ldi	r24, 0x00	; 0
    6246:	14 c0       	rjmp	.+40     	; 0x6270 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x178>
    else
    {
        // Restore Val
        switch(PtrType)
    6248:	f1 e0       	ldi	r31, 0x01	; 1
    624a:	af 16       	cp	r10, r31
    624c:	b1 04       	cpc	r11, r1
    624e:	19 f4       	brne	.+6      	; 0x6256 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x15e>
        {
            case (PTR_INT8):  { *((int8_t*)Val)  = BackUp; break; }
            case (PTR_UINT8): { *((uint8_t*)Val) = BackUp; break; }
    6250:	d2 01       	movw	r26, r4
    6252:	2c 92       	st	X, r2
    6254:	f7 cf       	rjmp	.-18     	; 0x6244 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x14c>
    if(Kbd == B_ENTER)
        return BackUp != CurVal;
    else
    {
        // Restore Val
        switch(PtrType)
    6256:	82 e0       	ldi	r24, 0x02	; 2
    6258:	a8 16       	cp	r10, r24
    625a:	b1 04       	cpc	r11, r1
    625c:	21 f4       	brne	.+8      	; 0x6266 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x16e>
        {
            case (PTR_INT8):  { *((int8_t*)Val)  = BackUp; break; }
            case (PTR_UINT8): { *((uint8_t*)Val) = BackUp; break; }
            case (PTR_INT16): { *((int16_t*)Val) = BackUp; break; }
    625e:	f2 01       	movw	r30, r4
    6260:	31 82       	std	Z+1, r3	; 0x01
    6262:	20 82       	st	Z, r2
    6264:	ef cf       	rjmp	.-34     	; 0x6244 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x14c>
    if(Kbd == B_ENTER)
        return BackUp != CurVal;
    else
    {
        // Restore Val
        switch(PtrType)
    6266:	ab 28       	or	r10, r11
    6268:	69 f7       	brne	.-38     	; 0x6244 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x14c>
        {
            case (PTR_INT8):  { *((int8_t*)Val)  = BackUp; break; }
    626a:	f2 01       	movw	r30, r4
    626c:	20 82       	st	Z, r2
    626e:	ea cf       	rjmp	.-44     	; 0x6244 <_Z10EditNumDlgPv11PointerTypeiihPKc+0x14c>
            case (PTR_INT16): { *((int16_t*)Val) = BackUp; break; }
        }

        return false;
    }
}
    6270:	2e 96       	adiw	r28, 0x0e	; 14
    6272:	0f b6       	in	r0, 0x3f	; 63
    6274:	f8 94       	cli
    6276:	de bf       	out	0x3e, r29	; 62
    6278:	0f be       	out	0x3f, r0	; 63
    627a:	cd bf       	out	0x3d, r28	; 61
    627c:	df 91       	pop	r29
    627e:	cf 91       	pop	r28
    6280:	1f 91       	pop	r17
    6282:	0f 91       	pop	r16
    6284:	ff 90       	pop	r15
    6286:	ef 90       	pop	r14
    6288:	df 90       	pop	r13
    628a:	cf 90       	pop	r12
    628c:	bf 90       	pop	r11
    628e:	af 90       	pop	r10
    6290:	9f 90       	pop	r9
    6292:	8f 90       	pop	r8
    6294:	7f 90       	pop	r7
    6296:	6f 90       	pop	r6
    6298:	5f 90       	pop	r5
    629a:	4f 90       	pop	r4
    629c:	3f 90       	pop	r3
    629e:	2f 90       	pop	r2
    62a0:	08 95       	ret

000062a2 <_Z10EditStrDlgPchRK11FontProfilePKcS2_>:
    'x','Y','y','Z','z'
};


bool EditStrDlg(char* Str, uint8_t StrLen, const FontProfile& StrFont, const char* Header, const FontProfile& HeaderFont)
{
    62a2:	2f 92       	push	r2
    62a4:	3f 92       	push	r3
    62a6:	4f 92       	push	r4
    62a8:	5f 92       	push	r5
    62aa:	6f 92       	push	r6
    62ac:	7f 92       	push	r7
    62ae:	8f 92       	push	r8
    62b0:	9f 92       	push	r9
    62b2:	af 92       	push	r10
    62b4:	bf 92       	push	r11
    62b6:	cf 92       	push	r12
    62b8:	df 92       	push	r13
    62ba:	ef 92       	push	r14
    62bc:	ff 92       	push	r15
    62be:	0f 93       	push	r16
    62c0:	1f 93       	push	r17
    62c2:	cf 93       	push	r28
    62c4:	df 93       	push	r29
    62c6:	cd b7       	in	r28, 0x3d	; 61
    62c8:	de b7       	in	r29, 0x3e	; 62
    62ca:	6c 97       	sbiw	r28, 0x1c	; 28
    62cc:	0f b6       	in	r0, 0x3f	; 63
    62ce:	f8 94       	cli
    62d0:	de bf       	out	0x3e, r29	; 62
    62d2:	0f be       	out	0x3f, r0	; 63
    62d4:	cd bf       	out	0x3d, r28	; 61
    62d6:	9c 8b       	std	Y+20, r25	; 0x14
    62d8:	8b 8b       	std	Y+19, r24	; 0x13
    62da:	5a 8b       	std	Y+18, r21	; 0x12
    62dc:	49 8b       	std	Y+17, r20	; 0x11
    62de:	49 01       	movw	r8, r18
    62e0:	38 01       	movw	r6, r16
    const uint8_t  STR_LEN_MAX = 15;
    const uint8_t  CHAR_INDENT = 1;
    const uint16_t BUTTON_SENSIVITY = 100;

    uint8_t StrTableIndex[STR_LEN_MAX + 1] = {0};
    62e2:	9e 01       	movw	r18, r28
    62e4:	2f 5f       	subi	r18, 0xFF	; 255
    62e6:	3f 4f       	sbci	r19, 0xFF	; 255
    62e8:	69 01       	movw	r12, r18
    62ea:	80 e1       	ldi	r24, 0x10	; 16
    62ec:	d9 01       	movw	r26, r18
    62ee:	1d 92       	st	X+, r1
    62f0:	8a 95       	dec	r24
    62f2:	e9 f7       	brne	.-6      	; 0x62ee <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x4c>
    62f4:	46 2e       	mov	r4, r22
    62f6:	bf e0       	ldi	r27, 0x0F	; 15
    62f8:	b6 17       	cp	r27, r22
    62fa:	10 f4       	brcc	.+4      	; 0x6300 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x5e>
    62fc:	0f e0       	ldi	r16, 0x0F	; 15
    62fe:	40 2e       	mov	r4, r16

    if(StrLen > STR_LEN_MAX)
        StrLen = STR_LEN_MAX;

    // Перевод из строки в указатели позиции в таблице
    for(uint8_t i = 0; i < StrLen; ++i)
    6300:	8b 89       	ldd	r24, Y+19	; 0x13
    6302:	9c 89       	ldd	r25, Y+20	; 0x14
    6304:	f6 01       	movw	r30, r12
    6306:	cf 8a       	std	Y+23, r12	; 0x17
    6308:	2e 2f       	mov	r18, r30
    630a:	2c 19       	sub	r18, r12
    630c:	24 15       	cp	r18, r4
    630e:	80 f4       	brcc	.+32     	; 0x6330 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x8e>
    {
        for(uint8_t j = 0; j < ARRAY_SIZE(EditStrDlgTable); ++j)
        {
            if(Str[i] == EditStrDlgTable[j])
    6310:	dc 01       	movw	r26, r24
    6312:	3d 91       	ld	r19, X+
    6314:	cd 01       	movw	r24, r26
    6316:	ae e8       	ldi	r26, 0x8E	; 142
    6318:	b4 e0       	ldi	r27, 0x04	; 4
    631a:	20 e0       	ldi	r18, 0x00	; 0
    631c:	4d 91       	ld	r20, X+
    631e:	34 13       	cpse	r19, r20
    6320:	02 c0       	rjmp	.+4      	; 0x6326 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x84>
            {
                StrTableIndex[i] = j;
    6322:	20 83       	st	Z, r18
                break;
    6324:	03 c0       	rjmp	.+6      	; 0x632c <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x8a>
        StrLen = STR_LEN_MAX;

    // Перевод из строки в указатели позиции в таблице
    for(uint8_t i = 0; i < StrLen; ++i)
    {
        for(uint8_t j = 0; j < ARRAY_SIZE(EditStrDlgTable); ++j)
    6326:	2f 5f       	subi	r18, 0xFF	; 255
    6328:	21 34       	cpi	r18, 0x41	; 65
    632a:	c1 f7       	brne	.-16     	; 0x631c <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x7a>
    632c:	31 96       	adiw	r30, 0x01	; 1
    632e:	ec cf       	rjmp	.-40     	; 0x6308 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x66>
            }
        }
    }

    // Set width and height of window
    uint8_t W = (StrFont.W + CHAR_INDENT) * StrLen;
    6330:	e9 89       	ldd	r30, Y+17	; 0x11
    6332:	fa 89       	ldd	r31, Y+18	; 0x12
    6334:	30 80       	ld	r3, Z
    6336:	84 2d       	mov	r24, r4
    6338:	43 9c       	mul	r4, r3
    633a:	80 0d       	add	r24, r0
    633c:	11 24       	eor	r1, r1
    uint8_t H = StrFont.H;
    633e:	91 81       	ldd	r25, Z+1	; 0x01

    if(Header != NULL)
    6340:	81 14       	cp	r8, r1
    6342:	91 04       	cpc	r9, r1
    6344:	79 f0       	breq	.+30     	; 0x6364 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0xc2>
    {
        const uint8_t HeaderWidth = HeaderFont.W * strlen(Header);
    6346:	f4 01       	movw	r30, r8
    6348:	01 90       	ld	r0, Z+
    634a:	00 20       	and	r0, r0
    634c:	e9 f7       	brne	.-6      	; 0x6348 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0xa6>
    634e:	31 97       	sbiw	r30, 0x01	; 1
    6350:	e8 19       	sub	r30, r8
    6352:	f9 09       	sbc	r31, r9
    6354:	d3 01       	movw	r26, r6
    6356:	2c 91       	ld	r18, X
    6358:	2e 9f       	mul	r18, r30
    635a:	e0 2d       	mov	r30, r0
    635c:	11 24       	eor	r1, r1
    635e:	8e 17       	cp	r24, r30
    6360:	08 f4       	brcc	.+2      	; 0x6364 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0xc2>
    6362:	8e 2f       	mov	r24, r30
        if(W < HeaderWidth)
            W = HeaderWidth;
    }

    // Additional window padding
    W += StrFont.W * 2;
    6364:	33 0c       	add	r3, r3
    6366:	38 0e       	add	r3, r24
    H += StrFont.H;
    6368:	99 0f       	add	r25, r25

    uint8_t X = (TFT_ScreenWidth - W)  / 2;
    636a:	20 ea       	ldi	r18, 0xA0	; 160
    636c:	30 e0       	ldi	r19, 0x00	; 0
    636e:	23 19       	sub	r18, r3
    6370:	31 09       	sbc	r19, r1
    6372:	37 ff       	sbrs	r19, 7
    6374:	02 c0       	rjmp	.+4      	; 0x637a <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0xd8>
    6376:	2f 5f       	subi	r18, 0xFF	; 255
    6378:	3f 4f       	sbci	r19, 0xFF	; 255
    637a:	59 01       	movw	r10, r18
    637c:	b5 94       	asr	r11
    637e:	a7 94       	ror	r10
    6380:	2a 2c       	mov	r2, r10
    uint8_t Y = (TFT_ScreenHeight - H) / 2;
    6382:	20 e8       	ldi	r18, 0x80	; 128
    6384:	30 e0       	ldi	r19, 0x00	; 0
    6386:	29 1b       	sub	r18, r25
    6388:	31 09       	sbc	r19, r1
    638a:	37 ff       	sbrs	r19, 7
    638c:	02 c0       	rjmp	.+4      	; 0x6392 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0xf0>
    638e:	2f 5f       	subi	r18, 0xFF	; 255
    6390:	3f 4f       	sbci	r19, 0xFF	; 255
    6392:	35 95       	asr	r19
    6394:	27 95       	ror	r18
    6396:	52 2e       	mov	r5, r18

    // Render Header
    if(Header != NULL)
    6398:	81 14       	cp	r8, r1
    639a:	91 04       	cpc	r9, r1
    639c:	79 f1       	breq	.+94     	; 0x63fc <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x15a>
    {
        Y += HeaderFont.H / 2;                                                         // Сдвигаем окно вниз на половину величины заголовка
    639e:	f3 01       	movw	r30, r6
    63a0:	81 81       	ldd	r24, Z+1	; 0x01
    63a2:	58 2e       	mov	r5, r24
    63a4:	56 94       	lsr	r5
    63a6:	52 0e       	add	r5, r18
        gfx_DrawRectangle(X - 1, Y - HeaderFont.H - 2, X + W + 1, Y + 1, COLOR_BACKG); // Очищаем рамку вокруг заголовка
    63a8:	b3 2c       	mov	r11, r3
    63aa:	ba 0c       	add	r11, r10
    63ac:	21 e0       	ldi	r18, 0x01	; 1
    63ae:	25 0d       	add	r18, r5
    63b0:	41 e0       	ldi	r20, 0x01	; 1
    63b2:	4b 0d       	add	r20, r11
    63b4:	65 2d       	mov	r22, r5
    63b6:	68 1b       	sub	r22, r24
    63b8:	62 50       	subi	r22, 0x02	; 2
    63ba:	e1 2c       	mov	r14, r1
    63bc:	00 e0       	ldi	r16, 0x00	; 0
    63be:	10 e0       	ldi	r17, 0x00	; 0
    63c0:	8f ef       	ldi	r24, 0xFF	; 255
    63c2:	8a 0d       	add	r24, r10
    63c4:	9c 8f       	std	Y+28, r25	; 0x1c
    63c6:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
        gfx_FillRectangle(X, Y - HeaderFont.H - 1, X + W, Y, COLOR_BACKG);             // Очищаем место под заголовок
    63ca:	d3 01       	movw	r26, r6
    63cc:	11 96       	adiw	r26, 0x01	; 1
    63ce:	6c 91       	ld	r22, X
    63d0:	60 95       	com	r22
    63d2:	65 0d       	add	r22, r5
    63d4:	25 2d       	mov	r18, r5
    63d6:	4b 2d       	mov	r20, r11
    63d8:	8a 2d       	mov	r24, r10
    63da:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
        gfx_PrintString(X + 1, Y - HeaderFont.H, Header, COLOR_FRONT, HeaderFont);     // Выводим заголовок
    63de:	f3 01       	movw	r30, r6
    63e0:	81 81       	ldd	r24, Z+1	; 0x01
    63e2:	65 2d       	mov	r22, r5
    63e4:	68 1b       	sub	r22, r24
    63e6:	e1 2c       	mov	r14, r1
    63e8:	f1 2c       	mov	r15, r1
    63ea:	83 01       	movw	r16, r6
    63ec:	21 e0       	ldi	r18, 0x01	; 1
    63ee:	30 e0       	ldi	r19, 0x00	; 0
    63f0:	a4 01       	movw	r20, r8
    63f2:	81 e0       	ldi	r24, 0x01	; 1
    63f4:	8a 0d       	add	r24, r10
    63f6:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    63fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    }

    uint8_t Kbd = 0;
    uint8_t Sel = 0;
    63fc:	b1 2c       	mov	r11, r1
    do
    {   
        // Clear rect and draw border
        gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_FRONT);
    63fe:	a5 2c       	mov	r10, r5
    6400:	a9 0e       	add	r10, r25
    6402:	32 0c       	add	r3, r2
    6404:	77 24       	eor	r7, r7
    6406:	73 94       	inc	r7
    6408:	7a 0c       	add	r7, r10
    640a:	f1 e0       	ldi	r31, 0x01	; 1
    640c:	f3 0d       	add	r31, r3
    640e:	f8 8f       	std	Y+24, r31	; 0x18
    6410:	2f ef       	ldi	r18, 0xFF	; 255
    6412:	22 0d       	add	r18, r2
    6414:	29 8f       	std	Y+25, r18	; 0x19
        gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_BACKG);
        
        const uint8_t x = (TFT_ScreenWidth - (StrFont.W + CHAR_INDENT) * StrLen) / 2;
    6416:	84 2c       	mov	r8, r4
    6418:	91 2c       	mov	r9, r1

        Kbd = WaitButtonPress(B_ANY);

        if((Kbd == B_LEFT) && (Sel > 0))
            Sel--;
        if((Kbd == B_RIGHT) && (Sel < StrLen - 1))
    641a:	c4 01       	movw	r24, r8
    641c:	01 97       	sbiw	r24, 0x01	; 1
    641e:	9b 8f       	std	Y+27, r25	; 0x1b
    6420:	8a 8f       	std	Y+26, r24	; 0x1a
    uint8_t Kbd = 0;
    uint8_t Sel = 0;
    do
    {   
        // Clear rect and draw border
        gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_FRONT);
    6422:	01 e0       	ldi	r16, 0x01	; 1
    6424:	10 e0       	ldi	r17, 0x00	; 0
    6426:	27 2d       	mov	r18, r7
    6428:	48 8d       	ldd	r20, Y+24	; 0x18
    642a:	65 2d       	mov	r22, r5
    642c:	89 8d       	ldd	r24, Y+25	; 0x19
    642e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
        gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_BACKG);
    6432:	e1 2c       	mov	r14, r1
    6434:	00 e0       	ldi	r16, 0x00	; 0
    6436:	10 e0       	ldi	r17, 0x00	; 0
    6438:	2a 2d       	mov	r18, r10
    643a:	43 2d       	mov	r20, r3
    643c:	65 2d       	mov	r22, r5
    643e:	82 2d       	mov	r24, r2
    6440:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
        
        const uint8_t x = (TFT_ScreenWidth - (StrFont.W + CHAR_INDENT) * StrLen) / 2;
    6444:	a9 89       	ldd	r26, Y+17	; 0x11
    6446:	ba 89       	ldd	r27, Y+18	; 0x12
    6448:	2c 91       	ld	r18, X
    644a:	30 e0       	ldi	r19, 0x00	; 0
    644c:	20 95       	com	r18
    644e:	30 95       	com	r19
    6450:	28 9d       	mul	r18, r8
    6452:	c0 01       	movw	r24, r0
    6454:	29 9d       	mul	r18, r9
    6456:	90 0d       	add	r25, r0
    6458:	38 9d       	mul	r19, r8
    645a:	90 0d       	add	r25, r0
    645c:	11 24       	eor	r1, r1
    645e:	80 56       	subi	r24, 0x60	; 96
    6460:	9f 4f       	sbci	r25, 0xFF	; 255
    6462:	97 fd       	sbrc	r25, 7
    6464:	01 96       	adiw	r24, 0x01	; 1
    6466:	fc 01       	movw	r30, r24
    6468:	f5 95       	asr	r31
    646a:	e7 95       	ror	r30
    646c:	fe 8b       	std	Y+22, r31	; 0x16
    646e:	ed 8b       	std	Y+21, r30	; 0x15
    6470:	6d 88       	ldd	r6, Y+21	; 0x15

        for(uint8_t i = 0; i < StrLen; ++i)
    6472:	76 01       	movw	r14, r12
    6474:	8e 2d       	mov	r24, r14
    6476:	bf 89       	ldd	r27, Y+23	; 0x17
    6478:	8b 1b       	sub	r24, r27
    647a:	84 15       	cp	r24, r4
    647c:	c8 f4       	brcc	.+50     	; 0x64b0 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x20e>
        {
            gfx_PrintChar(
                    x + i * (StrFont.W + CHAR_INDENT),
                    Y + StrFont.H / 2,
                    EditStrDlgTable[StrTableIndex[i]],
    647e:	d7 01       	movw	r26, r14
    6480:	ed 91       	ld	r30, X+
    6482:	7d 01       	movw	r14, r26
                    COLOR_BACKG,
                    StrFont
                );
    6484:	f0 e0       	ldi	r31, 0x00	; 0
        for(uint8_t i = 0; i < StrLen; ++i)
        {
            gfx_PrintChar(
                    x + i * (StrFont.W + CHAR_INDENT),
                    Y + StrFont.H / 2,
                    EditStrDlgTable[StrTableIndex[i]],
    6486:	e2 57       	subi	r30, 0x72	; 114
    6488:	fb 4f       	sbci	r31, 0xFB	; 251
                    COLOR_BACKG,
                    StrFont
                );
    648a:	a9 89       	ldd	r26, Y+17	; 0x11
    648c:	ba 89       	ldd	r27, Y+18	; 0x12
    648e:	11 96       	adiw	r26, 0x01	; 1
    6490:	6c 91       	ld	r22, X
    6492:	11 97       	sbiw	r26, 0x01	; 1
    6494:	66 95       	lsr	r22
    6496:	65 0d       	add	r22, r5
        const uint8_t x = (TFT_ScreenWidth - (StrFont.W + CHAR_INDENT) * StrLen) / 2;

        for(uint8_t i = 0; i < StrLen; ++i)
        {
            gfx_PrintChar(
                    x + i * (StrFont.W + CHAR_INDENT),
    6498:	9c 91       	ld	r25, X
                    Y + StrFont.H / 2,
                    EditStrDlgTable[StrTableIndex[i]],
                    COLOR_BACKG,
                    StrFont
                );
    649a:	89 9f       	mul	r24, r25
    649c:	80 0d       	add	r24, r0
    649e:	11 24       	eor	r1, r1
    64a0:	8d 01       	movw	r16, r26
    64a2:	20 e0       	ldi	r18, 0x00	; 0
    64a4:	30 e0       	ldi	r19, 0x00	; 0
    64a6:	40 81       	ld	r20, Z
    64a8:	86 0d       	add	r24, r6
    64aa:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
    64ae:	e2 cf       	rjmp	.-60     	; 0x6474 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x1d2>
        }

        gfx_DrawRectangle(x + Sel * (StrFont.W + 1) - 2,          Y + StrFont.H/2 - 1,
                          x + Sel * (StrFont.W + 1) + StrFont.W, Y + StrFont.H/2 + StrFont.H, COLOR_BACKG);
    64b0:	e9 89       	ldd	r30, Y+17	; 0x11
    64b2:	fa 89       	ldd	r31, Y+18	; 0x12
    64b4:	21 81       	ldd	r18, Z+1	; 0x01
    64b6:	62 2f       	mov	r22, r18
    64b8:	66 95       	lsr	r22
    64ba:	65 0d       	add	r22, r5
    64bc:	40 81       	ld	r20, Z
    64be:	8b 2d       	mov	r24, r11
    64c0:	b4 9e       	mul	r11, r20
    64c2:	80 0d       	add	r24, r0
    64c4:	11 24       	eor	r1, r1
    64c6:	fd 89       	ldd	r31, Y+21	; 0x15
    64c8:	8f 0f       	add	r24, r31
    64ca:	26 0f       	add	r18, r22
    64cc:	48 0f       	add	r20, r24
    64ce:	61 50       	subi	r22, 0x01	; 1
    64d0:	e1 2c       	mov	r14, r1
    64d2:	00 e0       	ldi	r16, 0x00	; 0
    64d4:	10 e0       	ldi	r17, 0x00	; 0
    64d6:	82 50       	subi	r24, 0x02	; 2
    64d8:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>

        gfx_Refresh();
    64dc:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>

        Kbd = WaitButtonPress(B_ANY);
    64e0:	8f ef       	ldi	r24, 0xFF	; 255
    64e2:	0e 94 67 2a 	call	0x54ce	; 0x54ce <_Z15WaitButtonPressh>
    64e6:	18 2f       	mov	r17, r24

        if((Kbd == B_LEFT) && (Sel > 0))
    64e8:	84 30       	cpi	r24, 0x04	; 4
    64ea:	21 f4       	brne	.+8      	; 0x64f4 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x252>
    64ec:	bb 20       	and	r11, r11
    64ee:	09 f1       	breq	.+66     	; 0x6532 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x290>
            Sel--;
    64f0:	ba 94       	dec	r11
    64f2:	1f c0       	rjmp	.+62     	; 0x6532 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x290>
        if((Kbd == B_RIGHT) && (Sel < StrLen - 1))
    64f4:	88 30       	cpi	r24, 0x08	; 8
    64f6:	49 f4       	brne	.+18     	; 0x650a <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x268>
    64f8:	2b 2d       	mov	r18, r11
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    64fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6500:	28 17       	cp	r18, r24
    6502:	39 07       	cpc	r19, r25
    6504:	b4 f4       	brge	.+44     	; 0x6532 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x290>
            Sel++;
    6506:	b3 94       	inc	r11
    6508:	14 c0       	rjmp	.+40     	; 0x6532 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x290>

        if((Kbd == B_UP) && (StrTableIndex[Sel] > 0))
    650a:	81 30       	cpi	r24, 0x01	; 1
    650c:	41 f4       	brne	.+16     	; 0x651e <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x27c>
    650e:	f6 01       	movw	r30, r12
    6510:	eb 0d       	add	r30, r11
    6512:	f1 1d       	adc	r31, r1
    6514:	80 81       	ld	r24, Z
    6516:	88 23       	and	r24, r24
    6518:	61 f0       	breq	.+24     	; 0x6532 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x290>
        {
            StrTableIndex[Sel]--;
    651a:	81 50       	subi	r24, 0x01	; 1
    651c:	09 c0       	rjmp	.+18     	; 0x6530 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x28e>
        }
        if((Kbd == B_DOWN) && (StrTableIndex[Sel] < ARRAY_SIZE(EditStrDlgTable) - 1))
    651e:	82 30       	cpi	r24, 0x02	; 2
    6520:	41 f4       	brne	.+16     	; 0x6532 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x290>
    6522:	f6 01       	movw	r30, r12
    6524:	eb 0d       	add	r30, r11
    6526:	f1 1d       	adc	r31, r1
    6528:	80 81       	ld	r24, Z
    652a:	80 34       	cpi	r24, 0x40	; 64
    652c:	10 f4       	brcc	.+4      	; 0x6532 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x290>
        {
            StrTableIndex[Sel]++;
    652e:	8f 5f       	subi	r24, 0xFF	; 255
    6530:	80 83       	st	Z, r24
        }

        WaitEmptyButtons(BUTTON_SENSIVITY);
    6532:	84 e6       	ldi	r24, 0x64	; 100
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
    }
    while(!(Kbd & (B_BACK | B_ENTER)));
    653a:	81 2f       	mov	r24, r17
    653c:	80 73       	andi	r24, 0x30	; 48
        gfx_PrintString(X + 1, Y - HeaderFont.H, Header, COLOR_FRONT, HeaderFont);     // Выводим заголовок
    }

    uint8_t Kbd = 0;
    uint8_t Sel = 0;
    do
    653e:	09 f4       	brne	.+2      	; 0x6542 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x2a0>
    6540:	70 cf       	rjmp	.-288    	; 0x6422 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x180>

        WaitEmptyButtons(BUTTON_SENSIVITY);
    }
    while(!(Kbd & (B_BACK | B_ENTER)));

    if(Kbd & B_ENTER)
    6542:	15 ff       	sbrs	r17, 5
    6544:	1f c0       	rjmp	.+62     	; 0x6584 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x2e2>
    6546:	8b 89       	ldd	r24, Y+19	; 0x13
    6548:	9c 89       	ldd	r25, Y+20	; 0x14
    654a:	f6 01       	movw	r30, r12
    654c:	2e 2f       	mov	r18, r30
    654e:	bf 89       	ldd	r27, Y+23	; 0x17
    6550:	2b 1b       	sub	r18, r27
    {
        // Return entered string
        for(uint8_t i = 0; i < StrLen; i++)
    6552:	24 15       	cp	r18, r4
    6554:	48 f4       	brcc	.+18     	; 0x6568 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x2c6>
            Str[i] = EditStrDlgTable[StrTableIndex[i]];
    6556:	a1 91       	ld	r26, Z+
    6558:	b0 e0       	ldi	r27, 0x00	; 0
    655a:	a2 57       	subi	r26, 0x72	; 114
    655c:	bb 4f       	sbci	r27, 0xFB	; 251
    655e:	2c 91       	ld	r18, X
    6560:	dc 01       	movw	r26, r24
    6562:	2d 93       	st	X+, r18
    6564:	cd 01       	movw	r24, r26
    6566:	f2 cf       	rjmp	.-28     	; 0x654c <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x2aa>
        
        Str[StrLen] = '\0';
    6568:	eb 89       	ldd	r30, Y+19	; 0x13
    656a:	fc 89       	ldd	r31, Y+20	; 0x14
    656c:	e4 0d       	add	r30, r4
    656e:	f1 1d       	adc	r31, r1
    6570:	10 82       	st	Z, r1
        
        for(uint8_t i = StrLen - 1; i >= 0; i--)
    6572:	4a 94       	dec	r4
        {
            if(Str[i] == ' ')
    6574:	eb 89       	ldd	r30, Y+19	; 0x13
    6576:	fc 89       	ldd	r31, Y+20	; 0x14
    6578:	e4 0d       	add	r30, r4
    657a:	f1 1d       	adc	r31, r1
    657c:	80 81       	ld	r24, Z
    657e:	80 32       	cpi	r24, 0x20	; 32
    6580:	b9 f3       	breq	.-18     	; 0x6570 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x2ce>
    6582:	02 c0       	rjmp	.+4      	; 0x6588 <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x2e6>
        }
        
        return true;
    }
    
    return false;
    6584:	80 e0       	ldi	r24, 0x00	; 0
    6586:	01 c0       	rjmp	.+2      	; 0x658a <_Z10EditStrDlgPchRK11FontProfilePKcS2_+0x2e8>
              Str[i] = '\0';
            else
              break;
        }
        
        return true;
    6588:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    return false;
}
    658a:	6c 96       	adiw	r28, 0x1c	; 28
    658c:	0f b6       	in	r0, 0x3f	; 63
    658e:	f8 94       	cli
    6590:	de bf       	out	0x3e, r29	; 62
    6592:	0f be       	out	0x3f, r0	; 63
    6594:	cd bf       	out	0x3d, r28	; 61
    6596:	df 91       	pop	r29
    6598:	cf 91       	pop	r28
    659a:	1f 91       	pop	r17
    659c:	0f 91       	pop	r16
    659e:	ff 90       	pop	r15
    65a0:	ef 90       	pop	r14
    65a2:	df 90       	pop	r13
    65a4:	cf 90       	pop	r12
    65a6:	bf 90       	pop	r11
    65a8:	af 90       	pop	r10
    65aa:	9f 90       	pop	r9
    65ac:	8f 90       	pop	r8
    65ae:	7f 90       	pop	r7
    65b0:	6f 90       	pop	r6
    65b2:	5f 90       	pop	r5
    65b4:	4f 90       	pop	r4
    65b6:	3f 90       	pop	r3
    65b8:	2f 90       	pop	r2
    65ba:	08 95       	ret

000065bc <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh>:

// Service function
void MsgBoxStrEx(const CString* Strings, const uint8_t StrCount, const char* Header, const FontProfile& HeaderFont, uint8_t Color)
{
    65bc:	3f 92       	push	r3
    65be:	4f 92       	push	r4
    65c0:	5f 92       	push	r5
    65c2:	6f 92       	push	r6
    65c4:	7f 92       	push	r7
    65c6:	8f 92       	push	r8
    65c8:	9f 92       	push	r9
    65ca:	af 92       	push	r10
    65cc:	bf 92       	push	r11
    65ce:	cf 92       	push	r12
    65d0:	df 92       	push	r13
    65d2:	ef 92       	push	r14
    65d4:	ff 92       	push	r15
    65d6:	0f 93       	push	r16
    65d8:	1f 93       	push	r17
    65da:	cf 93       	push	r28
    65dc:	df 93       	push	r29
    65de:	4c 01       	movw	r8, r24
    65e0:	76 2e       	mov	r7, r22
    65e2:	ea 01       	movw	r28, r20
    65e4:	59 01       	movw	r10, r18
    const uint8_t MSG_BOX_PADDING = 10;

    uint8_t W = 0, H = 0;
    for(uint8_t i = 0; i < StrCount; ++i)
    65e6:	dc 01       	movw	r26, r24
    65e8:	90 e0       	ldi	r25, 0x00	; 0
// Service function
void MsgBoxStrEx(const CString* Strings, const uint8_t StrCount, const char* Header, const FontProfile& HeaderFont, uint8_t Color)
{
    const uint8_t MSG_BOX_PADDING = 10;

    uint8_t W = 0, H = 0;
    65ea:	80 e0       	ldi	r24, 0x00	; 0
    65ec:	40 e0       	ldi	r20, 0x00	; 0
    for(uint8_t i = 0; i < StrCount; ++i)
    65ee:	97 15       	cp	r25, r7
    65f0:	b9 f0       	breq	.+46     	; 0x6620 <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh+0x64>
    m_VSpace  = VSpace;
}

inline uint8_t CString::GetWidth() const
{
    return m_StrFont->W * m_Len;
    65f2:	13 96       	adiw	r26, 0x03	; 3
    65f4:	ed 91       	ld	r30, X+
    65f6:	fc 91       	ld	r31, X
    65f8:	14 97       	sbiw	r26, 0x04	; 4
    65fa:	12 96       	adiw	r26, 0x02	; 2
    65fc:	3c 91       	ld	r19, X
    65fe:	12 97       	sbiw	r26, 0x02	; 2
    6600:	20 81       	ld	r18, Z
    6602:	32 9f       	mul	r19, r18
    6604:	20 2d       	mov	r18, r0
    6606:	11 24       	eor	r1, r1
    6608:	42 17       	cp	r20, r18
    660a:	08 f4       	brcc	.+2      	; 0x660e <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh+0x52>
    660c:	42 2f       	mov	r20, r18
    {
        const uint8_t StrW = Strings[i].GetWidth();
        if(W < StrW)
            W = StrW;
        
        H += Strings[i].GetHeight() + Strings[i].GetVSpace();
    660e:	31 81       	ldd	r19, Z+1	; 0x01
    6610:	17 96       	adiw	r26, 0x07	; 7
    6612:	2c 91       	ld	r18, X
    6614:	17 97       	sbiw	r26, 0x07	; 7
    6616:	83 0f       	add	r24, r19
    6618:	82 0f       	add	r24, r18
void MsgBoxStrEx(const CString* Strings, const uint8_t StrCount, const char* Header, const FontProfile& HeaderFont, uint8_t Color)
{
    const uint8_t MSG_BOX_PADDING = 10;

    uint8_t W = 0, H = 0;
    for(uint8_t i = 0; i < StrCount; ++i)
    661a:	9f 5f       	subi	r25, 0xFF	; 255
    661c:	18 96       	adiw	r26, 0x08	; 8
    661e:	e7 cf       	rjmp	.-50     	; 0x65ee <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh+0x32>
    6620:	94 2f       	mov	r25, r20
        
        H += Strings[i].GetHeight() + Strings[i].GetVSpace();
    }

    // Check Header width
    if(Header != NULL)
    6622:	20 97       	sbiw	r28, 0x00	; 0
    6624:	79 f0       	breq	.+30     	; 0x6644 <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh+0x88>
    {
        // Вычисляем ширину заголовка в пикселях
        const uint8_t StrW = HeaderFont.W * strlen(Header);
    6626:	fe 01       	movw	r30, r28
    6628:	01 90       	ld	r0, Z+
    662a:	00 20       	and	r0, r0
    662c:	e9 f7       	brne	.-6      	; 0x6628 <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh+0x6c>
    662e:	31 97       	sbiw	r30, 0x01	; 1
    6630:	ec 1b       	sub	r30, r28
    6632:	fd 0b       	sbc	r31, r29
    6634:	d5 01       	movw	r26, r10
    6636:	4c 91       	ld	r20, X
    6638:	4e 9f       	mul	r20, r30
    663a:	40 2d       	mov	r20, r0
    663c:	11 24       	eor	r1, r1
    663e:	49 17       	cp	r20, r25
    6640:	08 f4       	brcc	.+2      	; 0x6644 <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh+0x88>
    6642:	49 2f       	mov	r20, r25
        if(W < StrW)
            W = StrW;
    }

    H += MSG_BOX_PADDING * 2;
    6644:	a4 e1       	ldi	r26, 0x14	; 20
    6646:	6a 2e       	mov	r6, r26
    6648:	68 0e       	add	r6, r24
    W += MSG_BOX_PADDING * 2;
    664a:	4c 5e       	subi	r20, 0xEC	; 236

    uint8_t X = (TFT_ScreenWidth - W) / 2;
    664c:	80 ea       	ldi	r24, 0xA0	; 160
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	84 1b       	sub	r24, r20
    6652:	91 09       	sbc	r25, r1
    6654:	97 fd       	sbrc	r25, 7
    6656:	01 96       	adiw	r24, 0x01	; 1
    6658:	6c 01       	movw	r12, r24
    665a:	d5 94       	asr	r13
    665c:	c7 94       	ror	r12
    uint8_t Y = (TFT_ScreenHeight - H) / 2;
    665e:	e0 e8       	ldi	r30, 0x80	; 128
    6660:	f0 e0       	ldi	r31, 0x00	; 0
    6662:	e6 19       	sub	r30, r6
    6664:	f1 09       	sbc	r31, r1
    6666:	f7 fd       	sbrc	r31, 7
    6668:	31 96       	adiw	r30, 0x01	; 1
    666a:	df 01       	movw	r26, r30
    666c:	b5 95       	asr	r27
    666e:	a7 95       	ror	r26
    6670:	5a 2e       	mov	r5, r26
    6672:	44 2e       	mov	r4, r20
    6674:	4c 0c       	add	r4, r12
    6676:	33 24       	eor	r3, r3
    6678:	3a 94       	dec	r3
    667a:	3c 0c       	add	r3, r12

    // Draw Header
    if(Header != NULL)
    667c:	20 97       	sbiw	r28, 0x00	; 0
    667e:	61 f1       	breq	.+88     	; 0x66d8 <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh+0x11c>
    {
        Y += HeaderFont.H / 2;                                                         // Сдвигаем окно вниз на половину величины заголовка
    6680:	f5 01       	movw	r30, r10
    6682:	81 81       	ldd	r24, Z+1	; 0x01
    6684:	58 2e       	mov	r5, r24
    6686:	56 94       	lsr	r5
    6688:	5a 0e       	add	r5, r26
        gfx_DrawRectangle(X - 1, Y - HeaderFont.H - 2, X + W + 1, Y + 1, COLOR_FRONT); // Очищаем рамку вокруг заголовка
    668a:	21 e0       	ldi	r18, 0x01	; 1
    668c:	25 0d       	add	r18, r5
    668e:	65 2d       	mov	r22, r5
    6690:	68 1b       	sub	r22, r24
    6692:	62 50       	subi	r22, 0x02	; 2
    6694:	e1 2c       	mov	r14, r1
    6696:	01 e0       	ldi	r16, 0x01	; 1
    6698:	10 e0       	ldi	r17, 0x00	; 0
    669a:	41 e0       	ldi	r20, 0x01	; 1
    669c:	44 0d       	add	r20, r4
    669e:	83 2d       	mov	r24, r3
    66a0:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
        gfx_FillRectangle(X, Y - HeaderFont.H - 1, X + W, Y, COLOR_BACKG);             // Очищаем место под заголовок
    66a4:	d5 01       	movw	r26, r10
    66a6:	11 96       	adiw	r26, 0x01	; 1
    66a8:	6c 91       	ld	r22, X
    66aa:	60 95       	com	r22
    66ac:	65 0d       	add	r22, r5
    66ae:	00 e0       	ldi	r16, 0x00	; 0
    66b0:	10 e0       	ldi	r17, 0x00	; 0
    66b2:	25 2d       	mov	r18, r5
    66b4:	44 2d       	mov	r20, r4
    66b6:	8c 2d       	mov	r24, r12
    66b8:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
        gfx_PrintString(X + 1, Y - HeaderFont.H, Header, COLOR_FRONT, HeaderFont);     // Выводим заголовок
    66bc:	f5 01       	movw	r30, r10
    66be:	81 81       	ldd	r24, Z+1	; 0x01
    66c0:	65 2d       	mov	r22, r5
    66c2:	68 1b       	sub	r22, r24
    66c4:	e1 2c       	mov	r14, r1
    66c6:	f1 2c       	mov	r15, r1
    66c8:	85 01       	movw	r16, r10
    66ca:	21 e0       	ldi	r18, 0x01	; 1
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	ae 01       	movw	r20, r28
    66d0:	81 e0       	ldi	r24, 0x01	; 1
    66d2:	8c 0d       	add	r24, r12
    66d4:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    }

    // Clear rect
    gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_FRONT);
    66d8:	65 0c       	add	r6, r5
    66da:	21 e0       	ldi	r18, 0x01	; 1
    66dc:	26 0d       	add	r18, r6
    66de:	41 e0       	ldi	r20, 0x01	; 1
    66e0:	44 0d       	add	r20, r4
    66e2:	01 e0       	ldi	r16, 0x01	; 1
    66e4:	10 e0       	ldi	r17, 0x00	; 0
    66e6:	65 2d       	mov	r22, r5
    66e8:	83 2d       	mov	r24, r3
    66ea:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>
    gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_BACKG);
    66ee:	e1 2c       	mov	r14, r1
    66f0:	00 e0       	ldi	r16, 0x00	; 0
    66f2:	10 e0       	ldi	r17, 0x00	; 0
    66f4:	26 2d       	mov	r18, r6
    66f6:	44 2d       	mov	r20, r4
    66f8:	65 2d       	mov	r22, r5
    66fa:	8c 2d       	mov	r24, r12
    66fc:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
{
    return m_StrFont->W * m_Len;
}
inline uint8_t CString::GetHeight() const
{
    return m_StrFont->H;
    6700:	d4 01       	movw	r26, r8
    6702:	13 96       	adiw	r26, 0x03	; 3
    6704:	ed 91       	ld	r30, X+
    6706:	fc 91       	ld	r31, X
    6708:	14 97       	sbiw	r26, 0x04	; 4
    // Clear rect
    gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_FRONT);
    gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_BACKG);

    // Render strings
    uint8_t y = Y + Strings[0].GetHeight() / 2;
    670a:	b1 80       	ldd	r11, Z+1	; 0x01
    670c:	b6 94       	lsr	r11
    670e:	b5 0c       	add	r11, r5
    for(uint8_t i = 0; i < StrCount; ++i)
    6710:	e4 01       	movw	r28, r8
    6712:	a1 2c       	mov	r10, r1
    {
        const uint8_t x = (TFT_ScreenWidth / 2 - Strings[i].GetWidth()) / 2;
    6714:	70 e5       	ldi	r23, 0x50	; 80
    6716:	c7 2e       	mov	r12, r23
    6718:	d1 2c       	mov	r13, r1
    gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_FRONT);
    gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_BACKG);

    // Render strings
    uint8_t y = Y + Strings[0].GetHeight() / 2;
    for(uint8_t i = 0; i < StrCount; ++i)
    671a:	a7 14       	cp	r10, r7
    671c:	11 f1       	breq	.+68     	; 0x6762 <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh+0x1a6>
    m_VSpace  = VSpace;
}

inline uint8_t CString::GetWidth() const
{
    return m_StrFont->W * m_Len;
    671e:	0b 81       	ldd	r16, Y+3	; 0x03
    6720:	1c 81       	ldd	r17, Y+4	; 0x04
    m_Color = Color;
}

inline void CString::PrintString(const uint8_t x, const uint8_t y) const
{
    gfx_PrintString(x, y, m_Str, m_Color, *m_StrFont);
    6722:	2d 81       	ldd	r18, Y+5	; 0x05
    6724:	3e 81       	ldd	r19, Y+6	; 0x06
    6726:	48 81       	ld	r20, Y
    6728:	59 81       	ldd	r21, Y+1	; 0x01
    m_VSpace  = VSpace;
}

inline uint8_t CString::GetWidth() const
{
    return m_StrFont->W * m_Len;
    672a:	9a 81       	ldd	r25, Y+2	; 0x02
    672c:	f8 01       	movw	r30, r16
    672e:	80 81       	ld	r24, Z
    6730:	98 9f       	mul	r25, r24
    6732:	80 2d       	mov	r24, r0
    6734:	11 24       	eor	r1, r1

    // Render strings
    uint8_t y = Y + Strings[0].GetHeight() / 2;
    for(uint8_t i = 0; i < StrCount; ++i)
    {
        const uint8_t x = (TFT_ScreenWidth / 2 - Strings[i].GetWidth()) / 2;
    6736:	b6 01       	movw	r22, r12
    6738:	68 1b       	sub	r22, r24
    673a:	71 09       	sbc	r23, r1
    673c:	cb 01       	movw	r24, r22
    673e:	77 fd       	sbrc	r23, 7
    6740:	01 96       	adiw	r24, 0x01	; 1
    6742:	95 95       	asr	r25
    6744:	87 95       	ror	r24
    m_Color = Color;
}

inline void CString::PrintString(const uint8_t x, const uint8_t y) const
{
    gfx_PrintString(x, y, m_Str, m_Color, *m_StrFont);
    6746:	e1 2c       	mov	r14, r1
    6748:	f1 2c       	mov	r15, r1
    674a:	6b 2d       	mov	r22, r11
    674c:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
{
    return m_StrFont->W * m_Len;
}
inline uint8_t CString::GetHeight() const
{
    return m_StrFont->H;
    6750:	eb 81       	ldd	r30, Y+3	; 0x03
    6752:	fc 81       	ldd	r31, Y+4	; 0x04
    {
        const uint8_t x = (TFT_ScreenWidth / 2 - Strings[i].GetWidth()) / 2;
        
        Strings[i].PrintString(x, y);

        y += Strings[i].GetHeight() + Strings[i].GetVSpace();
    6754:	91 81       	ldd	r25, Z+1	; 0x01
    6756:	8f 81       	ldd	r24, Y+7	; 0x07
    6758:	b9 0e       	add	r11, r25
    675a:	b8 0e       	add	r11, r24
    gfx_FillRectangle(X - 1, Y, X + W + 1, Y + H + 1, COLOR_FRONT);
    gfx_DrawRectangle(X, Y, X + W, Y + H, COLOR_BACKG);

    // Render strings
    uint8_t y = Y + Strings[0].GetHeight() / 2;
    for(uint8_t i = 0; i < StrCount; ++i)
    675c:	a3 94       	inc	r10
    675e:	28 96       	adiw	r28, 0x08	; 8
    6760:	dc cf       	rjmp	.-72     	; 0x671a <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh+0x15e>

        y += Strings[i].GetHeight() + Strings[i].GetVSpace();
    }

    gfx_Refresh();
}
    6762:	df 91       	pop	r29
    6764:	cf 91       	pop	r28
    6766:	1f 91       	pop	r17
    6768:	0f 91       	pop	r16
    676a:	ff 90       	pop	r15
    676c:	ef 90       	pop	r14
    676e:	df 90       	pop	r13
    6770:	cf 90       	pop	r12
    6772:	bf 90       	pop	r11
    6774:	af 90       	pop	r10
    6776:	9f 90       	pop	r9
    6778:	8f 90       	pop	r8
    677a:	7f 90       	pop	r7
    677c:	6f 90       	pop	r6
    677e:	5f 90       	pop	r5
    6780:	4f 90       	pop	r4
    6782:	3f 90       	pop	r3
        Strings[i].PrintString(x, y);

        y += Strings[i].GetHeight() + Strings[i].GetVSpace();
    }

    gfx_Refresh();
    6784:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>

00006788 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile>:

// Result: hight byte From, low byte - To
int16_t FromToBox(const char** FromBody, const uint8_t FromN,
                  const char** ToBody,   const uint8_t ToN,
                  const char* Header,    const FontProfile& HeaderFont)
{
    6788:	2f 92       	push	r2
    678a:	3f 92       	push	r3
    678c:	4f 92       	push	r4
    678e:	5f 92       	push	r5
    6790:	6f 92       	push	r6
    6792:	7f 92       	push	r7
    6794:	8f 92       	push	r8
    6796:	9f 92       	push	r9
    6798:	af 92       	push	r10
    679a:	bf 92       	push	r11
    679c:	cf 92       	push	r12
    679e:	df 92       	push	r13
    67a0:	ef 92       	push	r14
    67a2:	ff 92       	push	r15
    67a4:	0f 93       	push	r16
    67a6:	1f 93       	push	r17
    67a8:	cf 93       	push	r28
    67aa:	df 93       	push	r29
    67ac:	cd b7       	in	r28, 0x3d	; 61
    67ae:	de b7       	in	r29, 0x3e	; 62
    67b0:	c8 54       	subi	r28, 0x48	; 72
    67b2:	d1 09       	sbc	r29, r1
    67b4:	0f b6       	in	r0, 0x3f	; 63
    67b6:	f8 94       	cli
    67b8:	de bf       	out	0x3e, r29	; 62
    67ba:	0f be       	out	0x3f, r0	; 63
    67bc:	cd bf       	out	0x3d, r28	; 61
    67be:	23 96       	adiw	r28, 0x03	; 3
    67c0:	9f af       	std	Y+63, r25	; 0x3f
    67c2:	8e af       	std	Y+62, r24	; 0x3e
    67c4:	23 97       	sbiw	r28, 0x03	; 3
    67c6:	25 96       	adiw	r28, 0x05	; 5
    67c8:	5f af       	std	Y+63, r21	; 0x3f
    67ca:	4e af       	std	Y+62, r20	; 0x3e
    67cc:	25 97       	sbiw	r28, 0x05	; 5
    67ce:	27 96       	adiw	r28, 0x07	; 7
    67d0:	1f af       	std	Y+63, r17	; 0x3f
    67d2:	0e af       	std	Y+62, r16	; 0x3e
    67d4:	27 97       	sbiw	r28, 0x07	; 7
    67d6:	29 96       	adiw	r28, 0x09	; 9
    67d8:	ff ae       	std	Y+63, r15	; 0x3f
    67da:	ee ae       	std	Y+62, r14	; 0x3e
    67dc:	29 97       	sbiw	r28, 0x09	; 9
// CString
//

CString::CString(const char* Str, FontProfile& Font, ColorIdx Color, uint8_t VSpace)
{
    m_Str     = Str;
    67de:	88 e1       	ldi	r24, 0x18	; 24
    67e0:	97 e0       	ldi	r25, 0x07	; 7
    67e2:	9a 83       	std	Y+2, r25	; 0x02
    67e4:	89 83       	std	Y+1, r24	; 0x01
    m_Len     = strlen(Str);
    67e6:	84 e0       	ldi	r24, 0x04	; 4
    67e8:	8b 83       	std	Y+3, r24	; 0x03
    m_StrFont = &Font;
    67ea:	40 ed       	ldi	r20, 0xD0	; 208
    67ec:	5c e0       	ldi	r21, 0x0C	; 12
    67ee:	5d 83       	std	Y+5, r21	; 0x05
    67f0:	4c 83       	std	Y+4, r20	; 0x04
    m_Color   = Color;
    67f2:	1f 82       	std	Y+7, r1	; 0x07
    67f4:	1e 82       	std	Y+6, r1	; 0x06
    m_VSpace  = VSpace;
    67f6:	33 e0       	ldi	r19, 0x03	; 3
    67f8:	38 87       	std	Y+8, r19	; 0x08
// CString
//

CString::CString(const char* Str, FontProfile& Font, ColorIdx Color, uint8_t VSpace)
{
    m_Str     = Str;
    67fa:	7e 01       	movw	r14, r28
    67fc:	81 e3       	ldi	r24, 0x31	; 49
    67fe:	e8 0e       	add	r14, r24
    6800:	f1 1c       	adc	r15, r1
    6802:	fa 86       	std	Y+10, r15	; 0x0a
    6804:	e9 86       	std	Y+9, r14	; 0x09
    m_Len     = strlen(Str);
    6806:	f7 01       	movw	r30, r14
    6808:	01 90       	ld	r0, Z+
    680a:	00 20       	and	r0, r0
    680c:	e9 f7       	brne	.-6      	; 0x6808 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x80>
    680e:	31 97       	sbiw	r30, 0x01	; 1
    6810:	ee 19       	sub	r30, r14
    6812:	ff 09       	sbc	r31, r15
    6814:	eb 87       	std	Y+11, r30	; 0x0b
    m_StrFont = &Font;
    6816:	8a ec       	ldi	r24, 0xCA	; 202
    6818:	9c e0       	ldi	r25, 0x0C	; 12
    681a:	9d 87       	std	Y+13, r25	; 0x0d
    681c:	8c 87       	std	Y+12, r24	; 0x0c
    m_Color   = Color;
    681e:	1f 86       	std	Y+15, r1	; 0x0f
    6820:	1e 86       	std	Y+14, r1	; 0x0e
    m_VSpace  = VSpace;
    6822:	38 8b       	std	Y+16, r19	; 0x10
// CString
//

CString::CString(const char* Str, FontProfile& Font, ColorIdx Color, uint8_t VSpace)
{
    m_Str     = Str;
    6824:	ed e1       	ldi	r30, 0x1D	; 29
    6826:	f7 e0       	ldi	r31, 0x07	; 7
    6828:	fa 8b       	std	Y+18, r31	; 0x12
    682a:	e9 8b       	std	Y+17, r30	; 0x11
    m_Len     = strlen(Str);
    682c:	3b 8b       	std	Y+19, r19	; 0x13
    m_StrFont = &Font;
    682e:	5d 8b       	std	Y+21, r21	; 0x15
    6830:	4c 8b       	std	Y+20, r20	; 0x14
    m_Color   = Color;
    6832:	1f 8a       	std	Y+23, r1	; 0x17
    6834:	1e 8a       	std	Y+22, r1	; 0x16
    m_VSpace  = VSpace;
    6836:	38 8f       	std	Y+24, r19	; 0x18
// CString
//

CString::CString(const char* Str, FontProfile& Font, ColorIdx Color, uint8_t VSpace)
{
    m_Str     = Str;
    6838:	6e 01       	movw	r12, r28
    683a:	41 e2       	ldi	r20, 0x21	; 33
    683c:	c4 0e       	add	r12, r20
    683e:	d1 1c       	adc	r13, r1
    6840:	da 8e       	std	Y+26, r13	; 0x1a
    6842:	c9 8e       	std	Y+25, r12	; 0x19
    m_Len     = strlen(Str);
    6844:	f6 01       	movw	r30, r12
    6846:	01 90       	ld	r0, Z+
    6848:	00 20       	and	r0, r0
    684a:	e9 f7       	brne	.-6      	; 0x6846 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xbe>
    684c:	31 97       	sbiw	r30, 0x01	; 1
    684e:	ec 19       	sub	r30, r12
    6850:	fd 09       	sbc	r31, r13
    6852:	eb 8f       	std	Y+27, r30	; 0x1b
    m_StrFont = &Font;
    6854:	9d 8f       	std	Y+29, r25	; 0x1d
    6856:	8c 8f       	std	Y+28, r24	; 0x1c
    m_Color   = Color;
    6858:	1f 8e       	std	Y+31, r1	; 0x1f
    685a:	1e 8e       	std	Y+30, r1	; 0x1e
    m_VSpace  = VSpace;
    685c:	38 a3       	std	Y+32, r19	; 0x20
            CString("To:",   Font_6x8, COLOR_BACKG, 3),
            CString(ToStr,   Font_8x8, COLOR_BACKG, 3)
        };

    uint8_t Kbd = 0;
    uint8_t From = 0, To = 0, pos = 0;
    685e:	10 e0       	ldi	r17, 0x00	; 0
    6860:	21 2c       	mov	r2, r1
    6862:	31 2c       	mov	r3, r1
            if((pos == 1) &&   (To > 0))   To--;
        }
        if(Kbd == B_RIGHT)
        {
            if((pos == 0) && (From < FromN - 1)) From++;
            if((pos == 1) &&   (To <   ToN - 1))   To++;
    6864:	42 2e       	mov	r4, r18
    6866:	51 2c       	mov	r5, r1
    6868:	81 e0       	ldi	r24, 0x01	; 1
    686a:	48 1a       	sub	r4, r24
    686c:	51 08       	sbc	r5, r1
            if((pos == 0) && (From > 0)) From--;
            if((pos == 1) &&   (To > 0))   To--;
        }
        if(Kbd == B_RIGHT)
        {
            if((pos == 0) && (From < FromN - 1)) From++;
    686e:	a6 2e       	mov	r10, r22
    6870:	b1 2c       	mov	r11, r1
    6872:	91 e0       	ldi	r25, 0x01	; 1
    6874:	a9 1a       	sub	r10, r25
    6876:	b1 08       	sbc	r11, r1

    uint8_t Kbd = 0;
    uint8_t From = 0, To = 0, pos = 0;
    do
    {
        sprintf(FromStr, pos == 0 ? "> %s" : "%s", FromBody[From]);
    6878:	63 2c       	mov	r6, r3
    687a:	71 2c       	mov	r7, r1
    687c:	f3 01       	movw	r30, r6
    687e:	ee 0f       	add	r30, r30
    6880:	ff 1f       	adc	r31, r31
    6882:	23 96       	adiw	r28, 0x03	; 3
    6884:	8e ad       	ldd	r24, Y+62	; 0x3e
    6886:	9f ad       	ldd	r25, Y+63	; 0x3f
    6888:	23 97       	sbiw	r28, 0x03	; 3
    688a:	e8 0f       	add	r30, r24
    688c:	f9 1f       	adc	r31, r25
    688e:	20 81       	ld	r18, Z
    6890:	31 81       	ldd	r19, Z+1	; 0x01
    6892:	11 11       	cpse	r17, r1
    6894:	03 c0       	rjmp	.+6      	; 0x689c <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x114>
    6896:	83 e1       	ldi	r24, 0x13	; 19
    6898:	97 e0       	ldi	r25, 0x07	; 7
    689a:	02 c0       	rjmp	.+4      	; 0x68a0 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x118>
    689c:	85 e1       	ldi	r24, 0x15	; 21
    689e:	97 e0       	ldi	r25, 0x07	; 7
    68a0:	3f 93       	push	r19
    68a2:	2f 93       	push	r18
    68a4:	9f 93       	push	r25
    68a6:	8f 93       	push	r24
    68a8:	ff 92       	push	r15
    68aa:	ef 92       	push	r14
    68ac:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
        sprintf(ToStr,   pos == 0 ? "%s" : "> %s", ToBody[To]);
    68b0:	82 2c       	mov	r8, r2
    68b2:	91 2c       	mov	r9, r1
    68b4:	f4 01       	movw	r30, r8
    68b6:	ee 0f       	add	r30, r30
    68b8:	ff 1f       	adc	r31, r31
    68ba:	25 96       	adiw	r28, 0x05	; 5
    68bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    68be:	9f ad       	ldd	r25, Y+63	; 0x3f
    68c0:	25 97       	sbiw	r28, 0x05	; 5
    68c2:	e8 0f       	add	r30, r24
    68c4:	f9 1f       	adc	r31, r25
    68c6:	20 81       	ld	r18, Z
    68c8:	31 81       	ldd	r19, Z+1	; 0x01
    68ca:	0f 90       	pop	r0
    68cc:	0f 90       	pop	r0
    68ce:	0f 90       	pop	r0
    68d0:	0f 90       	pop	r0
    68d2:	0f 90       	pop	r0
    68d4:	0f 90       	pop	r0
    68d6:	11 11       	cpse	r17, r1
    68d8:	03 c0       	rjmp	.+6      	; 0x68e0 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x158>
    68da:	85 e1       	ldi	r24, 0x15	; 21
    68dc:	97 e0       	ldi	r25, 0x07	; 7
    68de:	02 c0       	rjmp	.+4      	; 0x68e4 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x15c>
    68e0:	83 e1       	ldi	r24, 0x13	; 19
    68e2:	97 e0       	ldi	r25, 0x07	; 7
    68e4:	3f 93       	push	r19
    68e6:	2f 93       	push	r18
    68e8:	9f 93       	push	r25
    68ea:	8f 93       	push	r24
    68ec:	df 92       	push	r13
    68ee:	cf 92       	push	r12
    68f0:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>

        MsgBoxStrEx(Strings, 4, Header, HeaderFont, COLOR_BACKG);
    68f4:	00 e0       	ldi	r16, 0x00	; 0
    68f6:	29 96       	adiw	r28, 0x09	; 9
    68f8:	2e ad       	ldd	r18, Y+62	; 0x3e
    68fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    68fc:	29 97       	sbiw	r28, 0x09	; 9
    68fe:	27 96       	adiw	r28, 0x07	; 7
    6900:	4e ad       	ldd	r20, Y+62	; 0x3e
    6902:	5f ad       	ldd	r21, Y+63	; 0x3f
    6904:	27 97       	sbiw	r28, 0x07	; 7
    6906:	64 e0       	ldi	r22, 0x04	; 4
    6908:	ce 01       	movw	r24, r28
    690a:	01 96       	adiw	r24, 0x01	; 1
    690c:	0e 94 de 32 	call	0x65bc	; 0x65bc <_Z11MsgBoxStrExPK7CStringhPKcRK11FontProfileh>

        WaitEmptyButtons();
    6910:	80 e0       	ldi	r24, 0x00	; 0
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
        Kbd = WaitButtonPress(B_ANY);
    6918:	8f ef       	ldi	r24, 0xFF	; 255
    691a:	0e 94 67 2a 	call	0x54ce	; 0x54ce <_Z15WaitButtonPressh>

        if((Kbd == B_DOWN) && (pos < 1)) pos++;
    691e:	0f 90       	pop	r0
    6920:	0f 90       	pop	r0
    6922:	0f 90       	pop	r0
    6924:	0f 90       	pop	r0
    6926:	0f 90       	pop	r0
    6928:	0f 90       	pop	r0
    692a:	82 30       	cpi	r24, 0x02	; 2
    692c:	69 f1       	breq	.+90     	; 0x6988 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x200>
        if((Kbd == B_UP)   && (pos > 0)) pos--;
    692e:	81 30       	cpi	r24, 0x01	; 1
    6930:	69 f1       	breq	.+90     	; 0x698c <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x204>
        if(Kbd == B_LEFT)
    6932:	84 30       	cpi	r24, 0x04	; 4
    6934:	39 f4       	brne	.+14     	; 0x6944 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x1bc>
        {
            if((pos == 0) && (From > 0)) From--;
    6936:	11 11       	cpse	r17, r1
    6938:	17 c0       	rjmp	.+46     	; 0x6968 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x1e0>
    693a:	33 20       	and	r3, r3
    693c:	09 f4       	brne	.+2      	; 0x6940 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x1b8>
    693e:	9c cf       	rjmp	.-200    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>
    6940:	3a 94       	dec	r3
    6942:	9a cf       	rjmp	.-204    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>
            if((pos == 1) &&   (To > 0))   To--;
        }
        if(Kbd == B_RIGHT)
    6944:	88 30       	cpi	r24, 0x08	; 8
    6946:	41 f4       	brne	.+16     	; 0x6958 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x1d0>
        {
            if((pos == 0) && (From < FromN - 1)) From++;
    6948:	11 11       	cpse	r17, r1
    694a:	13 c0       	rjmp	.+38     	; 0x6972 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x1ea>
    694c:	6a 14       	cp	r6, r10
    694e:	7b 04       	cpc	r7, r11
    6950:	0c f0       	brlt	.+2      	; 0x6954 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x1cc>
    6952:	92 cf       	rjmp	.-220    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>
    6954:	33 94       	inc	r3
    6956:	90 cf       	rjmp	.-224    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>
            CString(ToStr,   Font_8x8, COLOR_BACKG, 3)
        };

    uint8_t Kbd = 0;
    uint8_t From = 0, To = 0, pos = 0;
    do
    6958:	80 32       	cpi	r24, 0x20	; 32
    695a:	89 f0       	breq	.+34     	; 0x697e <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x1f6>
        if(Kbd == B_RIGHT)
        {
            if((pos == 0) && (From < FromN - 1)) From++;
            if((pos == 1) &&   (To <   ToN - 1))   To++;
        }
    } while((Kbd != B_ENTER) && (Kbd != B_BACK));
    695c:	80 31       	cpi	r24, 0x10	; 16
    695e:	09 f0       	breq	.+2      	; 0x6962 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x1da>
    6960:	8b cf       	rjmp	.-234    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>

    // Если нажали ВВОД - сохраняем введённое значение
    if(Kbd == B_ENTER)
        return ((int16_t)From) << 8 | To;
    
    return -1;
    6962:	8f ef       	ldi	r24, 0xFF	; 255
    6964:	9f ef       	ldi	r25, 0xFF	; 255
    6966:	14 c0       	rjmp	.+40     	; 0x6990 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x208>
        if((Kbd == B_DOWN) && (pos < 1)) pos++;
        if((Kbd == B_UP)   && (pos > 0)) pos--;
        if(Kbd == B_LEFT)
        {
            if((pos == 0) && (From > 0)) From--;
            if((pos == 1) &&   (To > 0))   To--;
    6968:	22 20       	and	r2, r2
    696a:	09 f4       	brne	.+2      	; 0x696e <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x1e6>
    696c:	85 cf       	rjmp	.-246    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>
    696e:	2a 94       	dec	r2
    6970:	83 cf       	rjmp	.-250    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>
        }
        if(Kbd == B_RIGHT)
        {
            if((pos == 0) && (From < FromN - 1)) From++;
            if((pos == 1) &&   (To <   ToN - 1))   To++;
    6972:	84 14       	cp	r8, r4
    6974:	95 04       	cpc	r9, r5
    6976:	0c f0       	brlt	.+2      	; 0x697a <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x1f2>
    6978:	7f cf       	rjmp	.-258    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>
    697a:	23 94       	inc	r2
    697c:	7d cf       	rjmp	.-262    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>
        }
    } while((Kbd != B_ENTER) && (Kbd != B_BACK));

    // Если нажали ВВОД - сохраняем введённое значение
    if(Kbd == B_ENTER)
        return ((int16_t)From) << 8 | To;
    697e:	96 2d       	mov	r25, r6
    6980:	88 27       	eor	r24, r24
    6982:	88 29       	or	r24, r8
    6984:	99 29       	or	r25, r9
    6986:	04 c0       	rjmp	.+8      	; 0x6990 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0x208>
    6988:	11 e0       	ldi	r17, 0x01	; 1
    698a:	76 cf       	rjmp	.-276    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>
    698c:	10 e0       	ldi	r17, 0x00	; 0
    698e:	74 cf       	rjmp	.-280    	; 0x6878 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile+0xf0>
    
    return -1;
    6990:	c8 5b       	subi	r28, 0xB8	; 184
    6992:	df 4f       	sbci	r29, 0xFF	; 255
    6994:	0f b6       	in	r0, 0x3f	; 63
    6996:	f8 94       	cli
    6998:	de bf       	out	0x3e, r29	; 62
    699a:	0f be       	out	0x3f, r0	; 63
    699c:	cd bf       	out	0x3d, r28	; 61
    699e:	df 91       	pop	r29
    69a0:	cf 91       	pop	r28
    69a2:	1f 91       	pop	r17
    69a4:	0f 91       	pop	r16
    69a6:	ff 90       	pop	r15
    69a8:	ef 90       	pop	r14
    69aa:	df 90       	pop	r13
    69ac:	cf 90       	pop	r12
    69ae:	bf 90       	pop	r11
    69b0:	af 90       	pop	r10
    69b2:	9f 90       	pop	r9
    69b4:	8f 90       	pop	r8
    69b6:	7f 90       	pop	r7
    69b8:	6f 90       	pop	r6
    69ba:	5f 90       	pop	r5
    69bc:	4f 90       	pop	r4
    69be:	3f 90       	pop	r3
    69c0:	2f 90       	pop	r2
    69c2:	08 95       	ret

000069c4 <_Z22ModelChannelsNumGetStrPca>:
        hwr_SetModulation(CurModel.modulation);
    }
}

char* ModelChannelsNumGetStr(char* Buf, int8_t AddParam)
{
    69c4:	cf 93       	push	r28
    69c6:	df 93       	push	r29
    69c8:	d8 2f       	mov	r29, r24
    69ca:	c9 2f       	mov	r28, r25
    sprintf(Buf, "%d", CurModel.num_ch);
    69cc:	80 91 9a 09 	lds	r24, 0x099A
    69d0:	28 2f       	mov	r18, r24
    69d2:	33 27       	eor	r19, r19
    69d4:	27 fd       	sbrc	r18, 7
    69d6:	30 95       	com	r19
    69d8:	3f 93       	push	r19
    69da:	8f 93       	push	r24
    69dc:	28 e6       	ldi	r18, 0x68	; 104
    69de:	38 e0       	ldi	r19, 0x08	; 8
    69e0:	3f 93       	push	r19
    69e2:	2f 93       	push	r18
    69e4:	9f 93       	push	r25
    69e6:	df 93       	push	r29
    69e8:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    return Buf;
    69ec:	0f 90       	pop	r0
    69ee:	0f 90       	pop	r0
    69f0:	0f 90       	pop	r0
    69f2:	0f 90       	pop	r0
    69f4:	0f 90       	pop	r0
    69f6:	0f 90       	pop	r0
}
    69f8:	8d 2f       	mov	r24, r29
    69fa:	9c 2f       	mov	r25, r28
    69fc:	df 91       	pop	r29
    69fe:	cf 91       	pop	r28
    6a00:	08 95       	ret

00006a02 <_Z21ControlsReverseGetStrPca>:
//

static int8_t CurrentControl;

char* ControlsReverseGetStr(char* Buf, int8_t AddParam)
{
    6a02:	cf 93       	push	r28
    6a04:	df 93       	push	r29
    6a06:	d8 2f       	mov	r29, r24
    6a08:	c9 2f       	mov	r28, r25
    const char* str;
    
    if(CurModel.Mode[FLY_MODE].Control[CurrentControl].reverse == 1)
    6a0a:	80 91 36 0d 	lds	r24, 0x0D36
    6a0e:	20 91 68 09 	lds	r18, 0x0968
    6a12:	36 ef       	ldi	r19, 0xF6	; 246
    6a14:	23 03       	mulsu	r18, r19
    6a16:	f0 01       	movw	r30, r0
    6a18:	11 24       	eor	r1, r1
    6a1a:	9d e0       	ldi	r25, 0x0D	; 13
    6a1c:	89 02       	muls	r24, r25
    6a1e:	e0 0d       	add	r30, r0
    6a20:	f1 1d       	adc	r31, r1
    6a22:	11 24       	eor	r1, r1
    6a24:	eb 57       	subi	r30, 0x7B	; 123
    6a26:	f6 4f       	sbci	r31, 0xF6	; 246
    6a28:	81 a1       	ldd	r24, Z+33	; 0x21
    6a2a:	81 30       	cpi	r24, 0x01	; 1
    6a2c:	29 f0       	breq	.+10     	; 0x6a38 <_Z21ControlsReverseGetStrPca+0x36>
        str = "OFF";
    else
    if(CurModel.Mode[FLY_MODE].Control[CurrentControl].reverse == -1)
    6a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    6a30:	31 f4       	brne	.+12     	; 0x6a3e <_Z21ControlsReverseGetStrPca+0x3c>
        str = "ON";
    6a32:	25 e2       	ldi	r18, 0x25	; 37
    6a34:	37 e0       	ldi	r19, 0x07	; 7
    6a36:	05 c0       	rjmp	.+10     	; 0x6a42 <_Z21ControlsReverseGetStrPca+0x40>
char* ControlsReverseGetStr(char* Buf, int8_t AddParam)
{
    const char* str;
    
    if(CurModel.Mode[FLY_MODE].Control[CurrentControl].reverse == 1)
        str = "OFF";
    6a38:	21 e2       	ldi	r18, 0x21	; 33
    6a3a:	37 e0       	ldi	r19, 0x07	; 7
    6a3c:	02 c0       	rjmp	.+4      	; 0x6a42 <_Z21ControlsReverseGetStrPca+0x40>
    else
    if(CurModel.Mode[FLY_MODE].Control[CurrentControl].reverse == -1)
        str = "ON";
    else
        str = "ERROR";
    6a3e:	20 e5       	ldi	r18, 0x50	; 80
    6a40:	36 e0       	ldi	r19, 0x06	; 6

    sprintf(Buf, str);
    6a42:	3f 93       	push	r19
    6a44:	2f 93       	push	r18
    6a46:	cf 93       	push	r28
    6a48:	df 93       	push	r29
    6a4a:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    return Buf;
    6a4e:	0f 90       	pop	r0
    6a50:	0f 90       	pop	r0
    6a52:	0f 90       	pop	r0
    6a54:	0f 90       	pop	r0
}
    6a56:	8d 2f       	mov	r24, r29
    6a58:	9c 2f       	mov	r25, r28
    6a5a:	df 91       	pop	r29
    6a5c:	cf 91       	pop	r28
    6a5e:	08 95       	ret

00006a60 <_Z21ControlsVirtualGetStrPca>:
    {"Virtual 1", ControlsSettingsMenu, NULL, CTRL_V1   },
    {"Virtual 2", ControlsSettingsMenu, NULL, CTRL_V2   }
};

char* ControlsVirtualGetStr(char* Buf, int8_t AddParam)
{
    6a60:	cf 93       	push	r28
    6a62:	df 93       	push	r29
    6a64:	d8 2f       	mov	r29, r24
    6a66:	c9 2f       	mov	r28, r25
    sprintf(Buf, ControlsMenuItems[ CurModel.Mode[FLY_MODE].Control[CurrentControl].from ].Name);
    6a68:	80 91 36 0d 	lds	r24, 0x0D36
    6a6c:	20 91 68 09 	lds	r18, 0x0968
    6a70:	36 ef       	ldi	r19, 0xF6	; 246
    6a72:	23 03       	mulsu	r18, r19
    6a74:	f0 01       	movw	r30, r0
    6a76:	11 24       	eor	r1, r1
    6a78:	9d e0       	ldi	r25, 0x0D	; 13
    6a7a:	89 02       	muls	r24, r25
    6a7c:	e0 0d       	add	r30, r0
    6a7e:	f1 1d       	adc	r31, r1
    6a80:	11 24       	eor	r1, r1
    6a82:	eb 57       	subi	r30, 0x7B	; 123
    6a84:	f6 4f       	sbci	r31, 0xF6	; 246
    6a86:	e6 a1       	ldd	r30, Z+38	; 0x26
    6a88:	37 e0       	ldi	r19, 0x07	; 7
    6a8a:	e3 02       	muls	r30, r19
    6a8c:	f0 01       	movw	r30, r0
    6a8e:	11 24       	eor	r1, r1
    6a90:	e8 5c       	subi	r30, 0xC8	; 200
    6a92:	fd 4f       	sbci	r31, 0xFD	; 253
    6a94:	81 81       	ldd	r24, Z+1	; 0x01
    6a96:	8f 93       	push	r24
    6a98:	80 81       	ld	r24, Z
    6a9a:	8f 93       	push	r24
    6a9c:	cf 93       	push	r28
    6a9e:	df 93       	push	r29
    6aa0:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    return Buf;
    6aa4:	0f 90       	pop	r0
    6aa6:	0f 90       	pop	r0
    6aa8:	0f 90       	pop	r0
    6aaa:	0f 90       	pop	r0
}
    6aac:	8d 2f       	mov	r24, r29
    6aae:	9c 2f       	mov	r25, r28
    6ab0:	df 91       	pop	r29
    6ab2:	cf 91       	pop	r28
    6ab4:	08 95       	ret

00006ab6 <_Z11MixerGetStrPca>:
{
    EditNumDlg(&CurModel.Mode[FLY_MODE].Chanels[MixerCurrentChannel][AddParam], PTR_INT8, -100, 100, 120, "Mixer");
}

char* MixerGetStr(char* Buf, int8_t AddParam)
{
    6ab6:	cf 93       	push	r28
    6ab8:	df 93       	push	r29
    6aba:	d8 2f       	mov	r29, r24
    6abc:	c9 2f       	mov	r28, r25
    sprintf(Buf, "%d", CurModel.Mode[FLY_MODE].Chanels[MixerCurrentChannel][AddParam]);
    6abe:	80 91 35 0d 	lds	r24, 0x0D35
    6ac2:	20 91 68 09 	lds	r18, 0x0968
    6ac6:	46 ef       	ldi	r20, 0xF6	; 246
    6ac8:	24 03       	mulsu	r18, r20
    6aca:	90 01       	movw	r18, r0
    6acc:	11 24       	eor	r1, r1
    6ace:	9b e0       	ldi	r25, 0x0B	; 11
    6ad0:	89 02       	muls	r24, r25
    6ad2:	20 0d       	add	r18, r0
    6ad4:	31 1d       	adc	r19, r1
    6ad6:	11 24       	eor	r1, r1
    6ad8:	2b 57       	subi	r18, 0x7B	; 123
    6ada:	36 4f       	sbci	r19, 0xF6	; 246
    6adc:	26 0f       	add	r18, r22
    6ade:	31 1d       	adc	r19, r1
    6ae0:	67 fd       	sbrc	r22, 7
    6ae2:	3a 95       	dec	r19
    6ae4:	f9 01       	movw	r30, r18
    6ae6:	e0 55       	subi	r30, 0x50	; 80
    6ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    6aea:	80 81       	ld	r24, Z
    6aec:	28 2f       	mov	r18, r24
    6aee:	33 27       	eor	r19, r19
    6af0:	27 fd       	sbrc	r18, 7
    6af2:	30 95       	com	r19
    6af4:	3f 93       	push	r19
    6af6:	8f 93       	push	r24
    6af8:	28 e6       	ldi	r18, 0x68	; 104
    6afa:	38 e0       	ldi	r19, 0x08	; 8
    6afc:	3f 93       	push	r19
    6afe:	2f 93       	push	r18
    6b00:	cf 93       	push	r28
    6b02:	df 93       	push	r29
    6b04:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    return Buf;
    6b08:	0f 90       	pop	r0
    6b0a:	0f 90       	pop	r0
    6b0c:	0f 90       	pop	r0
    6b0e:	0f 90       	pop	r0
    6b10:	0f 90       	pop	r0
    6b12:	0f 90       	pop	r0
}
    6b14:	8d 2f       	mov	r24, r29
    6b16:	9c 2f       	mov	r25, r28
    6b18:	df 91       	pop	r29
    6b1a:	cf 91       	pop	r28
    6b1c:	08 95       	ret

00006b1e <_Z15TimerModeGetStrPca>:
//
// Menu Timer handlers
// 

char* TimerModeGetStr(char* Buf, int8_t AddParam)
{
    6b1e:	cf 93       	push	r28
    6b20:	df 93       	push	r29
    6b22:	d8 2f       	mov	r29, r24
    6b24:	c9 2f       	mov	r28, r25
    sprintf(Buf, (CurModel.timer_mode & 0x02) ? "DOWN" : "UP");
    6b26:	80 91 99 09 	lds	r24, 0x0999
    6b2a:	81 ff       	sbrs	r24, 1
    6b2c:	03 c0       	rjmp	.+6      	; 0x6b34 <_Z15TimerModeGetStrPca+0x16>
    6b2e:	28 e2       	ldi	r18, 0x28	; 40
    6b30:	37 e0       	ldi	r19, 0x07	; 7
    6b32:	02 c0       	rjmp	.+4      	; 0x6b38 <_Z15TimerModeGetStrPca+0x1a>
    6b34:	2d e2       	ldi	r18, 0x2D	; 45
    6b36:	37 e0       	ldi	r19, 0x07	; 7
    6b38:	3f 93       	push	r19
    6b3a:	2f 93       	push	r18
    6b3c:	cf 93       	push	r28
    6b3e:	df 93       	push	r29
    6b40:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    return Buf;
    6b44:	0f 90       	pop	r0
    6b46:	0f 90       	pop	r0
    6b48:	0f 90       	pop	r0
    6b4a:	0f 90       	pop	r0
}
    6b4c:	8d 2f       	mov	r24, r29
    6b4e:	9c 2f       	mov	r25, r28
    6b50:	df 91       	pop	r29
    6b52:	cf 91       	pop	r28
    6b54:	08 95       	ret

00006b56 <_Z16TimerSoundGetStrPca>:
    else
        CurModel.timer_mode &= ~0x02;
}

char* TimerSoundGetStr(char* Buf, int8_t AddParam)
{
    6b56:	cf 93       	push	r28
    6b58:	df 93       	push	r29
    6b5a:	d8 2f       	mov	r29, r24
    6b5c:	c9 2f       	mov	r28, r25
    sprintf(Buf, (CurModel.timer_mode & 0x01) ? "OFF" : "ON");
    6b5e:	80 91 99 09 	lds	r24, 0x0999
    6b62:	80 ff       	sbrs	r24, 0
    6b64:	03 c0       	rjmp	.+6      	; 0x6b6c <_Z16TimerSoundGetStrPca+0x16>
    6b66:	21 e2       	ldi	r18, 0x21	; 33
    6b68:	37 e0       	ldi	r19, 0x07	; 7
    6b6a:	02 c0       	rjmp	.+4      	; 0x6b70 <_Z16TimerSoundGetStrPca+0x1a>
    6b6c:	25 e2       	ldi	r18, 0x25	; 37
    6b6e:	37 e0       	ldi	r19, 0x07	; 7
    6b70:	3f 93       	push	r19
    6b72:	2f 93       	push	r18
    6b74:	cf 93       	push	r28
    6b76:	df 93       	push	r29
    6b78:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    return Buf;
    6b7c:	0f 90       	pop	r0
    6b7e:	0f 90       	pop	r0
    6b80:	0f 90       	pop	r0
    6b82:	0f 90       	pop	r0
}
    6b84:	8d 2f       	mov	r24, r29
    6b86:	9c 2f       	mov	r25, r28
    6b88:	df 91       	pop	r29
    6b8a:	cf 91       	pop	r28
    6b8c:	08 95       	ret

00006b8e <_Z18OptionsSoundGetStrPca>:
    
    Menu.Run();
}

char* OptionsSoundGetStr(char* Buf, int8_t AddParam)
{
    6b8e:	cf 93       	push	r28
    6b90:	df 93       	push	r29
    6b92:	d8 2f       	mov	r29, r24
    6b94:	c9 2f       	mov	r28, r25
    sprintf(Buf, Settings.SoundFlag ? "ON" : "OFF");
    6b96:	80 91 80 0c 	lds	r24, 0x0C80
    6b9a:	88 23       	and	r24, r24
    6b9c:	19 f0       	breq	.+6      	; 0x6ba4 <_Z18OptionsSoundGetStrPca+0x16>
    6b9e:	25 e2       	ldi	r18, 0x25	; 37
    6ba0:	37 e0       	ldi	r19, 0x07	; 7
    6ba2:	02 c0       	rjmp	.+4      	; 0x6ba8 <_Z18OptionsSoundGetStrPca+0x1a>
    6ba4:	21 e2       	ldi	r18, 0x21	; 33
    6ba6:	37 e0       	ldi	r19, 0x07	; 7
    6ba8:	3f 93       	push	r19
    6baa:	2f 93       	push	r18
    6bac:	cf 93       	push	r28
    6bae:	df 93       	push	r29
    6bb0:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    return Buf;
    6bb4:	0f 90       	pop	r0
    6bb6:	0f 90       	pop	r0
    6bb8:	0f 90       	pop	r0
    6bba:	0f 90       	pop	r0
}
    6bbc:	8d 2f       	mov	r24, r29
    6bbe:	9c 2f       	mov	r25, r28
    6bc0:	df 91       	pop	r29
    6bc2:	cf 91       	pop	r28
    6bc4:	08 95       	ret

00006bc6 <_Z9ModelCopya>:
//
// Model menu handlers
//

void ModelCopy(int8_t dummy)
{
    6bc6:	6f 92       	push	r6
    6bc8:	7f 92       	push	r7
    6bca:	8f 92       	push	r8
    6bcc:	9f 92       	push	r9
    6bce:	af 92       	push	r10
    6bd0:	bf 92       	push	r11
    6bd2:	cf 92       	push	r12
    6bd4:	df 92       	push	r13
    6bd6:	ef 92       	push	r14
    6bd8:	ff 92       	push	r15
    6bda:	0f 93       	push	r16
    6bdc:	1f 93       	push	r17
    6bde:	cf 93       	push	r28
    6be0:	df 93       	push	r29
    6be2:	cd b7       	in	r28, 0x3d	; 61
    6be4:	de b7       	in	r29, 0x3e	; 62
    6be6:	cb 54       	subi	r28, 0x4B	; 75
    6be8:	d1 09       	sbc	r29, r1
    6bea:	0f b6       	in	r0, 0x3f	; 63
    6bec:	f8 94       	cli
    6bee:	de bf       	out	0x3e, r29	; 62
    6bf0:	0f be       	out	0x3f, r0	; 63
    6bf2:	cd bf       	out	0x3d, r28	; 61
    6bf4:	ce 01       	movw	r24, r28
    6bf6:	01 96       	adiw	r24, 0x01	; 1
    6bf8:	5c 01       	movw	r10, r24
    6bfa:	7e 01       	movw	r14, r28
    6bfc:	92 e4       	ldi	r25, 0x42	; 66
    6bfe:	e9 0e       	add	r14, r25
    6c00:	f1 1c       	adc	r15, r1
    6c02:	c1 2c       	mov	r12, r1
    6c04:	d1 2c       	mov	r13, r1
    6c06:	37 01       	movw	r6, r14
    6c08:	00 e0       	ldi	r16, 0x00	; 0
    6c0a:	10 e0       	ldi	r17, 0x00	; 0
    6c0c:	f6 01       	movw	r30, r12
    6c0e:	ee 5f       	subi	r30, 0xFE	; 254
    6c10:	ff 4f       	sbci	r31, 0xFF	; 255
    6c12:	4f 01       	movw	r8, r30
    char        ModelsStr[MAX_MODELS][MODEL_NAME_LEN];
    const char* ModelsStrPtrs[MAX_MODELS];
    for(uint8_t i = 0; i < MAX_MODELS; ++i)
    {
        for(uint8_t j = 0; j < ARRAY_SIZE(EEPROM_MODEL[i].name); j++)
            ModelsStr[i][j] = eeprom_read_byte((uint8_t*)&EEPROM_MODEL[i].name[j]);
    6c14:	c4 01       	movw	r24, r8
    6c16:	80 0f       	add	r24, r16
    6c18:	91 1f       	adc	r25, r17
    6c1a:	0e 94 08 4b 	call	0x9610	; 0x9610 <__eerd_byte_m2560>
    6c1e:	f5 01       	movw	r30, r10
    6c20:	e0 0f       	add	r30, r16
    6c22:	f1 1f       	adc	r31, r17
    6c24:	80 83       	st	Z, r24
    6c26:	0f 5f       	subi	r16, 0xFF	; 255
    6c28:	1f 4f       	sbci	r17, 0xFF	; 255
{
    char        ModelsStr[MAX_MODELS][MODEL_NAME_LEN];
    const char* ModelsStrPtrs[MAX_MODELS];
    for(uint8_t i = 0; i < MAX_MODELS; ++i)
    {
        for(uint8_t j = 0; j < ARRAY_SIZE(EEPROM_MODEL[i].name); j++)
    6c2a:	0d 30       	cpi	r16, 0x0D	; 13
    6c2c:	11 05       	cpc	r17, r1
    6c2e:	91 f7       	brne	.-28     	; 0x6c14 <_Z9ModelCopya+0x4e>
            ModelsStr[i][j] = eeprom_read_byte((uint8_t*)&EEPROM_MODEL[i].name[j]);
        
        ModelsStrPtrs[i] = ModelsStr[i];
    6c30:	f7 01       	movw	r30, r14
    6c32:	a1 92       	st	Z+, r10
    6c34:	b1 92       	st	Z+, r11
    6c36:	7f 01       	movw	r14, r30
    6c38:	fd e0       	ldi	r31, 0x0D	; 13
    6c3a:	af 0e       	add	r10, r31
    6c3c:	b1 1c       	adc	r11, r1
    6c3e:	88 e0       	ldi	r24, 0x08	; 8
    6c40:	c8 1a       	sub	r12, r24
    6c42:	8d ef       	ldi	r24, 0xFD	; 253
    6c44:	d8 0a       	sbc	r13, r24

void ModelCopy(int8_t dummy)
{
    char        ModelsStr[MAX_MODELS][MODEL_NAME_LEN];
    const char* ModelsStrPtrs[MAX_MODELS];
    for(uint8_t i = 0; i < MAX_MODELS; ++i)
    6c46:	98 ed       	ldi	r25, 0xD8	; 216
    6c48:	c9 16       	cp	r12, r25
    6c4a:	9e e0       	ldi	r25, 0x0E	; 14
    6c4c:	d9 06       	cpc	r13, r25
    6c4e:	e1 f6       	brne	.-72     	; 0x6c08 <_Z9ModelCopya+0x42>
            ModelsStr[i][j] = eeprom_read_byte((uint8_t*)&EEPROM_MODEL[i].name[j]);
        
        ModelsStrPtrs[i] = ModelsStr[i];
    }

    int16_t result = FromToBox(ModelsStrPtrs, MAX_MODELS, ModelsStrPtrs, MAX_MODELS, "Model Copy:", Font_8x8);
    6c50:	8a ec       	ldi	r24, 0xCA	; 202
    6c52:	e8 2e       	mov	r14, r24
    6c54:	8c e0       	ldi	r24, 0x0C	; 12
    6c56:	f8 2e       	mov	r15, r24
    6c58:	00 e3       	ldi	r16, 0x30	; 48
    6c5a:	17 e0       	ldi	r17, 0x07	; 7
    6c5c:	25 e0       	ldi	r18, 0x05	; 5
    6c5e:	a3 01       	movw	r20, r6
    6c60:	65 e0       	ldi	r22, 0x05	; 5
    6c62:	c3 01       	movw	r24, r6
    6c64:	0e 94 c4 33 	call	0x6788	; 0x6788 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile>
    6c68:	8c 01       	movw	r16, r24

    if(result == RESULT_INCORRECT)
    6c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    6c6c:	ff ef       	ldi	r31, 0xFF	; 255
    6c6e:	9f 07       	cpc	r25, r31
    6c70:	69 f0       	breq	.+26     	; 0x6c8c <_Z9ModelCopya+0xc6>
        return;
    
    int8_t From = int8_t(result >> 8);
    int8_t To   = int8_t(result & 0xFF);
    if(From != To)
    6c72:	81 17       	cp	r24, r17
    6c74:	59 f0       	breq	.+22     	; 0x6c8c <_Z9ModelCopya+0xc6>
    {
        MODEL_Copy(From, To);
    6c76:	68 2f       	mov	r22, r24
    6c78:	81 2f       	mov	r24, r17
    6c7a:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <_Z10MODEL_Copyaa>
        
        // Если мы скопировали другую модель в текущюю - её нужно переинициализировать
        if(To == Settings.ModelNum)
    6c7e:	80 91 81 0c 	lds	r24, 0x0C81
    6c82:	08 13       	cpse	r16, r24
    6c84:	03 c0       	rjmp	.+6      	; 0x6c8c <_Z9ModelCopya+0xc6>
            MODEL_Init(Settings.ModelNum);
    6c86:	80 2f       	mov	r24, r16
    6c88:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <_Z10MODEL_Inita>
    }
}
    6c8c:	c5 5b       	subi	r28, 0xB5	; 181
    6c8e:	df 4f       	sbci	r29, 0xFF	; 255
    6c90:	0f b6       	in	r0, 0x3f	; 63
    6c92:	f8 94       	cli
    6c94:	de bf       	out	0x3e, r29	; 62
    6c96:	0f be       	out	0x3f, r0	; 63
    6c98:	cd bf       	out	0x3d, r28	; 61
    6c9a:	df 91       	pop	r29
    6c9c:	cf 91       	pop	r28
    6c9e:	1f 91       	pop	r17
    6ca0:	0f 91       	pop	r16
    6ca2:	ff 90       	pop	r15
    6ca4:	ef 90       	pop	r14
    6ca6:	df 90       	pop	r13
    6ca8:	cf 90       	pop	r12
    6caa:	bf 90       	pop	r11
    6cac:	af 90       	pop	r10
    6cae:	9f 90       	pop	r9
    6cb0:	8f 90       	pop	r8
    6cb2:	7f 90       	pop	r7
    6cb4:	6f 90       	pop	r6
    6cb6:	08 95       	ret

00006cb8 <_Z8ModeCopya>:

void ModeCopy(int8_t AddParam)
{
    6cb8:	af 92       	push	r10
    6cba:	bf 92       	push	r11
    6cbc:	cf 92       	push	r12
    6cbe:	df 92       	push	r13
    6cc0:	ef 92       	push	r14
    6cc2:	ff 92       	push	r15
    6cc4:	0f 93       	push	r16
    6cc6:	1f 93       	push	r17
    6cc8:	cf 93       	push	r28
    6cca:	df 93       	push	r29
    6ccc:	cd b7       	in	r28, 0x3d	; 61
    6cce:	de b7       	in	r29, 0x3e	; 62
    6cd0:	a7 97       	sbiw	r28, 0x27	; 39
    6cd2:	0f b6       	in	r0, 0x3f	; 63
    6cd4:	f8 94       	cli
    6cd6:	de bf       	out	0x3e, r29	; 62
    6cd8:	0f be       	out	0x3f, r0	; 63
    6cda:	cd bf       	out	0x3d, r28	; 61
    6cdc:	ce 01       	movw	r24, r28
    6cde:	01 96       	adiw	r24, 0x01	; 1
    6ce0:	6c 01       	movw	r12, r24
    6ce2:	8e 01       	movw	r16, r28
    6ce4:	0e 5d       	subi	r16, 0xDE	; 222
    6ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    6ce8:	e1 2c       	mov	r14, r1
    6cea:	f1 2c       	mov	r15, r1
    6cec:	58 01       	movw	r10, r16
    6cee:	b7 01       	movw	r22, r14
    6cf0:	65 56       	subi	r22, 0x65	; 101
    6cf2:	76 4f       	sbci	r23, 0xF6	; 246
    char        ModesStr[MAX_MODES][MODE_NAME_LEN];
    const char* ModesStrPtrs[MAX_MODES];
    
    for(uint8_t i = 0; i < MAX_MODES; ++i)
    {
        strcpy(ModesStr[i], CurModel.Mode[i].name);
    6cf4:	c6 01       	movw	r24, r12
    6cf6:	0e 94 8a 48 	call	0x9114	; 0x9114 <strcpy>
        ModesStrPtrs[i] = ModesStr[i];
    6cfa:	f8 01       	movw	r30, r16
    6cfc:	c1 92       	st	Z+, r12
    6cfe:	d1 92       	st	Z+, r13
    6d00:	8f 01       	movw	r16, r30
    6d02:	fb e0       	ldi	r31, 0x0B	; 11
    6d04:	cf 0e       	add	r12, r31
    6d06:	d1 1c       	adc	r13, r1
    6d08:	26 ef       	ldi	r18, 0xF6	; 246
    6d0a:	e2 0e       	add	r14, r18
    6d0c:	f1 1c       	adc	r15, r1
void ModeCopy(int8_t AddParam)
{
    char        ModesStr[MAX_MODES][MODE_NAME_LEN];
    const char* ModesStrPtrs[MAX_MODES];
    
    for(uint8_t i = 0; i < MAX_MODES; ++i)
    6d0e:	82 ee       	ldi	r24, 0xE2	; 226
    6d10:	e8 16       	cp	r14, r24
    6d12:	82 e0       	ldi	r24, 0x02	; 2
    6d14:	f8 06       	cpc	r15, r24
    6d16:	59 f7       	brne	.-42     	; 0x6cee <_Z8ModeCopya+0x36>
    {
        strcpy(ModesStr[i], CurModel.Mode[i].name);
        ModesStrPtrs[i] = ModesStr[i];
    }

    int16_t result = FromToBox(ModesStrPtrs, ARRAY_SIZE(ModesStrPtrs), ModesStrPtrs, ARRAY_SIZE(ModesStrPtrs), "Mode Copy:", Font_8x8);
    6d18:	9a ec       	ldi	r25, 0xCA	; 202
    6d1a:	e9 2e       	mov	r14, r25
    6d1c:	9c e0       	ldi	r25, 0x0C	; 12
    6d1e:	f9 2e       	mov	r15, r25
    6d20:	0c e3       	ldi	r16, 0x3C	; 60
    6d22:	17 e0       	ldi	r17, 0x07	; 7
    6d24:	23 e0       	ldi	r18, 0x03	; 3
    6d26:	a5 01       	movw	r20, r10
    6d28:	63 e0       	ldi	r22, 0x03	; 3
    6d2a:	c5 01       	movw	r24, r10
    6d2c:	0e 94 c4 33 	call	0x6788	; 0x6788 <_Z9FromToBoxPPKchS1_hS0_RK11FontProfile>

    if(result == RESULT_INCORRECT)
    6d30:	8f 3f       	cpi	r24, 0xFF	; 255
    6d32:	ef ef       	ldi	r30, 0xFF	; 255
    6d34:	9e 07       	cpc	r25, r30
    6d36:	51 f0       	breq	.+20     	; 0x6d4c <_Z8ModeCopya+0x94>
        return;
    
    int8_t From = int8_t(result >> 8);
    int8_t To   = int8_t(result & 0xFF);
    if(From != To)
    6d38:	89 17       	cp	r24, r25
    6d3a:	41 f0       	breq	.+16     	; 0x6d4c <_Z8ModeCopya+0x94>
    {
        MODE_Copy(From, To);
    6d3c:	68 2f       	mov	r22, r24
    6d3e:	89 2f       	mov	r24, r25
    6d40:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <_Z9MODE_Copyaa>
        MODEL_Init(Settings.ModelNum);
    6d44:	80 91 81 0c 	lds	r24, 0x0C81
    6d48:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <_Z10MODEL_Inita>
    }
}
    6d4c:	a7 96       	adiw	r28, 0x27	; 39
    6d4e:	0f b6       	in	r0, 0x3f	; 63
    6d50:	f8 94       	cli
    6d52:	de bf       	out	0x3e, r29	; 62
    6d54:	0f be       	out	0x3f, r0	; 63
    6d56:	cd bf       	out	0x3d, r28	; 61
    6d58:	df 91       	pop	r29
    6d5a:	cf 91       	pop	r28
    6d5c:	1f 91       	pop	r17
    6d5e:	0f 91       	pop	r16
    6d60:	ff 90       	pop	r15
    6d62:	ef 90       	pop	r14
    6d64:	df 90       	pop	r13
    6d66:	cf 90       	pop	r12
    6d68:	bf 90       	pop	r11
    6d6a:	af 90       	pop	r10
    6d6c:	08 95       	ret

00006d6e <_Z15ModelTypeGetStrPca>:
        _delay_ms(100);
    }
}

char* ModelTypeGetStr(char* Buf, int8_t AddParam)
{
    6d6e:	0f 93       	push	r16
    6d70:	1f 93       	push	r17
    6d72:	cf 93       	push	r28
    6d74:	df 93       	push	r29
    6d76:	00 d0       	rcall	.+0      	; 0x6d78 <_Z15ModelTypeGetStrPca+0xa>
    6d78:	1f 92       	push	r1
    6d7a:	cd b7       	in	r28, 0x3d	; 61
    6d7c:	de b7       	in	r29, 0x3e	; 62
    6d7e:	8c 01       	movw	r16, r24
    const char* ModelTypes[] = {
            "Plane",
            "Heli"
        };
    6d80:	87 e4       	ldi	r24, 0x47	; 71
    6d82:	97 e0       	ldi	r25, 0x07	; 7
    6d84:	9a 83       	std	Y+2, r25	; 0x02
    6d86:	89 83       	std	Y+1, r24	; 0x01
    6d88:	8d e4       	ldi	r24, 0x4D	; 77
    6d8a:	97 e0       	ldi	r25, 0x07	; 7
    6d8c:	9c 83       	std	Y+4, r25	; 0x04
    6d8e:	8b 83       	std	Y+3, r24	; 0x03
    
    sprintf(Buf, "%s", ModelTypes[CurModel.type]);
    6d90:	e0 91 94 09 	lds	r30, 0x0994
    6d94:	ee 0f       	add	r30, r30
    6d96:	ff 0b       	sbc	r31, r31
    6d98:	ec 0f       	add	r30, r28
    6d9a:	fd 1f       	adc	r31, r29
    6d9c:	61 81       	ldd	r22, Z+1	; 0x01
    6d9e:	72 81       	ldd	r23, Z+2	; 0x02
    6da0:	c8 01       	movw	r24, r16
    6da2:	0e 94 8a 48 	call	0x9114	; 0x9114 <strcpy>
    return Buf;
}
    6da6:	c8 01       	movw	r24, r16
    6da8:	0f 90       	pop	r0
    6daa:	0f 90       	pop	r0
    6dac:	0f 90       	pop	r0
    6dae:	0f 90       	pop	r0
    6db0:	df 91       	pop	r29
    6db2:	cf 91       	pop	r28
    6db4:	1f 91       	pop	r17
    6db6:	0f 91       	pop	r16
    6db8:	08 95       	ret

00006dba <_Z20ModulationTypeGetStrPca>:
    if(result != RESULT_INCORRECT)
        CurModel.type = result;
}

char* ModulationTypeGetStr(char* Buf, int8_t AddParam)
{
    6dba:	0f 93       	push	r16
    6dbc:	1f 93       	push	r17
    6dbe:	cf 93       	push	r28
    6dc0:	df 93       	push	r29
    6dc2:	00 d0       	rcall	.+0      	; 0x6dc4 <_Z20ModulationTypeGetStrPca+0xa>
    6dc4:	00 d0       	rcall	.+0      	; 0x6dc6 <_Z20ModulationTypeGetStrPca+0xc>
    6dc6:	cd b7       	in	r28, 0x3d	; 61
    6dc8:	de b7       	in	r29, 0x3e	; 62
    6dca:	8c 01       	movw	r16, r24
    const char* ModulationTypes[] = {
            "PPM",
            "IPPM",
            "PCM"
        };
    6dcc:	86 e0       	ldi	r24, 0x06	; 6
    6dce:	e0 ed       	ldi	r30, 0xD0	; 208
    6dd0:	f4 e0       	ldi	r31, 0x04	; 4
    6dd2:	de 01       	movw	r26, r28
    6dd4:	11 96       	adiw	r26, 0x01	; 1
    6dd6:	01 90       	ld	r0, Z+
    6dd8:	0d 92       	st	X+, r0
    6dda:	8a 95       	dec	r24
    6ddc:	e1 f7       	brne	.-8      	; 0x6dd6 <_Z20ModulationTypeGetStrPca+0x1c>
    
    sprintf(Buf, "%s", ModulationTypes[CurModel.modulation]);
    6dde:	e0 91 95 09 	lds	r30, 0x0995
    6de2:	f0 91 96 09 	lds	r31, 0x0996
    6de6:	ee 0f       	add	r30, r30
    6de8:	ff 1f       	adc	r31, r31
    6dea:	81 e0       	ldi	r24, 0x01	; 1
    6dec:	90 e0       	ldi	r25, 0x00	; 0
    6dee:	8c 0f       	add	r24, r28
    6df0:	9d 1f       	adc	r25, r29
    6df2:	e8 0f       	add	r30, r24
    6df4:	f9 1f       	adc	r31, r25
    6df6:	60 81       	ld	r22, Z
    6df8:	71 81       	ldd	r23, Z+1	; 0x01
    6dfa:	c8 01       	movw	r24, r16
    6dfc:	0e 94 8a 48 	call	0x9114	; 0x9114 <strcpy>
    return Buf;
}
    6e00:	c8 01       	movw	r24, r16
    6e02:	26 96       	adiw	r28, 0x06	; 6
    6e04:	0f b6       	in	r0, 0x3f	; 63
    6e06:	f8 94       	cli
    6e08:	de bf       	out	0x3e, r29	; 62
    6e0a:	0f be       	out	0x3f, r0	; 63
    6e0c:	cd bf       	out	0x3d, r28	; 61
    6e0e:	df 91       	pop	r29
    6e10:	cf 91       	pop	r28
    6e12:	1f 91       	pop	r17
    6e14:	0f 91       	pop	r16
    6e16:	08 95       	ret

00006e18 <_Z15ModelNameGetStrPca>:
{
    EditNumDlg(&CurModel.num_ch, PTR_INT8, 2, MAX_CHANNELS, 100, "Channels");
}

char* ModelNameGetStr(char* Buf, int8_t AddParam)
{
    6e18:	cf 93       	push	r28
    6e1a:	df 93       	push	r29
    6e1c:	ec 01       	movw	r28, r24
    sprintf(Buf, "%s", CurModel.name);
    6e1e:	67 e8       	ldi	r22, 0x87	; 135
    6e20:	79 e0       	ldi	r23, 0x09	; 9
    6e22:	0e 94 8a 48 	call	0x9114	; 0x9114 <strcpy>
    return Buf;
}
    6e26:	ce 01       	movw	r24, r28
    6e28:	df 91       	pop	r29
    6e2a:	cf 91       	pop	r28
    6e2c:	08 95       	ret

00006e2e <_Z14ModeNameGetStrPca>:
{
    EditStrDlg(CurModel.name, ARRAY_SIZE(CurModel.name) - 1, Font_8x12, "Model Name:", Font_8x8);
}

char* ModeNameGetStr(char* Buf, int8_t AddParam)
{
    6e2e:	cf 93       	push	r28
    6e30:	df 93       	push	r29
    6e32:	ec 01       	movw	r28, r24
    sprintf(Buf, "%s", CurModel.Mode[FLY_MODE].name);
    6e34:	60 91 68 09 	lds	r22, 0x0968
    6e38:	26 ef       	ldi	r18, 0xF6	; 246
    6e3a:	62 03       	mulsu	r22, r18
    6e3c:	b0 01       	movw	r22, r0
    6e3e:	11 24       	eor	r1, r1
    6e40:	65 56       	subi	r22, 0x65	; 101
    6e42:	76 4f       	sbci	r23, 0xF6	; 246
    6e44:	0e 94 8a 48 	call	0x9114	; 0x9114 <strcpy>
    return Buf;
}
    6e48:	ce 01       	movw	r24, r28
    6e4a:	df 91       	pop	r29
    6e4c:	cf 91       	pop	r28
    6e4e:	08 95       	ret

00006e50 <_Z11ModeTypeSeta>:
    sprintf(Buf, "%s", ModelTypes[CurModel.type]);
    return Buf;
}

void ModeTypeSet(int8_t AddParam)
{
    6e50:	ef 92       	push	r14
    6e52:	ff 92       	push	r15
    6e54:	0f 93       	push	r16
    6e56:	1f 93       	push	r17
    6e58:	cf 93       	push	r28
    6e5a:	df 93       	push	r29
    6e5c:	00 d0       	rcall	.+0      	; 0x6e5e <_Z11ModeTypeSeta+0xe>
    6e5e:	1f 92       	push	r1
    6e60:	cd b7       	in	r28, 0x3d	; 61
    6e62:	de b7       	in	r29, 0x3e	; 62
    const char* ModelTypes[] = {
            "Plane",
            "Heli"
        };
    6e64:	87 e4       	ldi	r24, 0x47	; 71
    6e66:	97 e0       	ldi	r25, 0x07	; 7
    6e68:	9a 83       	std	Y+2, r25	; 0x02
    6e6a:	89 83       	std	Y+1, r24	; 0x01
    6e6c:	8d e4       	ldi	r24, 0x4D	; 77
    6e6e:	97 e0       	ldi	r25, 0x07	; 7
    6e70:	9c 83       	std	Y+4, r25	; 0x04
    6e72:	8b 83       	std	Y+3, r24	; 0x03

    int8_t result = SelectBox(ModelTypes, ARRAY_SIZE(ModelTypes), CurModel.type, Font_8x12, "Model Type:", Font_8x8);
    6e74:	3a ec       	ldi	r19, 0xCA	; 202
    6e76:	e3 2e       	mov	r14, r19
    6e78:	3c e0       	ldi	r19, 0x0C	; 12
    6e7a:	f3 2e       	mov	r15, r19
    6e7c:	0b e5       	ldi	r16, 0x5B	; 91
    6e7e:	17 e0       	ldi	r17, 0x07	; 7
    6e80:	24 ec       	ldi	r18, 0xC4	; 196
    6e82:	3c e0       	ldi	r19, 0x0C	; 12
    6e84:	40 91 94 09 	lds	r20, 0x0994
    6e88:	62 e0       	ldi	r22, 0x02	; 2
    6e8a:	ce 01       	movw	r24, r28
    6e8c:	01 96       	adiw	r24, 0x01	; 1
    6e8e:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_>

    if(result != RESULT_INCORRECT)
    6e92:	8f 3f       	cpi	r24, 0xFF	; 255
    6e94:	11 f0       	breq	.+4      	; 0x6e9a <_Z11ModeTypeSeta+0x4a>
        CurModel.type = result;
    6e96:	80 93 94 09 	sts	0x0994, r24
}
    6e9a:	0f 90       	pop	r0
    6e9c:	0f 90       	pop	r0
    6e9e:	0f 90       	pop	r0
    6ea0:	0f 90       	pop	r0
    6ea2:	df 91       	pop	r29
    6ea4:	cf 91       	pop	r28
    6ea6:	1f 91       	pop	r17
    6ea8:	0f 91       	pop	r16
    6eaa:	ff 90       	pop	r15
    6eac:	ef 90       	pop	r14
    6eae:	08 95       	ret

00006eb0 <_Z18ControlsReverseSeta>:
    sprintf(Buf, str);
    return Buf;
}

void ControlsReverseSet(int8_t AddParam)
{
    6eb0:	ef 92       	push	r14
    6eb2:	ff 92       	push	r15
    6eb4:	0f 93       	push	r16
    6eb6:	1f 93       	push	r17
    6eb8:	cf 93       	push	r28
    6eba:	df 93       	push	r29
    6ebc:	00 d0       	rcall	.+0      	; 0x6ebe <_Z18ControlsReverseSeta+0xe>
    6ebe:	1f 92       	push	r1
    6ec0:	cd b7       	in	r28, 0x3d	; 61
    6ec2:	de b7       	in	r29, 0x3e	; 62
    const uint8_t Selected = CurModel.Mode[FLY_MODE].Control[CurrentControl].reverse == 1 ? 0 : 1;
    6ec4:	80 91 36 0d 	lds	r24, 0x0D36
    6ec8:	20 91 68 09 	lds	r18, 0x0968
    6ecc:	36 ef       	ldi	r19, 0xF6	; 246
    6ece:	23 03       	mulsu	r18, r19
    6ed0:	f0 01       	movw	r30, r0
    6ed2:	11 24       	eor	r1, r1
    6ed4:	9d e0       	ldi	r25, 0x0D	; 13
    6ed6:	89 02       	muls	r24, r25
    6ed8:	e0 0d       	add	r30, r0
    6eda:	f1 1d       	adc	r31, r1
    6edc:	11 24       	eor	r1, r1
    6ede:	eb 57       	subi	r30, 0x7B	; 123
    6ee0:	f6 4f       	sbci	r31, 0xF6	; 246
    6ee2:	41 e0       	ldi	r20, 0x01	; 1
    6ee4:	81 a1       	ldd	r24, Z+33	; 0x21
    6ee6:	81 30       	cpi	r24, 0x01	; 1
    6ee8:	09 f4       	brne	.+2      	; 0x6eec <_Z18ControlsReverseSeta+0x3c>
    6eea:	40 e0       	ldi	r20, 0x00	; 0
    const char*   Strings[] = {"OFF", "ON"};
    6eec:	81 e2       	ldi	r24, 0x21	; 33
    6eee:	97 e0       	ldi	r25, 0x07	; 7
    6ef0:	9a 83       	std	Y+2, r25	; 0x02
    6ef2:	89 83       	std	Y+1, r24	; 0x01
    6ef4:	85 e2       	ldi	r24, 0x25	; 37
    6ef6:	97 e0       	ldi	r25, 0x07	; 7
    6ef8:	9c 83       	std	Y+4, r25	; 0x04
    6efa:	8b 83       	std	Y+3, r24	; 0x03

    int8_t result = SelectBox(Strings, ARRAY_SIZE(Strings), Selected, Font_8x12, "Reverse:", Font_8x8);
    6efc:	5a ec       	ldi	r21, 0xCA	; 202
    6efe:	e5 2e       	mov	r14, r21
    6f00:	5c e0       	ldi	r21, 0x0C	; 12
    6f02:	f5 2e       	mov	r15, r21
    6f04:	07 e6       	ldi	r16, 0x67	; 103
    6f06:	17 e0       	ldi	r17, 0x07	; 7
    6f08:	24 ec       	ldi	r18, 0xC4	; 196
    6f0a:	3c e0       	ldi	r19, 0x0C	; 12
    6f0c:	62 e0       	ldi	r22, 0x02	; 2
    6f0e:	ce 01       	movw	r24, r28
    6f10:	01 96       	adiw	r24, 0x01	; 1
    6f12:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_>
    
    if(result == RESULT_INCORRECT)
    6f16:	8f 3f       	cpi	r24, 0xFF	; 255
    6f18:	01 f1       	breq	.+64     	; 0x6f5a <_Z18ControlsReverseSeta+0xaa>
        return;
    
    CurModel.Mode[FLY_MODE].Control[CurrentControl].reverse =  result ? -1 : 1;
    6f1a:	20 91 68 09 	lds	r18, 0x0968
    6f1e:	33 27       	eor	r19, r19
    6f20:	27 fd       	sbrc	r18, 7
    6f22:	30 95       	com	r19
    6f24:	40 91 36 0d 	lds	r20, 0x0D36
    6f28:	55 27       	eor	r21, r21
    6f2a:	47 fd       	sbrc	r20, 7
    6f2c:	50 95       	com	r21
    6f2e:	88 23       	and	r24, r24
    6f30:	11 f0       	breq	.+4      	; 0x6f36 <_Z18ControlsReverseSeta+0x86>
    6f32:	6f ef       	ldi	r22, 0xFF	; 255
    6f34:	01 c0       	rjmp	.+2      	; 0x6f38 <_Z18ControlsReverseSeta+0x88>
    6f36:	61 e0       	ldi	r22, 0x01	; 1
    6f38:	8d e0       	ldi	r24, 0x0D	; 13
    6f3a:	84 9f       	mul	r24, r20
    6f3c:	f0 01       	movw	r30, r0
    6f3e:	85 9f       	mul	r24, r21
    6f40:	f0 0d       	add	r31, r0
    6f42:	11 24       	eor	r1, r1
    6f44:	46 ef       	ldi	r20, 0xF6	; 246
    6f46:	42 9f       	mul	r20, r18
    6f48:	c0 01       	movw	r24, r0
    6f4a:	43 9f       	mul	r20, r19
    6f4c:	90 0d       	add	r25, r0
    6f4e:	11 24       	eor	r1, r1
    6f50:	e8 0f       	add	r30, r24
    6f52:	f9 1f       	adc	r31, r25
    6f54:	eb 57       	subi	r30, 0x7B	; 123
    6f56:	f6 4f       	sbci	r31, 0xF6	; 246
    6f58:	61 a3       	std	Z+33, r22	; 0x21
}
    6f5a:	0f 90       	pop	r0
    6f5c:	0f 90       	pop	r0
    6f5e:	0f 90       	pop	r0
    6f60:	0f 90       	pop	r0
    6f62:	df 91       	pop	r29
    6f64:	cf 91       	pop	r28
    6f66:	1f 91       	pop	r17
    6f68:	0f 91       	pop	r16
    6f6a:	ff 90       	pop	r15
    6f6c:	ef 90       	pop	r14
    6f6e:	08 95       	ret

00006f70 <_Z18ControlsVirtualSeta>:
    sprintf(Buf, ControlsMenuItems[ CurModel.Mode[FLY_MODE].Control[CurrentControl].from ].Name);
    return Buf;
}

void ControlsVirtualSet(int8_t AddParam)
{
    6f70:	ef 92       	push	r14
    6f72:	ff 92       	push	r15
    6f74:	0f 93       	push	r16
    6f76:	1f 93       	push	r17
    6f78:	cf 93       	push	r28
    6f7a:	df 93       	push	r29
    6f7c:	cd b7       	in	r28, 0x3d	; 61
    6f7e:	de b7       	in	r29, 0x3e	; 62
    6f80:	67 97       	sbiw	r28, 0x17	; 23
    6f82:	0f b6       	in	r0, 0x3f	; 63
    6f84:	f8 94       	cli
    6f86:	de bf       	out	0x3e, r29	; 62
    6f88:	0f be       	out	0x3f, r0	; 63
    6f8a:	cd bf       	out	0x3d, r28	; 61
    6f8c:	e8 e3       	ldi	r30, 0x38	; 56
    6f8e:	f2 e0       	ldi	r31, 0x02	; 2
    6f90:	de 01       	movw	r26, r28
    6f92:	11 96       	adiw	r26, 0x01	; 1
    6f94:	cd 01       	movw	r24, r26
    const char* Strings[MAX_CONTROLS];
    for(uint8_t i = 0; i < MAX_CONTROLS; ++i)
        Strings[i] = ControlsMenuItems[i].Name;
    6f96:	20 81       	ld	r18, Z
    6f98:	31 81       	ldd	r19, Z+1	; 0x01
    6f9a:	2d 93       	st	X+, r18
    6f9c:	3d 93       	st	X+, r19
    6f9e:	37 96       	adiw	r30, 0x07	; 7
}

void ControlsVirtualSet(int8_t AddParam)
{
    const char* Strings[MAX_CONTROLS];
    for(uint8_t i = 0; i < MAX_CONTROLS; ++i)
    6fa0:	22 e0       	ldi	r18, 0x02	; 2
    6fa2:	e5 38       	cpi	r30, 0x85	; 133
    6fa4:	f2 07       	cpc	r31, r18
    6fa6:	b9 f7       	brne	.-18     	; 0x6f96 <_Z18ControlsVirtualSeta+0x26>
        Strings[i] = ControlsMenuItems[i].Name;

    const uint8_t Selected = CurModel.Mode[FLY_MODE].Control[CurrentControl].from;
    6fa8:	20 91 36 0d 	lds	r18, 0x0D36
    6fac:	30 91 68 09 	lds	r19, 0x0968
    6fb0:	56 ef       	ldi	r21, 0xF6	; 246
    6fb2:	35 03       	mulsu	r19, r21
    6fb4:	f0 01       	movw	r30, r0
    6fb6:	11 24       	eor	r1, r1
    6fb8:	3d e0       	ldi	r19, 0x0D	; 13
    6fba:	23 02       	muls	r18, r19
    6fbc:	e0 0d       	add	r30, r0
    6fbe:	f1 1d       	adc	r31, r1
    6fc0:	11 24       	eor	r1, r1
    6fc2:	eb 57       	subi	r30, 0x7B	; 123
    6fc4:	f6 4f       	sbci	r31, 0xF6	; 246

    int8_t result = SelectBox(Strings, CTRL_V1, Selected, Font_8x12, "From:", Font_8x8);
    6fc6:	6a ec       	ldi	r22, 0xCA	; 202
    6fc8:	e6 2e       	mov	r14, r22
    6fca:	6c e0       	ldi	r22, 0x0C	; 12
    6fcc:	f6 2e       	mov	r15, r22
    6fce:	00 e7       	ldi	r16, 0x70	; 112
    6fd0:	17 e0       	ldi	r17, 0x07	; 7
    6fd2:	24 ec       	ldi	r18, 0xC4	; 196
    6fd4:	3c e0       	ldi	r19, 0x0C	; 12
    6fd6:	46 a1       	ldd	r20, Z+38	; 0x26
    6fd8:	68 e0       	ldi	r22, 0x08	; 8
    6fda:	5f 8b       	std	Y+23, r21	; 0x17
    6fdc:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_>
    
    if(result != RESULT_INCORRECT)
    6fe0:	5f 89       	ldd	r21, Y+23	; 0x17
    6fe2:	8f 3f       	cpi	r24, 0xFF	; 255
    6fe4:	81 f0       	breq	.+32     	; 0x7006 <_Z18ControlsVirtualSeta+0x96>
        CurModel.Mode[FLY_MODE].Control[CurrentControl].from = result;
    6fe6:	e0 91 36 0d 	lds	r30, 0x0D36
    6fea:	20 91 68 09 	lds	r18, 0x0968
    6fee:	9d e0       	ldi	r25, 0x0D	; 13
    6ff0:	e9 02       	muls	r30, r25
    6ff2:	f0 01       	movw	r30, r0
    6ff4:	11 24       	eor	r1, r1
    6ff6:	25 03       	mulsu	r18, r21
    6ff8:	90 01       	movw	r18, r0
    6ffa:	11 24       	eor	r1, r1
    6ffc:	e2 0f       	add	r30, r18
    6ffe:	f3 1f       	adc	r31, r19
    7000:	eb 57       	subi	r30, 0x7B	; 123
    7002:	f6 4f       	sbci	r31, 0xF6	; 246
    7004:	86 a3       	std	Z+38, r24	; 0x26
}
    7006:	67 96       	adiw	r28, 0x17	; 23
    7008:	0f b6       	in	r0, 0x3f	; 63
    700a:	f8 94       	cli
    700c:	de bf       	out	0x3e, r29	; 62
    700e:	0f be       	out	0x3f, r0	; 63
    7010:	cd bf       	out	0x3d, r28	; 61
    7012:	df 91       	pop	r29
    7014:	cf 91       	pop	r28
    7016:	1f 91       	pop	r17
    7018:	0f 91       	pop	r16
    701a:	ff 90       	pop	r15
    701c:	ef 90       	pop	r14
    701e:	08 95       	ret

00007020 <_Z12TimerModeSeta>:
    sprintf(Buf, (CurModel.timer_mode & 0x02) ? "DOWN" : "UP");
    return Buf;
}
// ***   Установка режима таймера   ********************************************
void TimerModeSet(int8_t AddParam)
{
    7020:	ef 92       	push	r14
    7022:	ff 92       	push	r15
    7024:	0f 93       	push	r16
    7026:	1f 93       	push	r17
    7028:	cf 93       	push	r28
    702a:	df 93       	push	r29
    702c:	00 d0       	rcall	.+0      	; 0x702e <_Z12TimerModeSeta+0xe>
    702e:	1f 92       	push	r1
    7030:	cd b7       	in	r28, 0x3d	; 61
    7032:	de b7       	in	r29, 0x3e	; 62
    const char* Strings[2] = {"UP", "DOWN"};
    7034:	8d e2       	ldi	r24, 0x2D	; 45
    7036:	97 e0       	ldi	r25, 0x07	; 7
    7038:	9a 83       	std	Y+2, r25	; 0x02
    703a:	89 83       	std	Y+1, r24	; 0x01
    703c:	88 e2       	ldi	r24, 0x28	; 40
    703e:	97 e0       	ldi	r25, 0x07	; 7
    7040:	9c 83       	std	Y+4, r25	; 0x04
    7042:	8b 83       	std	Y+3, r24	; 0x03

    // Вызываем функцию выбора значмения
    int8_t result = SelectBox(Strings, ARRAY_SIZE(Strings), (CurModel.timer_mode & 0x02) ? 1 : 0, Font_8x12, "Timer Mode:", Font_8x8);
    7044:	40 91 99 09 	lds	r20, 0x0999
    7048:	46 95       	lsr	r20
    704a:	41 70       	andi	r20, 0x01	; 1
    704c:	7a ec       	ldi	r23, 0xCA	; 202
    704e:	e7 2e       	mov	r14, r23
    7050:	7c e0       	ldi	r23, 0x0C	; 12
    7052:	f7 2e       	mov	r15, r23
    7054:	06 e7       	ldi	r16, 0x76	; 118
    7056:	17 e0       	ldi	r17, 0x07	; 7
    7058:	24 ec       	ldi	r18, 0xC4	; 196
    705a:	3c e0       	ldi	r19, 0x0C	; 12
    705c:	62 e0       	ldi	r22, 0x02	; 2
    705e:	ce 01       	movw	r24, r28
    7060:	01 96       	adiw	r24, 0x01	; 1
    7062:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_>

    if(result == RESULT_INCORRECT)
    7066:	8f 3f       	cpi	r24, 0xFF	; 255
    7068:	49 f0       	breq	.+18     	; 0x707c <_Z12TimerModeSeta+0x5c>
    706a:	90 91 99 09 	lds	r25, 0x0999
        return;
    
    if(result)
    706e:	88 23       	and	r24, r24
    7070:	11 f0       	breq	.+4      	; 0x7076 <_Z12TimerModeSeta+0x56>
        CurModel.timer_mode |=  0x02;
    7072:	92 60       	ori	r25, 0x02	; 2
    7074:	01 c0       	rjmp	.+2      	; 0x7078 <_Z12TimerModeSeta+0x58>
    else
        CurModel.timer_mode &= ~0x02;
    7076:	9d 7f       	andi	r25, 0xFD	; 253
    7078:	90 93 99 09 	sts	0x0999, r25
}
    707c:	0f 90       	pop	r0
    707e:	0f 90       	pop	r0
    7080:	0f 90       	pop	r0
    7082:	0f 90       	pop	r0
    7084:	df 91       	pop	r29
    7086:	cf 91       	pop	r28
    7088:	1f 91       	pop	r17
    708a:	0f 91       	pop	r16
    708c:	ff 90       	pop	r15
    708e:	ef 90       	pop	r14
    7090:	08 95       	ret

00007092 <_Z13TimerSoundSeta>:
    sprintf(Buf, (CurModel.timer_mode & 0x01) ? "OFF" : "ON");
    return Buf;
}

void TimerSoundSet(int8_t AddParam)
{
    7092:	ef 92       	push	r14
    7094:	ff 92       	push	r15
    7096:	0f 93       	push	r16
    7098:	1f 93       	push	r17
    709a:	cf 93       	push	r28
    709c:	df 93       	push	r29
    709e:	00 d0       	rcall	.+0      	; 0x70a0 <_Z13TimerSoundSeta+0xe>
    70a0:	1f 92       	push	r1
    70a2:	cd b7       	in	r28, 0x3d	; 61
    70a4:	de b7       	in	r29, 0x3e	; 62
    const char* Strings[2] = {"OFF", "ON"};
    70a6:	81 e2       	ldi	r24, 0x21	; 33
    70a8:	97 e0       	ldi	r25, 0x07	; 7
    70aa:	9a 83       	std	Y+2, r25	; 0x02
    70ac:	89 83       	std	Y+1, r24	; 0x01
    70ae:	85 e2       	ldi	r24, 0x25	; 37
    70b0:	97 e0       	ldi	r25, 0x07	; 7
    70b2:	9c 83       	std	Y+4, r25	; 0x04
    70b4:	8b 83       	std	Y+3, r24	; 0x03

    int8_t result = SelectBox(Strings, ARRAY_SIZE(Strings), (CurModel.timer_mode & 0x01) ? 0 : 1, Font_8x12, "Timer Sound:", Font_8x8);
    70b6:	40 91 99 09 	lds	r20, 0x0999
    70ba:	40 95       	com	r20
    70bc:	41 70       	andi	r20, 0x01	; 1
    70be:	ea ec       	ldi	r30, 0xCA	; 202
    70c0:	ee 2e       	mov	r14, r30
    70c2:	ec e0       	ldi	r30, 0x0C	; 12
    70c4:	fe 2e       	mov	r15, r30
    70c6:	02 e8       	ldi	r16, 0x82	; 130
    70c8:	17 e0       	ldi	r17, 0x07	; 7
    70ca:	24 ec       	ldi	r18, 0xC4	; 196
    70cc:	3c e0       	ldi	r19, 0x0C	; 12
    70ce:	62 e0       	ldi	r22, 0x02	; 2
    70d0:	ce 01       	movw	r24, r28
    70d2:	01 96       	adiw	r24, 0x01	; 1
    70d4:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_>

    if(result == RESULT_INCORRECT)
    70d8:	8f 3f       	cpi	r24, 0xFF	; 255
    70da:	49 f0       	breq	.+18     	; 0x70ee <_Z13TimerSoundSeta+0x5c>
    70dc:	90 91 99 09 	lds	r25, 0x0999
        return;
        
    if(result)
    70e0:	88 23       	and	r24, r24
    70e2:	11 f0       	breq	.+4      	; 0x70e8 <_Z13TimerSoundSeta+0x56>
        CurModel.timer_mode &= ~0x01;
    70e4:	9e 7f       	andi	r25, 0xFE	; 254
    70e6:	01 c0       	rjmp	.+2      	; 0x70ea <_Z13TimerSoundSeta+0x58>
    else
        CurModel.timer_mode |=  0x01;
    70e8:	91 60       	ori	r25, 0x01	; 1
    70ea:	90 93 99 09 	sts	0x0999, r25
}
    70ee:	0f 90       	pop	r0
    70f0:	0f 90       	pop	r0
    70f2:	0f 90       	pop	r0
    70f4:	0f 90       	pop	r0
    70f6:	df 91       	pop	r29
    70f8:	cf 91       	pop	r28
    70fa:	1f 91       	pop	r17
    70fc:	0f 91       	pop	r16
    70fe:	ff 90       	pop	r15
    7100:	ef 90       	pop	r14
    7102:	08 95       	ret

00007104 <_Z17ModulationTypeSeta>:
    sprintf(Buf, "%s", ModulationTypes[CurModel.modulation]);
    return Buf;
}

void ModulationTypeSet(int8_t AddParam)
{
    7104:	ef 92       	push	r14
    7106:	ff 92       	push	r15
    7108:	0f 93       	push	r16
    710a:	1f 93       	push	r17
    710c:	cf 93       	push	r28
    710e:	df 93       	push	r29
    7110:	00 d0       	rcall	.+0      	; 0x7112 <_Z17ModulationTypeSeta+0xe>
    7112:	00 d0       	rcall	.+0      	; 0x7114 <_Z17ModulationTypeSeta+0x10>
    7114:	cd b7       	in	r28, 0x3d	; 61
    7116:	de b7       	in	r29, 0x3e	; 62
    const char* ModulationTypes[] = {
            "PPM",
            "IPPM",
            "PCM"
        };
    7118:	86 e0       	ldi	r24, 0x06	; 6
    711a:	e0 ed       	ldi	r30, 0xD0	; 208
    711c:	f4 e0       	ldi	r31, 0x04	; 4
    711e:	de 01       	movw	r26, r28
    7120:	11 96       	adiw	r26, 0x01	; 1
    7122:	01 90       	ld	r0, Z+
    7124:	0d 92       	st	X+, r0
    7126:	8a 95       	dec	r24
    7128:	e1 f7       	brne	.-8      	; 0x7122 <_Z17ModulationTypeSeta+0x1e>

    int8_t result = SelectBox(ModulationTypes, ARRAY_SIZE(ModulationTypes), CurModel.modulation, Font_8x12, "Modulation Type:", Font_8x8);
    712a:	fa ec       	ldi	r31, 0xCA	; 202
    712c:	ef 2e       	mov	r14, r31
    712e:	fc e0       	ldi	r31, 0x0C	; 12
    7130:	ff 2e       	mov	r15, r31
    7132:	0f e8       	ldi	r16, 0x8F	; 143
    7134:	17 e0       	ldi	r17, 0x07	; 7
    7136:	24 ec       	ldi	r18, 0xC4	; 196
    7138:	3c e0       	ldi	r19, 0x0C	; 12
    713a:	40 91 95 09 	lds	r20, 0x0995
    713e:	63 e0       	ldi	r22, 0x03	; 3
    7140:	ce 01       	movw	r24, r28
    7142:	01 96       	adiw	r24, 0x01	; 1
    7144:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_>

    if(result != RESULT_INCORRECT)
    7148:	8f 3f       	cpi	r24, 0xFF	; 255
    714a:	49 f0       	breq	.+18     	; 0x715e <_Z17ModulationTypeSeta+0x5a>
    {
        CurModel.modulation = (Modulation)result;
    714c:	99 27       	eor	r25, r25
    714e:	87 fd       	sbrc	r24, 7
    7150:	90 95       	com	r25
    7152:	90 93 96 09 	sts	0x0996, r25
    7156:	80 93 95 09 	sts	0x0995, r24
        hwr_SetModulation(CurModel.modulation);
    715a:	0e 94 29 44 	call	0x8852	; 0x8852 <_Z17hwr_SetModulation10Modulation>
    }
}
    715e:	26 96       	adiw	r28, 0x06	; 6
    7160:	0f b6       	in	r0, 0x3f	; 63
    7162:	f8 94       	cli
    7164:	de bf       	out	0x3e, r29	; 62
    7166:	0f be       	out	0x3f, r0	; 63
    7168:	cd bf       	out	0x3d, r28	; 61
    716a:	df 91       	pop	r29
    716c:	cf 91       	pop	r28
    716e:	1f 91       	pop	r17
    7170:	0f 91       	pop	r16
    7172:	ff 90       	pop	r15
    7174:	ef 90       	pop	r14
    7176:	08 95       	ret

00007178 <_Z19ModelChannelsNumSeta>:
    sprintf(Buf, "%d", CurModel.num_ch);
    return Buf;
}

void ModelChannelsNumSet(int8_t AddParam)
{
    7178:	ef 92       	push	r14
    717a:	ff 92       	push	r15
    717c:	0f 93       	push	r16
    EditNumDlg(&CurModel.num_ch, PTR_INT8, 2, MAX_CHANNELS, 100, "Channels");
    717e:	a0 ea       	ldi	r26, 0xA0	; 160
    7180:	ea 2e       	mov	r14, r26
    7182:	a7 e0       	ldi	r26, 0x07	; 7
    7184:	fa 2e       	mov	r15, r26
    7186:	04 e6       	ldi	r16, 0x64	; 100
    7188:	28 e0       	ldi	r18, 0x08	; 8
    718a:	30 e0       	ldi	r19, 0x00	; 0
    718c:	42 e0       	ldi	r20, 0x02	; 2
    718e:	50 e0       	ldi	r21, 0x00	; 0
    7190:	60 e0       	ldi	r22, 0x00	; 0
    7192:	70 e0       	ldi	r23, 0x00	; 0
    7194:	8a e9       	ldi	r24, 0x9A	; 154
    7196:	99 e0       	ldi	r25, 0x09	; 9
    7198:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_Z10EditNumDlgPv11PointerTypeiihPKc>
}
    719c:	0f 91       	pop	r16
    719e:	ff 90       	pop	r15
    71a0:	ef 90       	pop	r14
    71a2:	08 95       	ret

000071a4 <_Z18MixerChangeSettinga>:
// 

static char MixerCurrentChannel;

void MixerChangeSetting(int8_t AddParam)
{
    71a4:	ef 92       	push	r14
    71a6:	ff 92       	push	r15
    71a8:	0f 93       	push	r16
    EditNumDlg(&CurModel.Mode[FLY_MODE].Chanels[MixerCurrentChannel][AddParam], PTR_INT8, -100, 100, 120, "Mixer");
    71aa:	e0 91 35 0d 	lds	r30, 0x0D35
    71ae:	3b e0       	ldi	r19, 0x0B	; 11
    71b0:	e3 02       	muls	r30, r19
    71b2:	f0 01       	movw	r30, r0
    71b4:	11 24       	eor	r1, r1
    71b6:	e8 0f       	add	r30, r24
    71b8:	f1 1d       	adc	r31, r1
    71ba:	87 fd       	sbrc	r24, 7
    71bc:	fa 95       	dec	r31
    71be:	20 91 68 09 	lds	r18, 0x0968
    71c2:	36 ef       	ldi	r19, 0xF6	; 246
    71c4:	23 03       	mulsu	r18, r19
    71c6:	e0 0d       	add	r30, r0
    71c8:	f1 1d       	adc	r31, r1
    71ca:	11 24       	eor	r1, r1
    71cc:	ba e8       	ldi	r27, 0x8A	; 138
    71ce:	eb 2e       	mov	r14, r27
    71d0:	b8 e0       	ldi	r27, 0x08	; 8
    71d2:	fb 2e       	mov	r15, r27
    71d4:	08 e7       	ldi	r16, 0x78	; 120
    71d6:	24 e6       	ldi	r18, 0x64	; 100
    71d8:	30 e0       	ldi	r19, 0x00	; 0
    71da:	4c e9       	ldi	r20, 0x9C	; 156
    71dc:	5f ef       	ldi	r21, 0xFF	; 255
    71de:	60 e0       	ldi	r22, 0x00	; 0
    71e0:	70 e0       	ldi	r23, 0x00	; 0
    71e2:	cf 01       	movw	r24, r30
    71e4:	8b 5c       	subi	r24, 0xCB	; 203
    71e6:	95 4f       	sbci	r25, 0xF5	; 245
    71e8:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_Z10EditNumDlgPv11PointerTypeiihPKc>
}
    71ec:	0f 91       	pop	r16
    71ee:	ff 90       	pop	r15
    71f0:	ef 90       	pop	r14
    71f2:	08 95       	ret

000071f4 <_Z12ModelNameSeta>:
    sprintf(Buf, "%s", CurModel.name);
    return Buf;
}

void ModelNameSet(int8_t AddParam)
{
    71f4:	0f 93       	push	r16
    71f6:	1f 93       	push	r17
    EditStrDlg(CurModel.name, ARRAY_SIZE(CurModel.name) - 1, Font_8x12, "Model Name:", Font_8x8);
    71f8:	0a ec       	ldi	r16, 0xCA	; 202
    71fa:	1c e0       	ldi	r17, 0x0C	; 12
    71fc:	29 ea       	ldi	r18, 0xA9	; 169
    71fe:	37 e0       	ldi	r19, 0x07	; 7
    7200:	44 ec       	ldi	r20, 0xC4	; 196
    7202:	5c e0       	ldi	r21, 0x0C	; 12
    7204:	6c e0       	ldi	r22, 0x0C	; 12
    7206:	87 e8       	ldi	r24, 0x87	; 135
    7208:	99 e0       	ldi	r25, 0x09	; 9
    720a:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_Z10EditStrDlgPchRK11FontProfilePKcS2_>
}
    720e:	1f 91       	pop	r17
    7210:	0f 91       	pop	r16
    7212:	08 95       	ret

00007214 <_Z11ModeNameSeta>:
    sprintf(Buf, "%s", CurModel.Mode[FLY_MODE].name);
    return Buf;
}

void ModeNameSet(int8_t AddParam)
{
    7214:	0f 93       	push	r16
    7216:	1f 93       	push	r17
    EditStrDlg(CurModel.Mode[FLY_MODE].name, ARRAY_SIZE(CurModel.Mode[FLY_MODE].name) - 1, Font_8x12, "Mode Name:", Font_8x8);
    7218:	20 91 68 09 	lds	r18, 0x0968
    721c:	36 ef       	ldi	r19, 0xF6	; 246
    721e:	23 03       	mulsu	r18, r19
    7220:	c0 01       	movw	r24, r0
    7222:	11 24       	eor	r1, r1
    7224:	0a ec       	ldi	r16, 0xCA	; 202
    7226:	1c e0       	ldi	r17, 0x0C	; 12
    7228:	25 eb       	ldi	r18, 0xB5	; 181
    722a:	37 e0       	ldi	r19, 0x07	; 7
    722c:	44 ec       	ldi	r20, 0xC4	; 196
    722e:	5c e0       	ldi	r21, 0x0C	; 12
    7230:	6a e0       	ldi	r22, 0x0A	; 10
    7232:	85 56       	subi	r24, 0x65	; 101
    7234:	96 4f       	sbci	r25, 0xF6	; 246
    7236:	0e 94 51 31 	call	0x62a2	; 0x62a2 <_Z10EditStrDlgPchRK11FontProfilePKcS2_>
}
    723a:	1f 91       	pop	r17
    723c:	0f 91       	pop	r16
    723e:	08 95       	ret

00007240 <_Z11ModelSelecta>:

void ModelSelect(int8_t AddParam)
{
    7240:	6f 92       	push	r6
    7242:	7f 92       	push	r7
    7244:	8f 92       	push	r8
    7246:	9f 92       	push	r9
    7248:	af 92       	push	r10
    724a:	bf 92       	push	r11
    724c:	cf 92       	push	r12
    724e:	df 92       	push	r13
    7250:	ef 92       	push	r14
    7252:	ff 92       	push	r15
    7254:	0f 93       	push	r16
    7256:	1f 93       	push	r17
    7258:	cf 93       	push	r28
    725a:	df 93       	push	r29
    725c:	cd b7       	in	r28, 0x3d	; 61
    725e:	de b7       	in	r29, 0x3e	; 62
    7260:	cb 54       	subi	r28, 0x4B	; 75
    7262:	d1 09       	sbc	r29, r1
    7264:	0f b6       	in	r0, 0x3f	; 63
    7266:	f8 94       	cli
    7268:	de bf       	out	0x3e, r29	; 62
    726a:	0f be       	out	0x3f, r0	; 63
    726c:	cd bf       	out	0x3d, r28	; 61
    726e:	ce 01       	movw	r24, r28
    7270:	01 96       	adiw	r24, 0x01	; 1
    7272:	5c 01       	movw	r10, r24
    7274:	7e 01       	movw	r14, r28
    7276:	92 e4       	ldi	r25, 0x42	; 66
    7278:	e9 0e       	add	r14, r25
    727a:	f1 1c       	adc	r15, r1
    727c:	c1 2c       	mov	r12, r1
    727e:	d1 2c       	mov	r13, r1
    7280:	37 01       	movw	r6, r14
    7282:	00 e0       	ldi	r16, 0x00	; 0
    7284:	10 e0       	ldi	r17, 0x00	; 0
    7286:	f6 01       	movw	r30, r12
    7288:	ee 5f       	subi	r30, 0xFE	; 254
    728a:	ff 4f       	sbci	r31, 0xFF	; 255
    728c:	4f 01       	movw	r8, r30
    char        ModelsStr[MAX_MODELS][MODEL_NAME_LEN];
    const char* ModelsStrPtrs[MAX_MODELS];
    for(uint8_t i = 0; i < MAX_MODELS; ++i)
    {
        for(uint8_t j = 0; j < MODEL_NAME_LEN; ++j)
            ModelsStr[i][j] = eeprom_read_byte((uint8_t*)&EEPROM_MODEL[i].name[j]);
    728e:	c4 01       	movw	r24, r8
    7290:	80 0f       	add	r24, r16
    7292:	91 1f       	adc	r25, r17
    7294:	0e 94 08 4b 	call	0x9610	; 0x9610 <__eerd_byte_m2560>
    7298:	f5 01       	movw	r30, r10
    729a:	e0 0f       	add	r30, r16
    729c:	f1 1f       	adc	r31, r17
    729e:	80 83       	st	Z, r24
    72a0:	0f 5f       	subi	r16, 0xFF	; 255
    72a2:	1f 4f       	sbci	r17, 0xFF	; 255
{
    char        ModelsStr[MAX_MODELS][MODEL_NAME_LEN];
    const char* ModelsStrPtrs[MAX_MODELS];
    for(uint8_t i = 0; i < MAX_MODELS; ++i)
    {
        for(uint8_t j = 0; j < MODEL_NAME_LEN; ++j)
    72a4:	0d 30       	cpi	r16, 0x0D	; 13
    72a6:	11 05       	cpc	r17, r1
    72a8:	91 f7       	brne	.-28     	; 0x728e <_Z11ModelSelecta+0x4e>
            ModelsStr[i][j] = eeprom_read_byte((uint8_t*)&EEPROM_MODEL[i].name[j]);
        ModelsStrPtrs[i] = ModelsStr[i];
    72aa:	f7 01       	movw	r30, r14
    72ac:	a1 92       	st	Z+, r10
    72ae:	b1 92       	st	Z+, r11
    72b0:	7f 01       	movw	r14, r30
    72b2:	fd e0       	ldi	r31, 0x0D	; 13
    72b4:	af 0e       	add	r10, r31
    72b6:	b1 1c       	adc	r11, r1
    72b8:	88 e0       	ldi	r24, 0x08	; 8
    72ba:	c8 1a       	sub	r12, r24
    72bc:	8d ef       	ldi	r24, 0xFD	; 253
    72be:	d8 0a       	sbc	r13, r24

void ModelSelect(int8_t AddParam)
{
    char        ModelsStr[MAX_MODELS][MODEL_NAME_LEN];
    const char* ModelsStrPtrs[MAX_MODELS];
    for(uint8_t i = 0; i < MAX_MODELS; ++i)
    72c0:	98 ed       	ldi	r25, 0xD8	; 216
    72c2:	c9 16       	cp	r12, r25
    72c4:	9e e0       	ldi	r25, 0x0E	; 14
    72c6:	d9 06       	cpc	r13, r25
    72c8:	e1 f6       	brne	.-72     	; 0x7282 <_Z11ModelSelecta+0x42>
        for(uint8_t j = 0; j < MODEL_NAME_LEN; ++j)
            ModelsStr[i][j] = eeprom_read_byte((uint8_t*)&EEPROM_MODEL[i].name[j]);
        ModelsStrPtrs[i] = ModelsStr[i];
    }

    int8_t result = SelectBox(ModelsStrPtrs, MAX_MODELS, Settings.ModelNum, Font_8x12, "Model:", Font_8x8);
    72ca:	1a ec       	ldi	r17, 0xCA	; 202
    72cc:	e1 2e       	mov	r14, r17
    72ce:	1c e0       	ldi	r17, 0x0C	; 12
    72d0:	f1 2e       	mov	r15, r17
    72d2:	00 ec       	ldi	r16, 0xC0	; 192
    72d4:	17 e0       	ldi	r17, 0x07	; 7
    72d6:	24 ec       	ldi	r18, 0xC4	; 196
    72d8:	3c e0       	ldi	r19, 0x0C	; 12
    72da:	40 91 81 0c 	lds	r20, 0x0C81
    72de:	65 e0       	ldi	r22, 0x05	; 5
    72e0:	c3 01       	movw	r24, r6
    72e2:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_>

    if(result == RESULT_INCORRECT)
    72e6:	8f 3f       	cpi	r24, 0xFF	; 255
    72e8:	51 f0       	breq	.+20     	; 0x72fe <_Z11ModelSelecta+0xbe>
        return;
    
    cli();
    72ea:	f8 94       	cli
    
    Settings.ModelNum = result;
    72ec:	80 93 81 0c 	sts	0x0C81, r24
    TX_SaveSettings();
    72f0:	0e 94 78 25 	call	0x4af0	; 0x4af0 <_Z15TX_SaveSettingsv>
    MODEL_Init(Settings.ModelNum);
    72f4:	80 91 81 0c 	lds	r24, 0x0C81
    72f8:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <_Z10MODEL_Inita>
    
    sei();
    72fc:	78 94       	sei
}
    72fe:	c5 5b       	subi	r28, 0xB5	; 181
    7300:	df 4f       	sbci	r29, 0xFF	; 255
    7302:	0f b6       	in	r0, 0x3f	; 63
    7304:	f8 94       	cli
    7306:	de bf       	out	0x3e, r29	; 62
    7308:	0f be       	out	0x3f, r0	; 63
    730a:	cd bf       	out	0x3d, r28	; 61
    730c:	df 91       	pop	r29
    730e:	cf 91       	pop	r28
    7310:	1f 91       	pop	r17
    7312:	0f 91       	pop	r16
    7314:	ff 90       	pop	r15
    7316:	ef 90       	pop	r14
    7318:	df 90       	pop	r13
    731a:	cf 90       	pop	r12
    731c:	bf 90       	pop	r11
    731e:	af 90       	pop	r10
    7320:	9f 90       	pop	r9
    7322:	8f 90       	pop	r8
    7324:	7f 90       	pop	r7
    7326:	6f 90       	pop	r6
    7328:	08 95       	ret

0000732a <_Z15OptionsSoundSeta>:
    sprintf(Buf, Settings.SoundFlag ? "ON" : "OFF");
    return Buf;
}

void OptionsSoundSet(int8_t AddParam)
{
    732a:	ef 92       	push	r14
    732c:	ff 92       	push	r15
    732e:	0f 93       	push	r16
    7330:	1f 93       	push	r17
    7332:	cf 93       	push	r28
    7334:	df 93       	push	r29
    7336:	00 d0       	rcall	.+0      	; 0x7338 <_Z15OptionsSoundSeta+0xe>
    7338:	1f 92       	push	r1
    733a:	cd b7       	in	r28, 0x3d	; 61
    733c:	de b7       	in	r29, 0x3e	; 62
    const char* Strings[2] = {"OFF", "ON"};
    733e:	81 e2       	ldi	r24, 0x21	; 33
    7340:	97 e0       	ldi	r25, 0x07	; 7
    7342:	9a 83       	std	Y+2, r25	; 0x02
    7344:	89 83       	std	Y+1, r24	; 0x01
    7346:	85 e2       	ldi	r24, 0x25	; 37
    7348:	97 e0       	ldi	r25, 0x07	; 7
    734a:	9c 83       	std	Y+4, r25	; 0x04
    734c:	8b 83       	std	Y+3, r24	; 0x03

    int8_t result = SelectBox(Strings, ARRAY_SIZE(Strings), Settings.SoundFlag, Font_8x12, "Sound:", Font_8x8);
    734e:	0a ec       	ldi	r16, 0xCA	; 202
    7350:	e0 2e       	mov	r14, r16
    7352:	0c e0       	ldi	r16, 0x0C	; 12
    7354:	f0 2e       	mov	r15, r16
    7356:	08 e8       	ldi	r16, 0x88	; 136
    7358:	17 e0       	ldi	r17, 0x07	; 7
    735a:	24 ec       	ldi	r18, 0xC4	; 196
    735c:	3c e0       	ldi	r19, 0x0C	; 12
    735e:	40 91 80 0c 	lds	r20, 0x0C80
    7362:	62 e0       	ldi	r22, 0x02	; 2
    7364:	ce 01       	movw	r24, r28
    7366:	01 96       	adiw	r24, 0x01	; 1
    7368:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_Z9SelectBoxPPKchhRK11FontProfileS0_S4_>

    if(result == RESULT_INCORRECT)
    736c:	8f 3f       	cpi	r24, 0xFF	; 255
    736e:	21 f0       	breq	.+8      	; 0x7378 <_Z15OptionsSoundSeta+0x4e>
        return;

    Settings.SoundFlag = result;
    7370:	80 93 80 0c 	sts	0x0C80, r24
    TX_SaveSettings();
    7374:	0e 94 78 25 	call	0x4af0	; 0x4af0 <_Z15TX_SaveSettingsv>
}
    7378:	0f 90       	pop	r0
    737a:	0f 90       	pop	r0
    737c:	0f 90       	pop	r0
    737e:	0f 90       	pop	r0
    7380:	df 91       	pop	r29
    7382:	cf 91       	pop	r28
    7384:	1f 91       	pop	r17
    7386:	0f 91       	pop	r16
    7388:	ff 90       	pop	r15
    738a:	ef 90       	pop	r14
    738c:	08 95       	ret

0000738e <_Z9ModelMenua>:
    
    sei();
}

void ModelMenu(int8_t AddParam)
{
    738e:	0f 93       	push	r16
    7390:	1f 93       	push	r17
    7392:	cf 93       	push	r28
    7394:	df 93       	push	r29
    7396:	cd b7       	in	r28, 0x3d	; 61
    7398:	de b7       	in	r29, 0x3e	; 62
    739a:	ce 54       	subi	r28, 0x4E	; 78
    739c:	d1 09       	sbc	r29, r1
    739e:	0f b6       	in	r0, 0x3f	; 63
    73a0:	f8 94       	cli
    73a2:	de bf       	out	0x3e, r29	; 62
    73a4:	0f be       	out	0x3f, r0	; 63
    73a6:	cd bf       	out	0x3d, r28	; 61
        {"Save",       ModelSave,           NULL,                   0 },
        {"Select",     ModelSelect,         NULL,                   0 },
        {"Copy",       ModelCopy,           NULL,                   0 },
        {"Modes Copy", ModeCopy,            NULL,                   0 },
        {"Reset",      ModelReset,          NULL,                   0 }
    };
    73a8:	86 e4       	ldi	r24, 0x46	; 70
    73aa:	e6 ed       	ldi	r30, 0xD6	; 214
    73ac:	f4 e0       	ldi	r31, 0x04	; 4
    73ae:	de 01       	movw	r26, r28
    73b0:	11 96       	adiw	r26, 0x01	; 1
    73b2:	01 90       	ld	r0, Z+
    73b4:	0d 92       	st	X+, r0
    73b6:	8a 95       	dec	r24
    73b8:	e1 f7       	brne	.-8      	; 0x73b2 <_Z9ModelMenua+0x24>
    
    CMenu Menu("Model", ModelMenuItems, ARRAY_SIZE(ModelMenuItems), Font_8x8);
    73ba:	0a ec       	ldi	r16, 0xCA	; 202
    73bc:	1c e0       	ldi	r17, 0x0C	; 12
    73be:	2a e0       	ldi	r18, 0x0A	; 10
    73c0:	ae 01       	movw	r20, r28
    73c2:	4f 5f       	subi	r20, 0xFF	; 255
    73c4:	5f 4f       	sbci	r21, 0xFF	; 255
    73c6:	67 ec       	ldi	r22, 0xC7	; 199
    73c8:	77 e0       	ldi	r23, 0x07	; 7
    73ca:	ce 01       	movw	r24, r28
    73cc:	89 5b       	subi	r24, 0xB9	; 185
    73ce:	9f 4f       	sbci	r25, 0xFF	; 255
    73d0:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN5CMenuC1EPKcPKNS_4ItemEhRK11FontProfile>
    
    Menu.Run();
    73d4:	ce 01       	movw	r24, r28
    73d6:	89 5b       	subi	r24, 0xB9	; 185
    73d8:	9f 4f       	sbci	r25, 0xFF	; 255
    73da:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN5CMenu3RunEv>
}
    73de:	c2 5b       	subi	r28, 0xB2	; 178
    73e0:	df 4f       	sbci	r29, 0xFF	; 255
    73e2:	0f b6       	in	r0, 0x3f	; 63
    73e4:	f8 94       	cli
    73e6:	de bf       	out	0x3e, r29	; 62
    73e8:	0f be       	out	0x3f, r0	; 63
    73ea:	cd bf       	out	0x3d, r28	; 61
    73ec:	df 91       	pop	r29
    73ee:	cf 91       	pop	r28
    73f0:	1f 91       	pop	r17
    73f2:	0f 91       	pop	r16
    73f4:	08 95       	ret

000073f6 <_Z20ControlsSettingsMenua>:

void ControlsVirtualSet(int8_t AddParam);


void ControlsSettingsMenu(int8_t AddParam)
{
    73f6:	0f 93       	push	r16
    73f8:	1f 93       	push	r17
    73fa:	cf 93       	push	r28
    73fc:	df 93       	push	r29
    73fe:	cd b7       	in	r28, 0x3d	; 61
    7400:	de b7       	in	r29, 0x3e	; 62
    7402:	e2 97       	sbiw	r28, 0x32	; 50
    7404:	0f b6       	in	r0, 0x3f	; 63
    7406:	f8 94       	cli
    7408:	de bf       	out	0x3e, r29	; 62
    740a:	0f be       	out	0x3f, r0	; 63
    740c:	cd bf       	out	0x3d, r28	; 61
    // Запоминаем номер текущего управляющего элемента
    CurrentControl = AddParam;
    740e:	80 93 36 0d 	sts	0x0D36, r24

    // Устанавливаем настройки в зависимости от настраеваемиго канала
    switch(AddParam)
    7412:	99 27       	eor	r25, r25
    7414:	87 fd       	sbrc	r24, 7
    7416:	90 95       	com	r25
    7418:	a9 2f       	mov	r26, r25
    741a:	b9 2f       	mov	r27, r25
    741c:	8a 30       	cpi	r24, 0x0A	; 10
    741e:	91 05       	cpc	r25, r1
    7420:	80 f5       	brcc	.+96     	; 0x7482 <_Z20ControlsSettingsMenua+0x8c>
    7422:	fc 01       	movw	r30, r24
    7424:	ee 58       	subi	r30, 0x8E	; 142
    7426:	ff 4f       	sbci	r31, 0xFF	; 255
    7428:	0c 94 6d 48 	jmp	0x90da	; 0x90da <__tablejump2__>
                {"Reverse",  ControlsReverseSet,  ControlsReverseGetStr, CTRLS_REV   },
                {"Min Rate", ControlsRateSet,     ControlsRateGetStr,    CTRLS_MINR  },
                {"Max Rate", ControlsRateSet,     ControlsRateGetStr,    CTRLS_MAXR  },
                {"T. Cut",   ControlsRateSet,     ControlsRateGetStr,    CTRLS_TCUT  },
                {"Curve",    ControlsCurveChange, NULL,                  CTRLS_CURVE }
            };
    742c:	83 e2       	ldi	r24, 0x23	; 35
    742e:	ec e1       	ldi	r30, 0x1C	; 28
    7430:	f5 e0       	ldi	r31, 0x05	; 5
    7432:	1d c0       	rjmp	.+58     	; 0x746e <_Z20ControlsSettingsMenua+0x78>
            {
                {"Reverse",  ControlsReverseSet,  ControlsReverseGetStr, CTRLS_REV   },
                {"Min Rate", ControlsRateSet,     ControlsRateGetStr,    CTRLS_MINR  },
                {"Max Rate", ControlsRateSet,     ControlsRateGetStr,    CTRLS_MAXR  },
                {"Curve",    ControlsCurveChange, NULL,                  CTRLS_CURVE }
            };
    7434:	8c e1       	ldi	r24, 0x1C	; 28
    7436:	ef e3       	ldi	r30, 0x3F	; 63
    7438:	f5 e0       	ldi	r31, 0x05	; 5
    743a:	de 01       	movw	r26, r28
    743c:	11 96       	adiw	r26, 0x01	; 1
    743e:	01 90       	ld	r0, Z+
    7440:	0d 92       	st	X+, r0
    7442:	8a 95       	dec	r24
    7444:	e1 f7       	brne	.-8      	; 0x743e <_Z20ControlsSettingsMenua+0x48>

            CMenu Menu("Controls", ControlsAuxSettings, ARRAY_SIZE(ControlsAuxSettings), Font_8x8);
    7446:	0a ec       	ldi	r16, 0xCA	; 202
    7448:	1c e0       	ldi	r17, 0x0C	; 12
    744a:	24 e0       	ldi	r18, 0x04	; 4
    744c:	26 c0       	rjmp	.+76     	; 0x749a <_Z20ControlsSettingsMenua+0xa4>
            CMenu::Item ControlsSwSettings[] =
            {
                {"Reverse",  ControlsReverseSet, ControlsReverseGetStr, CTRLS_REV  },
                {"Min Rate", ControlsRateSet,    ControlsRateGetStr,    CTRLS_MINR },
                {"Max Rate", ControlsRateSet,    ControlsRateGetStr,    CTRLS_MAXR }
            };
    744e:	85 e1       	ldi	r24, 0x15	; 21
    7450:	eb e5       	ldi	r30, 0x5B	; 91
    7452:	f5 e0       	ldi	r31, 0x05	; 5
    7454:	de 01       	movw	r26, r28
    7456:	11 96       	adiw	r26, 0x01	; 1
    7458:	01 90       	ld	r0, Z+
    745a:	0d 92       	st	X+, r0
    745c:	8a 95       	dec	r24
    745e:	e1 f7       	brne	.-8      	; 0x7458 <_Z20ControlsSettingsMenua+0x62>

            CMenu Menu("Controls", ControlsSwSettings, ARRAY_SIZE(ControlsSwSettings), Font_8x8);
    7460:	0a ec       	ldi	r16, 0xCA	; 202
    7462:	1c e0       	ldi	r17, 0x0C	; 12
    7464:	23 e0       	ldi	r18, 0x03	; 3
    7466:	19 c0       	rjmp	.+50     	; 0x749a <_Z20ControlsSettingsMenua+0xa4>
                {"Reverse",  ControlsReverseSet,  ControlsReverseGetStr, CTRLS_REV   },
                {"Min Rate", ControlsRateSet,     ControlsRateGetStr,    CTRLS_MINR  },
                {"Max Rate", ControlsRateSet,     ControlsRateGetStr,    CTRLS_MAXR  },
                {"Curve",    ControlsCurveChange, NULL,                  CTRLS_CURVE },
                {"From",     ControlsVirtualSet,  ControlsVirtualGetStr, CTRLS_FROM  }
            };
    7468:	83 e2       	ldi	r24, 0x23	; 35
    746a:	e0 e7       	ldi	r30, 0x70	; 112
    746c:	f5 e0       	ldi	r31, 0x05	; 5
    746e:	de 01       	movw	r26, r28
    7470:	11 96       	adiw	r26, 0x01	; 1
    7472:	01 90       	ld	r0, Z+
    7474:	0d 92       	st	X+, r0
    7476:	8a 95       	dec	r24
    7478:	e1 f7       	brne	.-8      	; 0x7472 <_Z20ControlsSettingsMenua+0x7c>

            CMenu Menu("Controls", ControlsVSettings, ARRAY_SIZE(ControlsVSettings), Font_8x8);
    747a:	0a ec       	ldi	r16, 0xCA	; 202
    747c:	1c e0       	ldi	r17, 0x0C	; 12
    747e:	25 e0       	ldi	r18, 0x05	; 5
    7480:	0c c0       	rjmp	.+24     	; 0x749a <_Z20ControlsSettingsMenua+0xa4>
                {"Min Rate",      ControlsRateSet,     ControlsRateGetStr,    CTRLS_MINR  },
                {"Max Rate",      ControlsRateSet,     ControlsRateGetStr,    CTRLS_MAXR  },
                {"Min Dual Rate", ControlsRateSet,     ControlsRateGetStr,    CTRLS_MAXDR },
                {"Max Dual Rate", ControlsRateSet,     ControlsRateGetStr,    CTRLS_MINDR },
                {"Curve",         ControlsCurveChange, NULL,                  CTRLS_CURVE }
            };
    7482:	8a e2       	ldi	r24, 0x2A	; 42
    7484:	e3 e9       	ldi	r30, 0x93	; 147
    7486:	f5 e0       	ldi	r31, 0x05	; 5
    7488:	de 01       	movw	r26, r28
    748a:	11 96       	adiw	r26, 0x01	; 1
    748c:	01 90       	ld	r0, Z+
    748e:	0d 92       	st	X+, r0
    7490:	8a 95       	dec	r24
    7492:	e1 f7       	brne	.-8      	; 0x748c <_Z20ControlsSettingsMenua+0x96>

            CMenu Menu("Controls", ControlsMainSettings, ARRAY_SIZE(ControlsMainSettings), Font_8x8);
    7494:	0a ec       	ldi	r16, 0xCA	; 202
    7496:	1c e0       	ldi	r17, 0x0C	; 12
    7498:	26 e0       	ldi	r18, 0x06	; 6
    749a:	ae 01       	movw	r20, r28
    749c:	4f 5f       	subi	r20, 0xFF	; 255
    749e:	5f 4f       	sbci	r21, 0xFF	; 255
    74a0:	69 ef       	ldi	r22, 0xF9	; 249
    74a2:	77 e0       	ldi	r23, 0x07	; 7
    74a4:	ce 01       	movw	r24, r28
    74a6:	8b 96       	adiw	r24, 0x2b	; 43
    74a8:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN5CMenuC1EPKcPKNS_4ItemEhRK11FontProfile>
            Menu.Run();
    74ac:	ce 01       	movw	r24, r28
    74ae:	8b 96       	adiw	r24, 0x2b	; 43
    74b0:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN5CMenu3RunEv>
            break;
        }
    }
}
    74b4:	e2 96       	adiw	r28, 0x32	; 50
    74b6:	0f b6       	in	r0, 0x3f	; 63
    74b8:	f8 94       	cli
    74ba:	de bf       	out	0x3e, r29	; 62
    74bc:	0f be       	out	0x3f, r0	; 63
    74be:	cd bf       	out	0x3d, r28	; 61
    74c0:	df 91       	pop	r29
    74c2:	cf 91       	pop	r28
    74c4:	1f 91       	pop	r17
    74c6:	0f 91       	pop	r16
    74c8:	08 95       	ret

000074ca <_Z12ControlsMenua>:
    if(result != RESULT_INCORRECT)
        CurModel.Mode[FLY_MODE].Control[CurrentControl].from = result;
}

void ControlsMenu(int8_t AddParam)
{
    74ca:	0f 93       	push	r16
    74cc:	1f 93       	push	r17
    74ce:	cf 93       	push	r28
    74d0:	df 93       	push	r29
    74d2:	cd b7       	in	r28, 0x3d	; 61
    74d4:	de b7       	in	r29, 0x3e	; 62
    74d6:	28 97       	sbiw	r28, 0x08	; 8
    74d8:	0f b6       	in	r0, 0x3f	; 63
    74da:	f8 94       	cli
    74dc:	de bf       	out	0x3e, r29	; 62
    74de:	0f be       	out	0x3f, r0	; 63
    74e0:	cd bf       	out	0x3d, r28	; 61
    CMenu Menu("Controls", ControlsMenuItems, ARRAY_SIZE(ControlsMenuItems), Font_8x8);
    74e2:	0a ec       	ldi	r16, 0xCA	; 202
    74e4:	1c e0       	ldi	r17, 0x0C	; 12
    74e6:	2a e0       	ldi	r18, 0x0A	; 10
    74e8:	48 e3       	ldi	r20, 0x38	; 56
    74ea:	52 e0       	ldi	r21, 0x02	; 2
    74ec:	69 ef       	ldi	r22, 0xF9	; 249
    74ee:	77 e0       	ldi	r23, 0x07	; 7
    74f0:	ce 01       	movw	r24, r28
    74f2:	01 96       	adiw	r24, 0x01	; 1
    74f4:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN5CMenuC1EPKcPKNS_4ItemEhRK11FontProfile>
    Menu.Run();
    74f8:	ce 01       	movw	r24, r28
    74fa:	01 96       	adiw	r24, 0x01	; 1
    74fc:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN5CMenu3RunEv>
}
    7500:	28 96       	adiw	r28, 0x08	; 8
    7502:	0f b6       	in	r0, 0x3f	; 63
    7504:	f8 94       	cli
    7506:	de bf       	out	0x3e, r29	; 62
    7508:	0f be       	out	0x3f, r0	; 63
    750a:	cd bf       	out	0x3d, r28	; 61
    750c:	df 91       	pop	r29
    750e:	cf 91       	pop	r28
    7510:	1f 91       	pop	r17
    7512:	0f 91       	pop	r16
    7514:	08 95       	ret

00007516 <_Z12ChannelsMenua>:
    
    Menu.Run();
}

void ChannelsMenu(int8_t AddParam)
{
    7516:	0f 93       	push	r16
    7518:	1f 93       	push	r17
    751a:	cf 93       	push	r28
    751c:	df 93       	push	r29
    751e:	cd b7       	in	r28, 0x3d	; 61
    7520:	de b7       	in	r29, 0x3e	; 62
    7522:	28 97       	sbiw	r28, 0x08	; 8
    7524:	0f b6       	in	r0, 0x3f	; 63
    7526:	f8 94       	cli
    7528:	de bf       	out	0x3e, r29	; 62
    752a:	0f be       	out	0x3f, r0	; 63
    752c:	cd bf       	out	0x3d, r28	; 61
        {"CH 6", ChannelsMixerMenu, NULL, 5},
        {"CH 7", ChannelsMixerMenu, NULL, 6},
        {"CH 8", ChannelsMixerMenu, NULL, 7}
    };
    
    const uint8_t ChannelsCount = (ARRAY_SIZE(ChannelsMenuItems) < CurModel.num_ch) ? ARRAY_SIZE(ChannelsMenuItems) : CurModel.num_ch;
    752e:	20 91 9a 09 	lds	r18, 0x099A
    7532:	28 30       	cpi	r18, 0x08	; 8
    7534:	11 f0       	breq	.+4      	; 0x753a <_Z12ChannelsMenua+0x24>
    7536:	08 f0       	brcs	.+2      	; 0x753a <_Z12ChannelsMenua+0x24>
    7538:	28 e0       	ldi	r18, 0x08	; 8

    CMenu Menu("Channels", ChannelsMenuItems, ChannelsCount, Font_8x8);
    753a:	0a ec       	ldi	r16, 0xCA	; 202
    753c:	1c e0       	ldi	r17, 0x0C	; 12
    753e:	40 e0       	ldi	r20, 0x00	; 0
    7540:	52 e0       	ldi	r21, 0x02	; 2
    7542:	60 ea       	ldi	r22, 0xA0	; 160
    7544:	77 e0       	ldi	r23, 0x07	; 7
    7546:	ce 01       	movw	r24, r28
    7548:	01 96       	adiw	r24, 0x01	; 1
    754a:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN5CMenuC1EPKcPKNS_4ItemEhRK11FontProfile>
    
    Menu.Run();
    754e:	ce 01       	movw	r24, r28
    7550:	01 96       	adiw	r24, 0x01	; 1
    7552:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN5CMenu3RunEv>
}
    7556:	28 96       	adiw	r28, 0x08	; 8
    7558:	0f b6       	in	r0, 0x3f	; 63
    755a:	f8 94       	cli
    755c:	de bf       	out	0x3e, r29	; 62
    755e:	0f be       	out	0x3f, r0	; 63
    7560:	cd bf       	out	0x3d, r28	; 61
    7562:	df 91       	pop	r29
    7564:	cf 91       	pop	r28
    7566:	1f 91       	pop	r17
    7568:	0f 91       	pop	r16
    756a:	08 95       	ret

0000756c <_Z9TimerMenua>:
    else
        CurModel.timer_mode |=  0x01;
}

void TimerMenu(int8_t AddParam)
{
    756c:	0f 93       	push	r16
    756e:	1f 93       	push	r17
    7570:	cf 93       	push	r28
    7572:	df 93       	push	r29
    7574:	cd b7       	in	r28, 0x3d	; 61
    7576:	de b7       	in	r29, 0x3e	; 62
    7578:	6d 97       	sbiw	r28, 0x1d	; 29
    757a:	0f b6       	in	r0, 0x3f	; 63
    757c:	f8 94       	cli
    757e:	de bf       	out	0x3e, r29	; 62
    7580:	0f be       	out	0x3f, r0	; 63
    7582:	cd bf       	out	0x3d, r28	; 61
    CMenu::Item TimerMenuItems[] =
    {
        {"Set",   NULL,          NULL,             0},
        {"Mode",  TimerModeSet,  TimerModeGetStr,  0},
        {"Sound", TimerSoundSet, TimerSoundGetStr, 0}
    };
    7584:	85 e1       	ldi	r24, 0x15	; 21
    7586:	ed eb       	ldi	r30, 0xBD	; 189
    7588:	f5 e0       	ldi	r31, 0x05	; 5
    758a:	de 01       	movw	r26, r28
    758c:	11 96       	adiw	r26, 0x01	; 1
    758e:	01 90       	ld	r0, Z+
    7590:	0d 92       	st	X+, r0
    7592:	8a 95       	dec	r24
    7594:	e1 f7       	brne	.-8      	; 0x758e <_Z9TimerMenua+0x22>
    
    CMenu Menu("Timer", TimerMenuItems, ARRAY_SIZE(TimerMenuItems), Font_8x8);
    7596:	0a ec       	ldi	r16, 0xCA	; 202
    7598:	1c e0       	ldi	r17, 0x0C	; 12
    759a:	23 e0       	ldi	r18, 0x03	; 3
    759c:	ae 01       	movw	r20, r28
    759e:	4f 5f       	subi	r20, 0xFF	; 255
    75a0:	5f 4f       	sbci	r21, 0xFF	; 255
    75a2:	65 e4       	ldi	r22, 0x45	; 69
    75a4:	78 e0       	ldi	r23, 0x08	; 8
    75a6:	ce 01       	movw	r24, r28
    75a8:	46 96       	adiw	r24, 0x16	; 22
    75aa:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN5CMenuC1EPKcPKNS_4ItemEhRK11FontProfile>
    
    Menu.Run();
    75ae:	ce 01       	movw	r24, r28
    75b0:	46 96       	adiw	r24, 0x16	; 22
    75b2:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN5CMenu3RunEv>
}
    75b6:	6d 96       	adiw	r28, 0x1d	; 29
    75b8:	0f b6       	in	r0, 0x3f	; 63
    75ba:	f8 94       	cli
    75bc:	de bf       	out	0x3e, r29	; 62
    75be:	0f be       	out	0x3f, r0	; 63
    75c0:	cd bf       	out	0x3d, r28	; 61
    75c2:	df 91       	pop	r29
    75c4:	cf 91       	pop	r28
    75c6:	1f 91       	pop	r17
    75c8:	0f 91       	pop	r16
    75ca:	08 95       	ret

000075cc <_Z11OptionsMenua>:
{
    Calibration();
}

void OptionsMenu(int8_t AddParam)
{
    75cc:	0f 93       	push	r16
    75ce:	1f 93       	push	r17
    75d0:	cf 93       	push	r28
    75d2:	df 93       	push	r29
    75d4:	cd b7       	in	r28, 0x3d	; 61
    75d6:	de b7       	in	r29, 0x3e	; 62
    75d8:	66 97       	sbiw	r28, 0x16	; 22
    75da:	0f b6       	in	r0, 0x3f	; 63
    75dc:	f8 94       	cli
    75de:	de bf       	out	0x3e, r29	; 62
    75e0:	0f be       	out	0x3f, r0	; 63
    75e2:	cd bf       	out	0x3d, r28	; 61
    CMenu::Item OptionsMenuItems[] =
    {
        {"Sound",       OptionsSoundSet,     OptionsSoundGetStr,     0},
        {"Calibration", Calibration_AP,      NULL,                   0}
    };
    75e4:	8e e0       	ldi	r24, 0x0E	; 14
    75e6:	e2 ed       	ldi	r30, 0xD2	; 210
    75e8:	f5 e0       	ldi	r31, 0x05	; 5
    75ea:	de 01       	movw	r26, r28
    75ec:	11 96       	adiw	r26, 0x01	; 1
    75ee:	01 90       	ld	r0, Z+
    75f0:	0d 92       	st	X+, r0
    75f2:	8a 95       	dec	r24
    75f4:	e1 f7       	brne	.-8      	; 0x75ee <_Z11OptionsMenua+0x22>
    
    CMenu Menu("Options", OptionsMenuItems, ARRAY_SIZE(OptionsMenuItems), Font_8x8);
    75f6:	0a ec       	ldi	r16, 0xCA	; 202
    75f8:	1c e0       	ldi	r17, 0x0C	; 12
    75fa:	22 e0       	ldi	r18, 0x02	; 2
    75fc:	ae 01       	movw	r20, r28
    75fe:	4f 5f       	subi	r20, 0xFF	; 255
    7600:	5f 4f       	sbci	r21, 0xFF	; 255
    7602:	6a e5       	ldi	r22, 0x5A	; 90
    7604:	78 e0       	ldi	r23, 0x08	; 8
    7606:	ce 01       	movw	r24, r28
    7608:	0f 96       	adiw	r24, 0x0f	; 15
    760a:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN5CMenuC1EPKcPKNS_4ItemEhRK11FontProfile>
    
    Menu.Run();
    760e:	ce 01       	movw	r24, r28
    7610:	0f 96       	adiw	r24, 0x0f	; 15
    7612:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN5CMenu3RunEv>
}
    7616:	66 96       	adiw	r28, 0x16	; 22
    7618:	0f b6       	in	r0, 0x3f	; 63
    761a:	f8 94       	cli
    761c:	de bf       	out	0x3e, r29	; 62
    761e:	0f be       	out	0x3f, r0	; 63
    7620:	cd bf       	out	0x3d, r28	; 61
    7622:	df 91       	pop	r29
    7624:	cf 91       	pop	r28
    7626:	1f 91       	pop	r17
    7628:	0f 91       	pop	r16
    762a:	08 95       	ret

0000762c <_Z19ControlsCurveChangea>:
{
    EditNumDlg(ControlsRateGetPointer(CurrentControl, AddParam), PTR_UINT8, 0, 150, 100, "Control:");
}

void ControlsCurveChange(int8_t AddParam)
{
    762c:	2f 92       	push	r2
    762e:	3f 92       	push	r3
    7630:	4f 92       	push	r4
    7632:	5f 92       	push	r5
    7634:	6f 92       	push	r6
    7636:	7f 92       	push	r7
    7638:	8f 92       	push	r8
    763a:	9f 92       	push	r9
    763c:	af 92       	push	r10
    763e:	bf 92       	push	r11
    7640:	cf 92       	push	r12
    7642:	df 92       	push	r13
    7644:	ef 92       	push	r14
    7646:	ff 92       	push	r15
    7648:	0f 93       	push	r16
    764a:	1f 93       	push	r17
    764c:	cf 93       	push	r28
    764e:	df 93       	push	r29
    7650:	cd b7       	in	r28, 0x3d	; 61
    7652:	de b7       	in	r29, 0x3e	; 62
    7654:	af 97       	sbiw	r28, 0x2f	; 47
    7656:	0f b6       	in	r0, 0x3f	; 63
    7658:	f8 94       	cli
    765a:	de bf       	out	0x3e, r29	; 62
    765c:	0f be       	out	0x3f, r0	; 63
    765e:	cd bf       	out	0x3d, r28	; 61
    const uint8_t RECT_SIZE = 108;
    const uint8_t RECT_POSX = TFT_ScreenWidth / 2 - RECT_SIZE / 2;
    const uint8_t RECT_POSY = 2;

    int8_t* nodes = CurModel.Mode[FLY_MODE].Control[CurrentControl].nodes;
    7660:	80 91 36 0d 	lds	r24, 0x0D36
    7664:	20 91 68 09 	lds	r18, 0x0968
    7668:	36 ef       	ldi	r19, 0xF6	; 246
    766a:	23 03       	mulsu	r18, r19
    766c:	60 01       	movw	r12, r0
    766e:	11 24       	eor	r1, r1
    7670:	4d e0       	ldi	r20, 0x0D	; 13
    7672:	84 02       	muls	r24, r20
    7674:	c0 0c       	add	r12, r0
    7676:	d1 1c       	adc	r13, r1
    7678:	11 24       	eor	r1, r1
    767a:	c6 01       	movw	r24, r12
    767c:	84 55       	subi	r24, 0x54	; 84
    767e:	96 4f       	sbci	r25, 0xF6	; 246
    7680:	6c 01       	movw	r12, r24
    7682:	4e 01       	movw	r8, r28
    7684:	95 e2       	ldi	r25, 0x25	; 37
    7686:	89 0e       	add	r8, r25
    7688:	91 1c       	adc	r9, r1
    768a:	fe 01       	movw	r30, r28
    768c:	7e 96       	adiw	r30, 0x1e	; 30
    768e:	d6 01       	movw	r26, r12
    
    int8_t tmp[CURVE_NODES];
    for(uint8_t i = 0; i < CURVE_NODES; ++i)
        tmp[i] = nodes[i];
    7690:	8d 91       	ld	r24, X+
    7692:	81 93       	st	Z+, r24
    const uint8_t RECT_POSY = 2;

    int8_t* nodes = CurModel.Mode[FLY_MODE].Control[CurrentControl].nodes;
    
    int8_t tmp[CURVE_NODES];
    for(uint8_t i = 0; i < CURVE_NODES; ++i)
    7694:	e8 15       	cp	r30, r8
    7696:	f9 05       	cpc	r31, r9
    7698:	d9 f7       	brne	.-10     	; 0x7690 <_Z19ControlsCurveChangea+0x64>
    769a:	31 2c       	mov	r3, r1

        // Рисуем рамку вокруг области выбора
        gfx_DrawRectangle(RECT_POSX, RECT_POSY, RECT_POSX + RECT_SIZE, RECT_POSY + RECT_SIZE, COLOR_FRONT);

        char str[10];
        sprintf(str, "%d", tmp[sel]);
    769c:	5e 01       	movw	r10, r28
    769e:	ad e0       	ldi	r26, 0x0D	; 13
    76a0:	aa 0e       	add	r10, r26
    76a2:	b1 1c       	adc	r11, r1
            sel++;

        if (Kbd & (B_DOWN | B_UP | B_ENTER))
        {
            char str[12];
            sprintf(str, "Curve %d", sel + 1);
    76a4:	fe 01       	movw	r30, r28
    76a6:	31 96       	adiw	r30, 0x01	; 1
    76a8:	2f 01       	movw	r4, r30

    uint8_t Kbd = 0;
    uint8_t sel = 0;
    do
    {
        gfx_ClearBuf();
    76aa:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z12gfx_ClearBufv>
        gfx_DrawLine(RECT_POSX, RECT_POSY + RECT_SIZE / 2, RECT_POSX + RECT_SIZE, RECT_POSY + RECT_SIZE / 2, COLOR_FRONT, true);
    76ae:	ee 24       	eor	r14, r14
    76b0:	e3 94       	inc	r14
    76b2:	01 e0       	ldi	r16, 0x01	; 1
    76b4:	10 e0       	ldi	r17, 0x00	; 0
    76b6:	28 e3       	ldi	r18, 0x38	; 56
    76b8:	46 e8       	ldi	r20, 0x86	; 134
    76ba:	68 e3       	ldi	r22, 0x38	; 56
    76bc:	8a e1       	ldi	r24, 0x1A	; 26
    76be:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    76c2:	9c e2       	ldi	r25, 0x2C	; 44

        for(uint8_t i = 0; i < CURVE_NODES - 2; ++i)
        {
            const uint8_t x1 = RECT_POSX + (RECT_SIZE / (CURVE_NODES - 1) * int16_t(i+1));
            gfx_DrawLine(x1, RECT_POSY, x1, RECT_POSY + RECT_SIZE, COLOR_FRONT, true);
    76c4:	ee 24       	eor	r14, r14
    76c6:	e3 94       	inc	r14
    76c8:	01 e0       	ldi	r16, 0x01	; 1
    76ca:	10 e0       	ldi	r17, 0x00	; 0
    76cc:	2e e6       	ldi	r18, 0x6E	; 110
    76ce:	49 2f       	mov	r20, r25
    76d0:	62 e0       	ldi	r22, 0x02	; 2
    76d2:	89 2f       	mov	r24, r25
    76d4:	9e a7       	std	Y+46, r25	; 0x2e
    76d6:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    76da:	9e a5       	ldd	r25, Y+46	; 0x2e
    76dc:	9e 5e       	subi	r25, 0xEE	; 238
    do
    {
        gfx_ClearBuf();
        gfx_DrawLine(RECT_POSX, RECT_POSY + RECT_SIZE / 2, RECT_POSX + RECT_SIZE, RECT_POSY + RECT_SIZE / 2, COLOR_FRONT, true);

        for(uint8_t i = 0; i < CURVE_NODES - 2; ++i)
    76de:	96 38       	cpi	r25, 0x86	; 134
    76e0:	89 f7       	brne	.-30     	; 0x76c4 <_Z19ControlsCurveChangea+0x98>
    76e2:	9e 01       	movw	r18, r28
    76e4:	29 5e       	subi	r18, 0xE9	; 233
    76e6:	3f 4f       	sbci	r19, 0xFF	; 255
    76e8:	fe 01       	movw	r30, r28
    76ea:	7e 96       	adiw	r30, 0x1e	; 30
        // Передов точек кривой в координаты на экране (Y)
        int8_t Y[CURVE_NODES];
        for(uint8_t i = 0; i < CURVE_NODES; ++i)
        {
            const uint8_t RECT_MIDY = RECT_POSY + RECT_SIZE / 2;
            Y[i] = RECT_MIDY - int16_t(RECT_SIZE / 2) * tmp[i] / 100;
    76ec:	81 91       	ld	r24, Z+
    76ee:	46 e3       	ldi	r20, 0x36	; 54
    76f0:	84 02       	muls	r24, r20
    76f2:	c0 01       	movw	r24, r0
    76f4:	11 24       	eor	r1, r1
    76f6:	6c e9       	ldi	r22, 0x9C	; 156
    76f8:	7f ef       	ldi	r23, 0xFF	; 255
    76fa:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    76fe:	68 5c       	subi	r22, 0xC8	; 200
    7700:	d9 01       	movw	r26, r18
    7702:	6d 93       	st	X+, r22
    7704:	9d 01       	movw	r18, r26
            gfx_DrawLine(x1, RECT_POSY, x1, RECT_POSY + RECT_SIZE, COLOR_FRONT, true);
        }

        // Передов точек кривой в координаты на экране (Y)
        int8_t Y[CURVE_NODES];
        for(uint8_t i = 0; i < CURVE_NODES; ++i)
    7706:	e8 15       	cp	r30, r8
    7708:	f9 05       	cpc	r31, r9
    770a:	81 f7       	brne	.-32     	; 0x76ec <_Z19ControlsCurveChangea+0xc0>
    770c:	fe 01       	movw	r30, r28
    770e:	78 96       	adiw	r30, 0x18	; 24
    7710:	3f 01       	movw	r6, r30
    7712:	ce 01       	movw	r24, r28
    7714:	47 96       	adiw	r24, 0x17	; 23
    7716:	9c a7       	std	Y+44, r25	; 0x2c
    7718:	8b a7       	std	Y+43, r24	; 0x2b
    771a:	8a e1       	ldi	r24, 0x1A	; 26

        // Рисуем кривую из отрезков
        for(uint8_t i = 0; i < CURVE_NODES - 1; ++i)
        {
            const uint8_t x1 = RECT_POSX + RECT_SIZE / (CURVE_NODES - 1) * int16_t(i);
            const uint8_t x2 = RECT_POSX + RECT_SIZE / (CURVE_NODES - 1) * int16_t(i + 1);
    771c:	92 e1       	ldi	r25, 0x12	; 18
    771e:	98 0f       	add	r25, r24
            gfx_DrawLine(x1, Y[i], x2, Y[i+1], COLOR_FRONT);
    7720:	d3 01       	movw	r26, r6
    7722:	2d 91       	ld	r18, X+
    7724:	3d 01       	movw	r6, r26
    7726:	eb a5       	ldd	r30, Y+43	; 0x2b
    7728:	fc a5       	ldd	r31, Y+44	; 0x2c
    772a:	61 91       	ld	r22, Z+
    772c:	fc a7       	std	Y+44, r31	; 0x2c
    772e:	eb a7       	std	Y+43, r30	; 0x2b
    7730:	e1 2c       	mov	r14, r1
    7732:	01 e0       	ldi	r16, 0x01	; 1
    7734:	10 e0       	ldi	r17, 0x00	; 0
    7736:	49 2f       	mov	r20, r25
    7738:	9e a7       	std	Y+46, r25	; 0x2e
    773a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
            const uint8_t RECT_MIDY = RECT_POSY + RECT_SIZE / 2;
            Y[i] = RECT_MIDY - int16_t(RECT_SIZE / 2) * tmp[i] / 100;
        }

        // Рисуем кривую из отрезков
        for(uint8_t i = 0; i < CURVE_NODES - 1; ++i)
    773e:	9e a5       	ldd	r25, Y+46	; 0x2e
    7740:	96 38       	cpi	r25, 0x86	; 134
    7742:	11 f0       	breq	.+4      	; 0x7748 <_Z19ControlsCurveChangea+0x11c>
    7744:	89 2f       	mov	r24, r25
    7746:	ea cf       	rjmp	.-44     	; 0x771c <_Z19ControlsCurveChangea+0xf0>
            const uint8_t x2 = RECT_POSX + RECT_SIZE / (CURVE_NODES - 1) * int16_t(i + 1);
            gfx_DrawLine(x1, Y[i], x2, Y[i+1], COLOR_FRONT);
        }

        // Рисуем квадратик на выбранной точке
        const uint8_t x1 = RECT_POSX + RECT_SIZE / (CURVE_NODES - 1) * int16_t(sel);
    7748:	f2 e1       	ldi	r31, 0x12	; 18
    774a:	3f 9e       	mul	r3, r31
    774c:	70 2d       	mov	r23, r0
    774e:	11 24       	eor	r1, r1
        gfx_DrawRectangle(x1 - 2, Y[sel] - 2, x1 + 2, Y[sel] + 2, COLOR_FRONT);
    7750:	63 2c       	mov	r6, r3
    7752:	71 2c       	mov	r7, r1
    7754:	e7 e1       	ldi	r30, 0x17	; 23
    7756:	f0 e0       	ldi	r31, 0x00	; 0
    7758:	ec 0f       	add	r30, r28
    775a:	fd 1f       	adc	r31, r29
    775c:	e6 0d       	add	r30, r6
    775e:	f7 1d       	adc	r31, r7
    7760:	f0 80       	ld	r15, Z
    7762:	32 e0       	ldi	r19, 0x02	; 2
    7764:	3f 0d       	add	r19, r15
    7766:	8c e1       	ldi	r24, 0x1C	; 28
    7768:	28 2e       	mov	r2, r24
    776a:	27 0e       	add	r2, r23
    776c:	6e ef       	ldi	r22, 0xFE	; 254
    776e:	6f 0d       	add	r22, r15
    7770:	e1 2c       	mov	r14, r1
    7772:	01 e0       	ldi	r16, 0x01	; 1
    7774:	10 e0       	ldi	r17, 0x00	; 0
    7776:	23 2f       	mov	r18, r19
    7778:	42 2d       	mov	r20, r2
    777a:	88 e1       	ldi	r24, 0x18	; 24
    777c:	87 0f       	add	r24, r23
    777e:	3d a7       	std	Y+45, r19	; 0x2d
    7780:	7f a7       	std	Y+47, r23	; 0x2f
    7782:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>

        // Рисуем рамку вокруг области выбора
        gfx_DrawRectangle(RECT_POSX, RECT_POSY, RECT_POSX + RECT_SIZE, RECT_POSY + RECT_SIZE, COLOR_FRONT);
    7786:	2e e6       	ldi	r18, 0x6E	; 110
    7788:	46 e8       	ldi	r20, 0x86	; 134
    778a:	62 e0       	ldi	r22, 0x02	; 2
    778c:	8a e1       	ldi	r24, 0x1A	; 26
    778e:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>

        char str[10];
        sprintf(str, "%d", tmp[sel]);
    7792:	ee e1       	ldi	r30, 0x1E	; 30
    7794:	f0 e0       	ldi	r31, 0x00	; 0
    7796:	ec 0f       	add	r30, r28
    7798:	fd 1f       	adc	r31, r29
    779a:	e6 0d       	add	r30, r6
    779c:	f7 1d       	adc	r31, r7
    779e:	20 81       	ld	r18, Z
    77a0:	82 2f       	mov	r24, r18
    77a2:	99 27       	eor	r25, r25
    77a4:	87 fd       	sbrc	r24, 7
    77a6:	90 95       	com	r25
    77a8:	9f 93       	push	r25
    77aa:	2f 93       	push	r18
    77ac:	a8 e6       	ldi	r26, 0x68	; 104
    77ae:	b8 e0       	ldi	r27, 0x08	; 8
    77b0:	bf 93       	push	r27
    77b2:	af 93       	push	r26
    77b4:	bf 92       	push	r11
    77b6:	af 92       	push	r10
    77b8:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
        
        const uint8_t     len  = strlen(str);
    77bc:	d5 01       	movw	r26, r10
    77be:	0d 90       	ld	r0, X+
    77c0:	00 20       	and	r0, r0
    77c2:	e9 f7       	brne	.-6      	; 0x77be <_Z19ControlsCurveChangea+0x192>
    77c4:	fd 01       	movw	r30, r26
    77c6:	31 97       	sbiw	r30, 0x01	; 1
    77c8:	3f 01       	movw	r6, r30
    77ca:	6a 18       	sub	r6, r10
    77cc:	7b 08       	sbc	r7, r11
        const FontProfile font = Font_8x8;
    77ce:	ea ec       	ldi	r30, 0xCA	; 202
    77d0:	fc e0       	ldi	r31, 0x0C	; 12
    77d2:	de 01       	movw	r26, r28
    77d4:	95 96       	adiw	r26, 0x25	; 37
    77d6:	86 e0       	ldi	r24, 0x06	; 6
    77d8:	01 90       	ld	r0, Z+
    77da:	0d 92       	st	X+, r0
    77dc:	8a 95       	dec	r24
    77de:	e1 f7       	brne	.-8      	; 0x77d8 <_Z19ControlsCurveChangea+0x1ac>
        
        gfx_DrawLine(x1 + 2, Y[sel] + 2, x1 + 5, Y[sel] + 3, COLOR_FRONT);
    77e0:	53 e0       	ldi	r21, 0x03	; 3
    77e2:	5f 0d       	add	r21, r15
    77e4:	7f a5       	ldd	r23, Y+47	; 0x2f
    77e6:	9f e1       	ldi	r25, 0x1F	; 31
    77e8:	97 0f       	add	r25, r23
    77ea:	25 2f       	mov	r18, r21
    77ec:	49 2f       	mov	r20, r25
    77ee:	3d a5       	ldd	r19, Y+45	; 0x2d
    77f0:	63 2f       	mov	r22, r19
    77f2:	82 2d       	mov	r24, r2
    77f4:	5d a7       	std	Y+45, r21	; 0x2d
    77f6:	9e a7       	std	Y+46, r25	; 0x2e
    77f8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
        gfx_DrawRectangle(x1 + 5, Y[sel] + 3, x1 + 5 + font.W * len + 2, Y[sel] + 3 + font.H + 2, COLOR_BACKG);
    77fc:	7f a5       	ldd	r23, Y+47	; 0x2f
    77fe:	91 e2       	ldi	r25, 0x21	; 33
    7800:	79 2e       	mov	r7, r25
    7802:	77 0e       	add	r7, r23
    7804:	2e a1       	ldd	r18, Y+38	; 0x26
    7806:	2b 5f       	subi	r18, 0xFB	; 251
    7808:	2f 0d       	add	r18, r15
    780a:	8d a1       	ldd	r24, Y+37	; 0x25
    780c:	47 2d       	mov	r20, r7
    780e:	86 9d       	mul	r24, r6
    7810:	40 0d       	add	r20, r0
    7812:	11 24       	eor	r1, r1
    7814:	00 e0       	ldi	r16, 0x00	; 0
    7816:	10 e0       	ldi	r17, 0x00	; 0
    7818:	5d a5       	ldd	r21, Y+45	; 0x2d
    781a:	65 2f       	mov	r22, r21
    781c:	9e a5       	ldd	r25, Y+46	; 0x2e
    781e:	89 2f       	mov	r24, r25
    7820:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
        gfx_DrawRectangle(x1 + 6, Y[sel] + 4, x1 + 5 + font.W * len + 1, Y[sel] + 3 + font.H + 1, COLOR_FRONT);
    7824:	7f a5       	ldd	r23, Y+47	; 0x2f
    7826:	80 e2       	ldi	r24, 0x20	; 32
    7828:	87 0f       	add	r24, r23
    782a:	2e a1       	ldd	r18, Y+38	; 0x26
    782c:	2c 5f       	subi	r18, 0xFC	; 252
    782e:	2f 0d       	add	r18, r15
    7830:	9d a1       	ldd	r25, Y+37	; 0x25
    7832:	48 2f       	mov	r20, r24
    7834:	96 9d       	mul	r25, r6
    7836:	40 0d       	add	r20, r0
    7838:	11 24       	eor	r1, r1
    783a:	64 e0       	ldi	r22, 0x04	; 4
    783c:	6f 0d       	add	r22, r15
    783e:	01 e0       	ldi	r16, 0x01	; 1
    7840:	10 e0       	ldi	r17, 0x00	; 0
    7842:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
        gfx_PrintString(x1 + 7, Y[sel] + 5, str, COLOR_FRONT, font);
    7846:	65 e0       	ldi	r22, 0x05	; 5
    7848:	6f 0d       	add	r22, r15
    784a:	e1 2c       	mov	r14, r1
    784c:	f1 2c       	mov	r15, r1
    784e:	84 01       	movw	r16, r8
    7850:	21 e0       	ldi	r18, 0x01	; 1
    7852:	30 e0       	ldi	r19, 0x00	; 0
    7854:	a5 01       	movw	r20, r10
    7856:	87 2d       	mov	r24, r7
    7858:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>

        gfx_Refresh();
    785c:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>

        Kbd = WaitButtonPress(B_ANY);
    7860:	8f ef       	ldi	r24, 0xFF	; 255
    7862:	0e 94 67 2a 	call	0x54ce	; 0x54ce <_Z15WaitButtonPressh>
    7866:	18 2f       	mov	r17, r24
        WaitEmptyButtons();
    7868:	80 e0       	ldi	r24, 0x00	; 0
    786a:	90 e0       	ldi	r25, 0x00	; 0
    786c:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
        
        if((Kbd & B_LEFT) && (sel > 0))
    7870:	0f 90       	pop	r0
    7872:	0f 90       	pop	r0
    7874:	0f 90       	pop	r0
    7876:	0f 90       	pop	r0
    7878:	0f 90       	pop	r0
    787a:	0f 90       	pop	r0
    787c:	12 ff       	sbrs	r17, 2
    787e:	02 c0       	rjmp	.+4      	; 0x7884 <_Z19ControlsCurveChangea+0x258>
    7880:	31 10       	cpse	r3, r1
            sel--;
    7882:	3a 94       	dec	r3
        
        if((Kbd & B_RIGHT) && (sel < CURVE_NODES - 1))
    7884:	13 ff       	sbrs	r17, 3
    7886:	04 c0       	rjmp	.+8      	; 0x7890 <_Z19ControlsCurveChangea+0x264>
    7888:	f5 e0       	ldi	r31, 0x05	; 5
    788a:	f3 15       	cp	r31, r3
    788c:	08 f0       	brcs	.+2      	; 0x7890 <_Z19ControlsCurveChangea+0x264>
            sel++;
    788e:	33 94       	inc	r3

        if (Kbd & (B_DOWN | B_UP | B_ENTER))
    7890:	81 2f       	mov	r24, r17
    7892:	83 72       	andi	r24, 0x23	; 35
    7894:	21 f1       	breq	.+72     	; 0x78de <_Z19ControlsCurveChangea+0x2b2>
        {
            char str[12];
            sprintf(str, "Curve %d", sel + 1);
    7896:	63 2c       	mov	r6, r3
    7898:	71 2c       	mov	r7, r1
    789a:	c3 01       	movw	r24, r6
    789c:	01 96       	adiw	r24, 0x01	; 1
    789e:	9f 93       	push	r25
    78a0:	8f 93       	push	r24
    78a2:	a2 e6       	ldi	r26, 0x62	; 98
    78a4:	b8 e0       	ldi	r27, 0x08	; 8
    78a6:	bf 93       	push	r27
    78a8:	af 93       	push	r26
    78aa:	5f 92       	push	r5
    78ac:	4f 92       	push	r4
    78ae:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
            EditNumDlg(&tmp[sel], PTR_INT8, -100, 100, 120, str);
    78b2:	72 01       	movw	r14, r4
    78b4:	08 e7       	ldi	r16, 0x78	; 120
    78b6:	24 e6       	ldi	r18, 0x64	; 100
    78b8:	30 e0       	ldi	r19, 0x00	; 0
    78ba:	4c e9       	ldi	r20, 0x9C	; 156
    78bc:	5f ef       	ldi	r21, 0xFF	; 255
    78be:	60 e0       	ldi	r22, 0x00	; 0
    78c0:	70 e0       	ldi	r23, 0x00	; 0
    78c2:	8e e1       	ldi	r24, 0x1E	; 30
    78c4:	90 e0       	ldi	r25, 0x00	; 0
    78c6:	8c 0f       	add	r24, r28
    78c8:	9d 1f       	adc	r25, r29
    78ca:	86 0d       	add	r24, r6
    78cc:	97 1d       	adc	r25, r7
    78ce:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_Z10EditNumDlgPv11PointerTypeiihPKc>
    78d2:	0f 90       	pop	r0
    78d4:	0f 90       	pop	r0
    78d6:	0f 90       	pop	r0
    78d8:	0f 90       	pop	r0
    78da:	0f 90       	pop	r0
    78dc:	0f 90       	pop	r0
    for(uint8_t i = 0; i < CURVE_NODES; ++i)
        tmp[i] = nodes[i];

    uint8_t Kbd = 0;
    uint8_t sel = 0;
    do
    78de:	14 ff       	sbrs	r17, 4
    78e0:	e4 ce       	rjmp	.-568    	; 0x76aa <_Z19ControlsCurveChangea+0x7e>
            EditNumDlg(&tmp[sel], PTR_INT8, -100, 100, 120, str);
        }
    }
    while(!(Kbd & B_BACK));

    MsgBox("Save changes?", Font_8x12, "Curve save");
    78e2:	e1 2c       	mov	r14, r1
    78e4:	f1 2c       	mov	r15, r1
    78e6:	00 e0       	ldi	r16, 0x00	; 0
    78e8:	2a ec       	ldi	r18, 0xCA	; 202
    78ea:	3c e0       	ldi	r19, 0x0C	; 12
    78ec:	4b e6       	ldi	r20, 0x6B	; 107
    78ee:	58 e0       	ldi	r21, 0x08	; 8
    78f0:	64 ec       	ldi	r22, 0xC4	; 196
    78f2:	7c e0       	ldi	r23, 0x0C	; 12
    78f4:	86 e7       	ldi	r24, 0x76	; 118
    78f6:	98 e0       	ldi	r25, 0x08	; 8
    78f8:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx>

    WaitEmptyButtons();
    78fc:	80 e0       	ldi	r24, 0x00	; 0
    78fe:	90 e0       	ldi	r25, 0x00	; 0
    7900:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
    if(WaitButtonPress(B_ENTER | B_BACK) == B_ENTER)
    7904:	80 e3       	ldi	r24, 0x30	; 48
    7906:	0e 94 67 2a 	call	0x54ce	; 0x54ce <_Z15WaitButtonPressh>
    790a:	80 32       	cpi	r24, 0x20	; 32
    790c:	41 f4       	brne	.+16     	; 0x791e <_Z19ControlsCurveChangea+0x2f2>
    790e:	d6 01       	movw	r26, r12
    7910:	fe 01       	movw	r30, r28
    7912:	7e 96       	adiw	r30, 0x1e	; 30
    {
        for(uint8_t i = 0; i < CURVE_NODES; ++i)
            nodes[i] = tmp[i];
    7914:	81 91       	ld	r24, Z+
    7916:	8d 93       	st	X+, r24
    MsgBox("Save changes?", Font_8x12, "Curve save");

    WaitEmptyButtons();
    if(WaitButtonPress(B_ENTER | B_BACK) == B_ENTER)
    {
        for(uint8_t i = 0; i < CURVE_NODES; ++i)
    7918:	e8 15       	cp	r30, r8
    791a:	f9 05       	cpc	r31, r9
    791c:	d9 f7       	brne	.-10     	; 0x7914 <_Z19ControlsCurveChangea+0x2e8>
            nodes[i] = tmp[i];
    }
}
    791e:	af 96       	adiw	r28, 0x2f	; 47
    7920:	0f b6       	in	r0, 0x3f	; 63
    7922:	f8 94       	cli
    7924:	de bf       	out	0x3e, r29	; 62
    7926:	0f be       	out	0x3f, r0	; 63
    7928:	cd bf       	out	0x3d, r28	; 61
    792a:	df 91       	pop	r29
    792c:	cf 91       	pop	r28
    792e:	1f 91       	pop	r17
    7930:	0f 91       	pop	r16
    7932:	ff 90       	pop	r15
    7934:	ef 90       	pop	r14
    7936:	df 90       	pop	r13
    7938:	cf 90       	pop	r12
    793a:	bf 90       	pop	r11
    793c:	af 90       	pop	r10
    793e:	9f 90       	pop	r9
    7940:	8f 90       	pop	r8
    7942:	7f 90       	pop	r7
    7944:	6f 90       	pop	r6
    7946:	5f 90       	pop	r5
    7948:	4f 90       	pop	r4
    794a:	3f 90       	pop	r3
    794c:	2f 90       	pop	r2
    794e:	08 95       	ret

00007950 <_Z17ChannelsMixerMenua>:
    sprintf(Buf, "%d", CurModel.Mode[FLY_MODE].Chanels[MixerCurrentChannel][AddParam]);
    return Buf;
}

void ChannelsMixerMenu(int8_t AddParam)
{
    7950:	ef 92       	push	r14
    7952:	ff 92       	push	r15
    7954:	0f 93       	push	r16
    7956:	1f 93       	push	r17
    7958:	cf 93       	push	r28
    795a:	df 93       	push	r29
    795c:	cd b7       	in	r28, 0x3d	; 61
    795e:	de b7       	in	r29, 0x3e	; 62
    7960:	c1 56       	subi	r28, 0x61	; 97
    7962:	d1 09       	sbc	r29, r1
    7964:	0f b6       	in	r0, 0x3f	; 63
    7966:	f8 94       	cli
    7968:	de bf       	out	0x3e, r29	; 62
    796a:	0f be       	out	0x3f, r0	; 63
    796c:	cd bf       	out	0x3d, r28	; 61
        {"SW 3",      MixerChangeSetting, MixerGetStr, CTRL_SW3},
        {"Aux 1",     MixerChangeSetting, MixerGetStr, CTRL_AUX1},
        {"Virtual 1", MixerChangeSetting, MixerGetStr, CTRL_V1},
        {"Virtual 2", MixerChangeSetting, MixerGetStr, CTRL_V2},
        {"Trim",      MixerChangeSetting, MixerGetStr, CTRL_TRIM}
    };
    796e:	9d e4       	ldi	r25, 0x4D	; 77
    7970:	e0 ee       	ldi	r30, 0xE0	; 224
    7972:	f5 e0       	ldi	r31, 0x05	; 5
    7974:	de 01       	movw	r26, r28
    7976:	11 96       	adiw	r26, 0x01	; 1
    7978:	01 90       	ld	r0, Z+
    797a:	0d 92       	st	X+, r0
    797c:	9a 95       	dec	r25
    797e:	e1 f7       	brne	.-8      	; 0x7978 <_Z17ChannelsMixerMenua+0x28>

    MixerCurrentChannel = AddParam;
    7980:	80 93 35 0d 	sts	0x0D35, r24

    char Name[12];
    snprintf(Name, sizeof(Name), "CH %n Mixer", AddParam);
    7984:	28 2f       	mov	r18, r24
    7986:	33 27       	eor	r19, r19
    7988:	27 fd       	sbrc	r18, 7
    798a:	30 95       	com	r19
    798c:	3f 93       	push	r19
    798e:	8f 93       	push	r24
    7990:	84 e8       	ldi	r24, 0x84	; 132
    7992:	98 e0       	ldi	r25, 0x08	; 8
    7994:	9f 93       	push	r25
    7996:	8f 93       	push	r24
    7998:	1f 92       	push	r1
    799a:	8c e0       	ldi	r24, 0x0C	; 12
    799c:	8f 93       	push	r24
    799e:	7e 01       	movw	r14, r28
    79a0:	8e e4       	ldi	r24, 0x4E	; 78
    79a2:	e8 0e       	add	r14, r24
    79a4:	f1 1c       	adc	r15, r1
    79a6:	ff 92       	push	r15
    79a8:	ef 92       	push	r14
    79aa:	0e 94 91 48 	call	0x9122	; 0x9122 <snprintf>

    CMenu Menu(Name, MixerMenuItems, ARRAY_SIZE(MixerMenuItems), Font_8x8);
    79ae:	0a ec       	ldi	r16, 0xCA	; 202
    79b0:	1c e0       	ldi	r17, 0x0C	; 12
    79b2:	2b e0       	ldi	r18, 0x0B	; 11
    79b4:	ae 01       	movw	r20, r28
    79b6:	4f 5f       	subi	r20, 0xFF	; 255
    79b8:	5f 4f       	sbci	r21, 0xFF	; 255
    79ba:	b7 01       	movw	r22, r14
    79bc:	ce 01       	movw	r24, r28
    79be:	86 5a       	subi	r24, 0xA6	; 166
    79c0:	9f 4f       	sbci	r25, 0xFF	; 255
    79c2:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN5CMenuC1EPKcPKNS_4ItemEhRK11FontProfile>
    
    Menu.Run();
    79c6:	ce 01       	movw	r24, r28
    79c8:	86 5a       	subi	r24, 0xA6	; 166
    79ca:	9f 4f       	sbci	r25, 0xFF	; 255
    79cc:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN5CMenu3RunEv>
    79d0:	0f b6       	in	r0, 0x3f	; 63
    79d2:	f8 94       	cli
    79d4:	de bf       	out	0x3e, r29	; 62
    79d6:	0f be       	out	0x3f, r0	; 63
    79d8:	cd bf       	out	0x3d, r28	; 61
}
    79da:	cf 59       	subi	r28, 0x9F	; 159
    79dc:	df 4f       	sbci	r29, 0xFF	; 255
    79de:	0f b6       	in	r0, 0x3f	; 63
    79e0:	f8 94       	cli
    79e2:	de bf       	out	0x3e, r29	; 62
    79e4:	0f be       	out	0x3f, r0	; 63
    79e6:	cd bf       	out	0x3d, r28	; 61
    79e8:	df 91       	pop	r29
    79ea:	cf 91       	pop	r28
    79ec:	1f 91       	pop	r17
    79ee:	0f 91       	pop	r16
    79f0:	ff 90       	pop	r15
    79f2:	ef 90       	pop	r14
    79f4:	08 95       	ret

000079f6 <_Z14Calibration_APa>:
}


void Calibration_AP(int8_t AddParam)
{
    Calibration();
    79f6:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <_Z11Calibrationv>

000079fa <_Z9ModelSavea>:
        MODEL_Init(Settings.ModelNum);
    }
}

void ModelSave(int8_t AddParam)
{
    79fa:	ef 92       	push	r14
    79fc:	ff 92       	push	r15
    79fe:	0f 93       	push	r16
    MsgBox("Are you sure?", Font_8x12, "Model Save");
    7a00:	e1 2c       	mov	r14, r1
    7a02:	f1 2c       	mov	r15, r1
    7a04:	00 e0       	ldi	r16, 0x00	; 0
    7a06:	2a ec       	ldi	r18, 0xCA	; 202
    7a08:	3c e0       	ldi	r19, 0x0C	; 12
    7a0a:	40 ee       	ldi	r20, 0xE0	; 224
    7a0c:	58 e0       	ldi	r21, 0x08	; 8
    7a0e:	64 ec       	ldi	r22, 0xC4	; 196
    7a10:	7c e0       	ldi	r23, 0x0C	; 12
    7a12:	8b ee       	ldi	r24, 0xEB	; 235
    7a14:	98 e0       	ldi	r25, 0x08	; 8
    7a16:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx>

    WaitEmptyButtons();
    7a1a:	80 e0       	ldi	r24, 0x00	; 0
    7a1c:	90 e0       	ldi	r25, 0x00	; 0
    7a1e:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
    if(WaitButtonPress(B_ENTER | B_BACK) == B_ENTER)
    7a22:	80 e3       	ldi	r24, 0x30	; 48
    7a24:	0e 94 67 2a 	call	0x54ce	; 0x54ce <_Z15WaitButtonPressh>
    7a28:	80 32       	cpi	r24, 0x20	; 32
    7a2a:	09 f0       	breq	.+2      	; 0x7a2e <_Z9ModelSavea+0x34>
    7a2c:	4d c0       	rjmp	.+154    	; 0x7ac8 <_Z9ModelSavea+0xce>
    {
        Beep(1000, 100);
    7a2e:	80 91 80 0c 	lds	r24, 0x0C80
    7a32:	81 30       	cpi	r24, 0x01	; 1
    7a34:	89 f4       	brne	.+34     	; 0x7a58 <_Z9ModelSavea+0x5e>
    7a36:	88 ee       	ldi	r24, 0xE8	; 232
    7a38:	93 e0       	ldi	r25, 0x03	; 3
    7a3a:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
    7a3e:	2f ef       	ldi	r18, 0xFF	; 255
    7a40:	81 ee       	ldi	r24, 0xE1	; 225
    7a42:	94 e0       	ldi	r25, 0x04	; 4
    7a44:	21 50       	subi	r18, 0x01	; 1
    7a46:	80 40       	sbci	r24, 0x00	; 0
    7a48:	90 40       	sbci	r25, 0x00	; 0
    7a4a:	e1 f7       	brne	.-8      	; 0x7a44 <_Z9ModelSavea+0x4a>
    7a4c:	00 c0       	rjmp	.+0      	; 0x7a4e <_Z9ModelSavea+0x54>
    7a4e:	00 00       	nop
    7a50:	80 e0       	ldi	r24, 0x00	; 0
    7a52:	90 e0       	ldi	r25, 0x00	; 0
    7a54:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
    7a58:	2f ef       	ldi	r18, 0xFF	; 255
    7a5a:	81 ee       	ldi	r24, 0xE1	; 225
    7a5c:	94 e0       	ldi	r25, 0x04	; 4
    7a5e:	21 50       	subi	r18, 0x01	; 1
    7a60:	80 40       	sbci	r24, 0x00	; 0
    7a62:	90 40       	sbci	r25, 0x00	; 0
    7a64:	e1 f7       	brne	.-8      	; 0x7a5e <_Z9ModelSavea+0x64>
    7a66:	00 c0       	rjmp	.+0      	; 0x7a68 <_Z9ModelSavea+0x6e>
    7a68:	00 00       	nop
        _delay_ms(100);

        MsgBox("Please wait...", Font_8x12, "Model Save");
    7a6a:	e1 2c       	mov	r14, r1
    7a6c:	f1 2c       	mov	r15, r1
    7a6e:	00 e0       	ldi	r16, 0x00	; 0
    7a70:	2a ec       	ldi	r18, 0xCA	; 202
    7a72:	3c e0       	ldi	r19, 0x0C	; 12
    7a74:	40 ee       	ldi	r20, 0xE0	; 224
    7a76:	58 e0       	ldi	r21, 0x08	; 8
    7a78:	64 ec       	ldi	r22, 0xC4	; 196
    7a7a:	7c e0       	ldi	r23, 0x0C	; 12
    7a7c:	89 ef       	ldi	r24, 0xF9	; 249
    7a7e:	98 e0       	ldi	r25, 0x08	; 8
    7a80:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx>
        MODEL_Save(Settings.ModelNum);
    7a84:	80 91 81 0c 	lds	r24, 0x0C81
    7a88:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <_Z10MODEL_Savea>
        
        Beep(1000, 100);
    7a8c:	80 91 80 0c 	lds	r24, 0x0C80
    7a90:	81 30       	cpi	r24, 0x01	; 1
    7a92:	89 f4       	brne	.+34     	; 0x7ab6 <_Z9ModelSavea+0xbc>
    7a94:	88 ee       	ldi	r24, 0xE8	; 232
    7a96:	93 e0       	ldi	r25, 0x03	; 3
    7a98:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
    7a9c:	2f ef       	ldi	r18, 0xFF	; 255
    7a9e:	81 ee       	ldi	r24, 0xE1	; 225
    7aa0:	94 e0       	ldi	r25, 0x04	; 4
    7aa2:	21 50       	subi	r18, 0x01	; 1
    7aa4:	80 40       	sbci	r24, 0x00	; 0
    7aa6:	90 40       	sbci	r25, 0x00	; 0
    7aa8:	e1 f7       	brne	.-8      	; 0x7aa2 <_Z9ModelSavea+0xa8>
    7aaa:	00 c0       	rjmp	.+0      	; 0x7aac <_Z9ModelSavea+0xb2>
    7aac:	00 00       	nop
    7aae:	80 e0       	ldi	r24, 0x00	; 0
    7ab0:	90 e0       	ldi	r25, 0x00	; 0
    7ab2:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
    7ab6:	2f ef       	ldi	r18, 0xFF	; 255
    7ab8:	81 ee       	ldi	r24, 0xE1	; 225
    7aba:	94 e0       	ldi	r25, 0x04	; 4
    7abc:	21 50       	subi	r18, 0x01	; 1
    7abe:	80 40       	sbci	r24, 0x00	; 0
    7ac0:	90 40       	sbci	r25, 0x00	; 0
    7ac2:	e1 f7       	brne	.-8      	; 0x7abc <_Z9ModelSavea+0xc2>
    7ac4:	00 c0       	rjmp	.+0      	; 0x7ac6 <_Z9ModelSavea+0xcc>
    7ac6:	00 00       	nop
        _delay_ms(100);
    }
}
    7ac8:	0f 91       	pop	r16
    7aca:	ff 90       	pop	r15
    7acc:	ef 90       	pop	r14
    7ace:	08 95       	ret

00007ad0 <_Z10ModelReseta>:

void ModelReset(int8_t AddParam)
{
    7ad0:	ef 92       	push	r14
    7ad2:	ff 92       	push	r15
    7ad4:	0f 93       	push	r16
    MsgBox("Are you sure?", Font_8x12, "Model Reset");
    7ad6:	e1 2c       	mov	r14, r1
    7ad8:	f1 2c       	mov	r15, r1
    7ada:	00 e0       	ldi	r16, 0x00	; 0
    7adc:	2a ec       	ldi	r18, 0xCA	; 202
    7ade:	3c e0       	ldi	r19, 0x0C	; 12
    7ae0:	48 e0       	ldi	r20, 0x08	; 8
    7ae2:	59 e0       	ldi	r21, 0x09	; 9
    7ae4:	64 ec       	ldi	r22, 0xC4	; 196
    7ae6:	7c e0       	ldi	r23, 0x0C	; 12
    7ae8:	8b ee       	ldi	r24, 0xEB	; 235
    7aea:	98 e0       	ldi	r25, 0x08	; 8
    7aec:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx>

    
    WaitEmptyButtons();
    7af0:	80 e0       	ldi	r24, 0x00	; 0
    7af2:	90 e0       	ldi	r25, 0x00	; 0
    7af4:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <_Z16WaitEmptyButtonsj>
    if(WaitButtonPress(B_ENTER | B_BACK) == B_ENTER)
    7af8:	80 e3       	ldi	r24, 0x30	; 48
    7afa:	0e 94 67 2a 	call	0x54ce	; 0x54ce <_Z15WaitButtonPressh>
    7afe:	80 32       	cpi	r24, 0x20	; 32
    7b00:	09 f0       	breq	.+2      	; 0x7b04 <_Z10ModelReseta+0x34>
    7b02:	53 c0       	rjmp	.+166    	; 0x7baa <_Z10ModelReseta+0xda>
    {
        Beep(1000, 100);
    7b04:	80 91 80 0c 	lds	r24, 0x0C80
    7b08:	81 30       	cpi	r24, 0x01	; 1
    7b0a:	89 f4       	brne	.+34     	; 0x7b2e <_Z10ModelReseta+0x5e>
    7b0c:	88 ee       	ldi	r24, 0xE8	; 232
    7b0e:	93 e0       	ldi	r25, 0x03	; 3
    7b10:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
    7b14:	2f ef       	ldi	r18, 0xFF	; 255
    7b16:	81 ee       	ldi	r24, 0xE1	; 225
    7b18:	94 e0       	ldi	r25, 0x04	; 4
    7b1a:	21 50       	subi	r18, 0x01	; 1
    7b1c:	80 40       	sbci	r24, 0x00	; 0
    7b1e:	90 40       	sbci	r25, 0x00	; 0
    7b20:	e1 f7       	brne	.-8      	; 0x7b1a <_Z10ModelReseta+0x4a>
    7b22:	00 c0       	rjmp	.+0      	; 0x7b24 <_Z10ModelReseta+0x54>
    7b24:	00 00       	nop
    7b26:	80 e0       	ldi	r24, 0x00	; 0
    7b28:	90 e0       	ldi	r25, 0x00	; 0
    7b2a:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
    7b2e:	2f ef       	ldi	r18, 0xFF	; 255
    7b30:	81 ee       	ldi	r24, 0xE1	; 225
    7b32:	94 e0       	ldi	r25, 0x04	; 4
    7b34:	21 50       	subi	r18, 0x01	; 1
    7b36:	80 40       	sbci	r24, 0x00	; 0
    7b38:	90 40       	sbci	r25, 0x00	; 0
    7b3a:	e1 f7       	brne	.-8      	; 0x7b34 <_Z10ModelReseta+0x64>
    7b3c:	00 c0       	rjmp	.+0      	; 0x7b3e <_Z10ModelReseta+0x6e>
    7b3e:	00 00       	nop
        _delay_ms(100);
        
        MsgBox("Please wait...", Font_8x12, "Model Reset");
    7b40:	e1 2c       	mov	r14, r1
    7b42:	f1 2c       	mov	r15, r1
    7b44:	00 e0       	ldi	r16, 0x00	; 0
    7b46:	2a ec       	ldi	r18, 0xCA	; 202
    7b48:	3c e0       	ldi	r19, 0x0C	; 12
    7b4a:	48 e0       	ldi	r20, 0x08	; 8
    7b4c:	59 e0       	ldi	r21, 0x09	; 9
    7b4e:	64 ec       	ldi	r22, 0xC4	; 196
    7b50:	7c e0       	ldi	r23, 0x0C	; 12
    7b52:	89 ef       	ldi	r24, 0xF9	; 249
    7b54:	98 e0       	ldi	r25, 0x08	; 8
    7b56:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx>
        MODEL_Reset(Settings.ModelNum);
    7b5a:	80 91 81 0c 	lds	r24, 0x0C81
    7b5e:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11MODEL_Reseta>
        Recalc_EEPROM_CRC();
    7b62:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <_Z17Recalc_EEPROM_CRCv>

        MODEL_Init(Settings.ModelNum);
    7b66:	80 91 81 0c 	lds	r24, 0x0C81
    7b6a:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <_Z10MODEL_Inita>
        
        Beep(1000, 100);
    7b6e:	80 91 80 0c 	lds	r24, 0x0C80
    7b72:	81 30       	cpi	r24, 0x01	; 1
    7b74:	89 f4       	brne	.+34     	; 0x7b98 <_Z10ModelReseta+0xc8>
    7b76:	88 ee       	ldi	r24, 0xE8	; 232
    7b78:	93 e0       	ldi	r25, 0x03	; 3
    7b7a:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
    7b7e:	2f ef       	ldi	r18, 0xFF	; 255
    7b80:	81 ee       	ldi	r24, 0xE1	; 225
    7b82:	94 e0       	ldi	r25, 0x04	; 4
    7b84:	21 50       	subi	r18, 0x01	; 1
    7b86:	80 40       	sbci	r24, 0x00	; 0
    7b88:	90 40       	sbci	r25, 0x00	; 0
    7b8a:	e1 f7       	brne	.-8      	; 0x7b84 <_Z10ModelReseta+0xb4>
    7b8c:	00 c0       	rjmp	.+0      	; 0x7b8e <_Z10ModelReseta+0xbe>
    7b8e:	00 00       	nop
    7b90:	80 e0       	ldi	r24, 0x00	; 0
    7b92:	90 e0       	ldi	r25, 0x00	; 0
    7b94:	0e 94 23 25 	call	0x4a46	; 0x4a46 <_Z4Tonej>
    7b98:	2f ef       	ldi	r18, 0xFF	; 255
    7b9a:	81 ee       	ldi	r24, 0xE1	; 225
    7b9c:	94 e0       	ldi	r25, 0x04	; 4
    7b9e:	21 50       	subi	r18, 0x01	; 1
    7ba0:	80 40       	sbci	r24, 0x00	; 0
    7ba2:	90 40       	sbci	r25, 0x00	; 0
    7ba4:	e1 f7       	brne	.-8      	; 0x7b9e <_Z10ModelReseta+0xce>
    7ba6:	00 c0       	rjmp	.+0      	; 0x7ba8 <_Z10ModelReseta+0xd8>
    7ba8:	00 00       	nop
        _delay_ms(100);
    }
}
    7baa:	0f 91       	pop	r16
    7bac:	ff 90       	pop	r15
    7bae:	ef 90       	pop	r14
    7bb0:	08 95       	ret

00007bb2 <_Z10DrawSticksPiS_S_b>:

void DrawTrimmers();
void DrawRadio(const uint8_t X, const uint8_t Y);

void DrawSticks(int16_t Min[], int16_t Max[], int16_t Val[], bool IsDrawTrimmers)
{
    7bb2:	2f 92       	push	r2
    7bb4:	3f 92       	push	r3
    7bb6:	4f 92       	push	r4
    7bb8:	5f 92       	push	r5
    7bba:	6f 92       	push	r6
    7bbc:	7f 92       	push	r7
    7bbe:	8f 92       	push	r8
    7bc0:	9f 92       	push	r9
    7bc2:	af 92       	push	r10
    7bc4:	bf 92       	push	r11
    7bc6:	cf 92       	push	r12
    7bc8:	df 92       	push	r13
    7bca:	ef 92       	push	r14
    7bcc:	ff 92       	push	r15
    7bce:	0f 93       	push	r16
    7bd0:	1f 93       	push	r17
    7bd2:	cf 93       	push	r28
    7bd4:	df 93       	push	r29
    7bd6:	00 d0       	rcall	.+0      	; 0x7bd8 <_Z10DrawSticksPiS_S_b+0x26>
    7bd8:	cd b7       	in	r28, 0x3d	; 61
    7bda:	de b7       	in	r29, 0x3e	; 62
    7bdc:	5c 01       	movw	r10, r24
    7bde:	7b 83       	std	Y+3, r23	; 0x03
    7be0:	6a 83       	std	Y+2, r22	; 0x02
    7be2:	6a 01       	movw	r12, r20
    7be4:	52 2e       	mov	r5, r18
    const uint8_t RECT_LEFT_POSX  = OFFSETX;
    const uint8_t RECT_LEFT_POSY  = OFFSETY + 4;
    const uint8_t RECT_RIGHT_POSX = TFT_ScreenWidth - OFFSETX - RECT_SIZE - 1;
    const uint8_t RECT_RIGHT_POSY = OFFSETY + 4;

    gfx_DrawLine(RECT_LEFT_POSX, RECT_LEFT_POSY + RECT_SIZE / 2, RECT_LEFT_POSX + RECT_SIZE, RECT_LEFT_POSY + RECT_SIZE / 2,     COLOR_FRONT, true);
    7be6:	ee 24       	eor	r14, r14
    7be8:	e3 94       	inc	r14
    7bea:	01 e0       	ldi	r16, 0x01	; 1
    7bec:	10 e0       	ldi	r17, 0x00	; 0
    7bee:	26 e3       	ldi	r18, 0x36	; 54
    7bf0:	40 e4       	ldi	r20, 0x40	; 64
    7bf2:	66 e3       	ldi	r22, 0x36	; 54
    7bf4:	80 e1       	ldi	r24, 0x10	; 16
    7bf6:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    gfx_DrawLine(RECT_LEFT_POSX + RECT_SIZE / 2, RECT_LEFT_POSY, RECT_LEFT_POSX + RECT_SIZE / 2, RECT_LEFT_POSY + RECT_SIZE,     COLOR_FRONT, true);
    7bfa:	2e e4       	ldi	r18, 0x4E	; 78
    7bfc:	48 e2       	ldi	r20, 0x28	; 40
    7bfe:	6e e1       	ldi	r22, 0x1E	; 30
    7c00:	88 e2       	ldi	r24, 0x28	; 40
    7c02:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    gfx_DrawLine(RECT_RIGHT_POSX, RECT_RIGHT_POSY + RECT_SIZE / 2, RECT_RIGHT_POSX + RECT_SIZE, RECT_RIGHT_POSY + RECT_SIZE / 2, COLOR_FRONT, true);
    7c06:	26 e3       	ldi	r18, 0x36	; 54
    7c08:	4f e8       	ldi	r20, 0x8F	; 143
    7c0a:	66 e3       	ldi	r22, 0x36	; 54
    7c0c:	8f e5       	ldi	r24, 0x5F	; 95
    7c0e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    gfx_DrawLine(RECT_RIGHT_POSX + RECT_SIZE / 2, RECT_RIGHT_POSY, RECT_RIGHT_POSX + RECT_SIZE / 2, RECT_RIGHT_POSY + RECT_SIZE, COLOR_FRONT, true);
    7c12:	2e e4       	ldi	r18, 0x4E	; 78
    7c14:	47 e7       	ldi	r20, 0x77	; 119
    7c16:	6e e1       	ldi	r22, 0x1E	; 30
    7c18:	87 e7       	ldi	r24, 0x77	; 119
    7c1a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>

    gfx_DrawRectangle(RECT_LEFT_POSX,      RECT_LEFT_POSY,      RECT_LEFT_POSX  + RECT_SIZE,     RECT_LEFT_POSY  + RECT_SIZE,     COLOR_FRONT);
    7c1e:	e1 2c       	mov	r14, r1
    7c20:	2e e4       	ldi	r18, 0x4E	; 78
    7c22:	40 e4       	ldi	r20, 0x40	; 64
    7c24:	6e e1       	ldi	r22, 0x1E	; 30
    7c26:	80 e1       	ldi	r24, 0x10	; 16
    7c28:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
    gfx_DrawRectangle(RECT_LEFT_POSX - 1,  RECT_LEFT_POSY - 1,  RECT_LEFT_POSX  + RECT_SIZE + 1, RECT_LEFT_POSY  + RECT_SIZE + 1, COLOR_FRONT);
    7c2c:	2f e4       	ldi	r18, 0x4F	; 79
    7c2e:	41 e4       	ldi	r20, 0x41	; 65
    7c30:	6d e1       	ldi	r22, 0x1D	; 29
    7c32:	8f e0       	ldi	r24, 0x0F	; 15
    7c34:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
    gfx_DrawRectangle(RECT_RIGHT_POSX,     RECT_RIGHT_POSY,     RECT_RIGHT_POSX + RECT_SIZE,     RECT_RIGHT_POSY + RECT_SIZE,     COLOR_FRONT);
    7c38:	2e e4       	ldi	r18, 0x4E	; 78
    7c3a:	4f e8       	ldi	r20, 0x8F	; 143
    7c3c:	6e e1       	ldi	r22, 0x1E	; 30
    7c3e:	8f e5       	ldi	r24, 0x5F	; 95
    7c40:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
    gfx_DrawRectangle(RECT_RIGHT_POSX - 1, RECT_RIGHT_POSY - 1, RECT_RIGHT_POSX + RECT_SIZE + 1, RECT_RIGHT_POSY + RECT_SIZE + 1, COLOR_FRONT);
    7c44:	2f e4       	ldi	r18, 0x4F	; 79
    7c46:	40 e9       	ldi	r20, 0x90	; 144
    7c48:	6d e1       	ldi	r22, 0x1D	; 29
    7c4a:	8e e5       	ldi	r24, 0x5E	; 94
    7c4c:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>

    uint8_t x =             uint16_t(Val[CTRL_RUD] - Min[CTRL_RUD]) * RECT_SIZE / (Max[CTRL_RUD] - Min[CTRL_RUD] + 1);
    7c50:	f5 01       	movw	r30, r10
    7c52:	46 81       	ldd	r20, Z+6	; 0x06
    7c54:	57 81       	ldd	r21, Z+7	; 0x07
    7c56:	f6 01       	movw	r30, r12
    7c58:	26 81       	ldd	r18, Z+6	; 0x06
    7c5a:	37 81       	ldd	r19, Z+7	; 0x07
    7c5c:	24 1b       	sub	r18, r20
    7c5e:	35 0b       	sbc	r19, r21
    7c60:	60 e3       	ldi	r22, 0x30	; 48
    7c62:	f6 2e       	mov	r15, r22
    7c64:	f2 9e       	mul	r15, r18
    7c66:	c0 01       	movw	r24, r0
    7c68:	f3 9e       	mul	r15, r19
    7c6a:	90 0d       	add	r25, r0
    7c6c:	11 24       	eor	r1, r1
    7c6e:	ea 81       	ldd	r30, Y+2	; 0x02
    7c70:	fb 81       	ldd	r31, Y+3	; 0x03
    7c72:	66 81       	ldd	r22, Z+6	; 0x06
    7c74:	77 81       	ldd	r23, Z+7	; 0x07
    7c76:	64 1b       	sub	r22, r20
    7c78:	75 0b       	sbc	r23, r21
    7c7a:	6f 5f       	subi	r22, 0xFF	; 255
    7c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    7c7e:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    7c82:	96 2e       	mov	r9, r22
    uint8_t y = RECT_SIZE - uint16_t(Val[CTRL_THR] - Min[CTRL_THR]) * RECT_SIZE / (Max[CTRL_THR] - Min[CTRL_THR] + 1);
    7c84:	f5 01       	movw	r30, r10
    7c86:	44 81       	ldd	r20, Z+4	; 0x04
    7c88:	55 81       	ldd	r21, Z+5	; 0x05
    7c8a:	f6 01       	movw	r30, r12
    7c8c:	24 81       	ldd	r18, Z+4	; 0x04
    7c8e:	35 81       	ldd	r19, Z+5	; 0x05
    7c90:	24 1b       	sub	r18, r20
    7c92:	35 0b       	sbc	r19, r21
    7c94:	f2 9e       	mul	r15, r18
    7c96:	c0 01       	movw	r24, r0
    7c98:	f3 9e       	mul	r15, r19
    7c9a:	90 0d       	add	r25, r0
    7c9c:	11 24       	eor	r1, r1
    7c9e:	ea 81       	ldd	r30, Y+2	; 0x02
    7ca0:	fb 81       	ldd	r31, Y+3	; 0x03
    7ca2:	64 81       	ldd	r22, Z+4	; 0x04
    7ca4:	75 81       	ldd	r23, Z+5	; 0x05
    7ca6:	64 1b       	sub	r22, r20
    7ca8:	75 0b       	sbc	r23, r21
    7caa:	6f 5f       	subi	r22, 0xFF	; 255
    7cac:	7f 4f       	sbci	r23, 0xFF	; 255
    7cae:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    7cb2:	36 2e       	mov	r3, r22

    gfx_DrawPixel(RECT_LEFT_POSX + x, RECT_LEFT_POSY - 2 + y, COLOR_FRONT);
    7cb4:	10 e1       	ldi	r17, 0x10	; 16
    7cb6:	19 0d       	add	r17, r9
    7cb8:	7c e4       	ldi	r23, 0x4C	; 76
    7cba:	47 2e       	mov	r4, r23
    7cbc:	64 2d       	mov	r22, r4
    7cbe:	63 19       	sub	r22, r3
    7cc0:	41 e0       	ldi	r20, 0x01	; 1
    7cc2:	50 e0       	ldi	r21, 0x00	; 0
    7cc4:	81 2f       	mov	r24, r17
    7cc6:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
    gfx_DrawPixel(RECT_LEFT_POSX + x, RECT_LEFT_POSY + 2 + y, COLOR_FRONT);
    7cca:	e0 e5       	ldi	r30, 0x50	; 80
    7ccc:	6e 2e       	mov	r6, r30
    7cce:	66 2d       	mov	r22, r6
    7cd0:	63 19       	sub	r22, r3
    7cd2:	41 e0       	ldi	r20, 0x01	; 1
    7cd4:	50 e0       	ldi	r21, 0x00	; 0
    7cd6:	81 2f       	mov	r24, r17
    7cd8:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
    gfx_DrawLine(RECT_LEFT_POSX - 1 + x, RECT_LEFT_POSY - 1 + y, RECT_LEFT_POSX + 1 + x, RECT_LEFT_POSY - 1 + y, COLOR_FRONT);
    7cdc:	91 e1       	ldi	r25, 0x11	; 17
    7cde:	99 0d       	add	r25, r9
    7ce0:	fd e4       	ldi	r31, 0x4D	; 77
    7ce2:	7f 2e       	mov	r7, r31
    7ce4:	67 2d       	mov	r22, r7
    7ce6:	63 19       	sub	r22, r3
    7ce8:	af e0       	ldi	r26, 0x0F	; 15
    7cea:	2a 2e       	mov	r2, r26
    7cec:	29 0c       	add	r2, r9
    7cee:	01 e0       	ldi	r16, 0x01	; 1
    7cf0:	10 e0       	ldi	r17, 0x00	; 0
    7cf2:	26 2f       	mov	r18, r22
    7cf4:	49 2f       	mov	r20, r25
    7cf6:	82 2d       	mov	r24, r2
    7cf8:	99 83       	std	Y+1, r25	; 0x01
    7cfa:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    gfx_DrawLine(RECT_LEFT_POSX - 2 + x, RECT_LEFT_POSY + y,     RECT_LEFT_POSX + 2 + x, RECT_LEFT_POSY + y,     COLOR_FRONT);
    7cfe:	be e4       	ldi	r27, 0x4E	; 78
    7d00:	8b 2e       	mov	r8, r27
    7d02:	68 2d       	mov	r22, r8
    7d04:	63 19       	sub	r22, r3
    7d06:	42 e1       	ldi	r20, 0x12	; 18
    7d08:	49 0d       	add	r20, r9
    7d0a:	26 2f       	mov	r18, r22
    7d0c:	8e e0       	ldi	r24, 0x0E	; 14
    7d0e:	89 0d       	add	r24, r9
    7d10:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    gfx_DrawLine(RECT_LEFT_POSX - 1 + x, RECT_LEFT_POSY + 1 + y, RECT_LEFT_POSX + 1 + x, RECT_LEFT_POSY + 1 + y, COLOR_FRONT);
    7d14:	8f e4       	ldi	r24, 0x4F	; 79
    7d16:	98 2e       	mov	r9, r24
    7d18:	69 2d       	mov	r22, r9
    7d1a:	63 19       	sub	r22, r3
    7d1c:	26 2f       	mov	r18, r22
    7d1e:	99 81       	ldd	r25, Y+1	; 0x01
    7d20:	49 2f       	mov	r20, r25
    7d22:	82 2d       	mov	r24, r2
    7d24:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>

    x =             uint16_t(Val[CTRL_AIL] - Min[CTRL_AIL]) * RECT_SIZE / (Max[CTRL_AIL] - Min[CTRL_AIL] + 1);
    7d28:	f5 01       	movw	r30, r10
    7d2a:	40 81       	ld	r20, Z
    7d2c:	51 81       	ldd	r21, Z+1	; 0x01
    7d2e:	f6 01       	movw	r30, r12
    7d30:	20 81       	ld	r18, Z
    7d32:	31 81       	ldd	r19, Z+1	; 0x01
    7d34:	24 1b       	sub	r18, r20
    7d36:	35 0b       	sbc	r19, r21
    7d38:	f2 9e       	mul	r15, r18
    7d3a:	c0 01       	movw	r24, r0
    7d3c:	f3 9e       	mul	r15, r19
    7d3e:	90 0d       	add	r25, r0
    7d40:	11 24       	eor	r1, r1
    7d42:	ea 81       	ldd	r30, Y+2	; 0x02
    7d44:	fb 81       	ldd	r31, Y+3	; 0x03
    7d46:	60 81       	ld	r22, Z
    7d48:	71 81       	ldd	r23, Z+1	; 0x01
    7d4a:	64 1b       	sub	r22, r20
    7d4c:	75 0b       	sbc	r23, r21
    7d4e:	6f 5f       	subi	r22, 0xFF	; 255
    7d50:	7f 4f       	sbci	r23, 0xFF	; 255
    7d52:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    7d56:	36 2f       	mov	r19, r22
    y = RECT_SIZE - uint16_t(Val[CTRL_ELE] - Min[CTRL_ELE]) * RECT_SIZE / (Max[CTRL_ELE] - Min[CTRL_ELE] + 1);
    7d58:	f5 01       	movw	r30, r10
    7d5a:	62 81       	ldd	r22, Z+2	; 0x02
    7d5c:	73 81       	ldd	r23, Z+3	; 0x03
    7d5e:	f6 01       	movw	r30, r12
    7d60:	42 81       	ldd	r20, Z+2	; 0x02
    7d62:	53 81       	ldd	r21, Z+3	; 0x03
    7d64:	46 1b       	sub	r20, r22
    7d66:	57 0b       	sbc	r21, r23
    7d68:	f4 9e       	mul	r15, r20
    7d6a:	c0 01       	movw	r24, r0
    7d6c:	f5 9e       	mul	r15, r21
    7d6e:	90 0d       	add	r25, r0
    7d70:	11 24       	eor	r1, r1
    7d72:	ea 81       	ldd	r30, Y+2	; 0x02
    7d74:	fb 81       	ldd	r31, Y+3	; 0x03
    7d76:	42 81       	ldd	r20, Z+2	; 0x02
    7d78:	53 81       	ldd	r21, Z+3	; 0x03
    7d7a:	46 1b       	sub	r20, r22
    7d7c:	57 0b       	sbc	r21, r23
    7d7e:	4f 5f       	subi	r20, 0xFF	; 255
    7d80:	5f 4f       	sbci	r21, 0xFF	; 255
    7d82:	ba 01       	movw	r22, r20
    7d84:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    7d88:	36 2e       	mov	r3, r22

    gfx_DrawPixel(RECT_RIGHT_POSX + x, RECT_RIGHT_POSY - 2 + y, COLOR_FRONT);
    7d8a:	1f e5       	ldi	r17, 0x5F	; 95
    7d8c:	13 0f       	add	r17, r19
    7d8e:	64 2d       	mov	r22, r4
    7d90:	63 19       	sub	r22, r3
    7d92:	41 e0       	ldi	r20, 0x01	; 1
    7d94:	50 e0       	ldi	r21, 0x00	; 0
    7d96:	81 2f       	mov	r24, r17
    7d98:	39 83       	std	Y+1, r19	; 0x01
    7d9a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
    gfx_DrawPixel(RECT_RIGHT_POSX + x, RECT_RIGHT_POSY + 2 + y, COLOR_FRONT);
    7d9e:	66 2d       	mov	r22, r6
    7da0:	63 19       	sub	r22, r3
    7da2:	41 e0       	ldi	r20, 0x01	; 1
    7da4:	50 e0       	ldi	r21, 0x00	; 0
    7da6:	81 2f       	mov	r24, r17
    7da8:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
    gfx_DrawLine(RECT_RIGHT_POSX - 1 + x, RECT_RIGHT_POSY - 1 + y, RECT_RIGHT_POSX + 1 + x, RECT_RIGHT_POSY - 1 + y, COLOR_FRONT);
    7dac:	39 81       	ldd	r19, Y+1	; 0x01
    7dae:	90 e6       	ldi	r25, 0x60	; 96
    7db0:	49 2e       	mov	r4, r25
    7db2:	43 0e       	add	r4, r19
    7db4:	67 2d       	mov	r22, r7
    7db6:	63 19       	sub	r22, r3
    7db8:	2e e5       	ldi	r18, 0x5E	; 94
    7dba:	62 2e       	mov	r6, r18
    7dbc:	63 0e       	add	r6, r19
    7dbe:	01 e0       	ldi	r16, 0x01	; 1
    7dc0:	10 e0       	ldi	r17, 0x00	; 0
    7dc2:	26 2f       	mov	r18, r22
    7dc4:	44 2d       	mov	r20, r4
    7dc6:	86 2d       	mov	r24, r6
    7dc8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    gfx_DrawLine(RECT_RIGHT_POSX - 2 + x, RECT_RIGHT_POSY + y,     RECT_RIGHT_POSX + 2 + x, RECT_RIGHT_POSY + y,     COLOR_FRONT);
    7dcc:	68 2d       	mov	r22, r8
    7dce:	63 19       	sub	r22, r3
    7dd0:	39 81       	ldd	r19, Y+1	; 0x01
    7dd2:	41 e6       	ldi	r20, 0x61	; 97
    7dd4:	43 0f       	add	r20, r19
    7dd6:	26 2f       	mov	r18, r22
    7dd8:	8d e5       	ldi	r24, 0x5D	; 93
    7dda:	83 0f       	add	r24, r19
    7ddc:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    gfx_DrawLine(RECT_RIGHT_POSX - 1 + x, RECT_RIGHT_POSY + 1 + y, RECT_RIGHT_POSX + 1 + x, RECT_RIGHT_POSY + 1 + y, COLOR_FRONT);
    7de0:	69 2d       	mov	r22, r9
    7de2:	63 19       	sub	r22, r3
    7de4:	26 2f       	mov	r18, r22
    7de6:	44 2d       	mov	r20, r4
    7de8:	86 2d       	mov	r24, r6
    7dea:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>

    x = uint16_t(Val[CTRL_AUX1] - Min[CTRL_AUX1]) * RECT_SIZE / (Max[CTRL_AUX1] - Min[CTRL_AUX1] + 1);
    7dee:	f5 01       	movw	r30, r10
    7df0:	40 85       	ldd	r20, Z+8	; 0x08
    7df2:	51 85       	ldd	r21, Z+9	; 0x09
    7df4:	f6 01       	movw	r30, r12
    7df6:	20 85       	ldd	r18, Z+8	; 0x08
    7df8:	31 85       	ldd	r19, Z+9	; 0x09
    7dfa:	24 1b       	sub	r18, r20
    7dfc:	35 0b       	sbc	r19, r21
    7dfe:	f2 9e       	mul	r15, r18
    7e00:	c0 01       	movw	r24, r0
    7e02:	f3 9e       	mul	r15, r19
    7e04:	90 0d       	add	r25, r0
    7e06:	11 24       	eor	r1, r1
    7e08:	ea 81       	ldd	r30, Y+2	; 0x02
    7e0a:	fb 81       	ldd	r31, Y+3	; 0x03
    7e0c:	60 85       	ldd	r22, Z+8	; 0x08
    7e0e:	71 85       	ldd	r23, Z+9	; 0x09
    7e10:	64 1b       	sub	r22, r20
    7e12:	75 0b       	sbc	r23, r21
    7e14:	6f 5f       	subi	r22, 0xFF	; 255
    7e16:	7f 4f       	sbci	r23, 0xFF	; 255
    7e18:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    7e1c:	96 2f       	mov	r25, r22

    gfx_DrawRectangle(RECT_RIGHT_POSX,     RECT_RIGHT_POSY - 5, RECT_RIGHT_POSX + RECT_SIZE, RECT_RIGHT_POSY - 3, COLOR_FRONT);
    7e1e:	2b e1       	ldi	r18, 0x1B	; 27
    7e20:	4f e8       	ldi	r20, 0x8F	; 143
    7e22:	69 e1       	ldi	r22, 0x19	; 25
    7e24:	8f e5       	ldi	r24, 0x5F	; 95
    7e26:	99 83       	std	Y+1, r25	; 0x01
    7e28:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
    gfx_FillRectangle(RECT_RIGHT_POSX + x, RECT_RIGHT_POSY - 5, RECT_RIGHT_POSX + x + 1,     RECT_RIGHT_POSY - 3, COLOR_FRONT);
    7e2c:	99 81       	ldd	r25, Y+1	; 0x01
    7e2e:	40 e6       	ldi	r20, 0x60	; 96
    7e30:	49 0f       	add	r20, r25
    7e32:	2b e1       	ldi	r18, 0x1B	; 27
    7e34:	69 e1       	ldi	r22, 0x19	; 25
    7e36:	8f e5       	ldi	r24, 0x5F	; 95
    7e38:	89 0f       	add	r24, r25
    7e3a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <_Z17gfx_FillRectanglehhhh8ColorIdx>

    if (IsDrawTrimmers)
    7e3e:	55 20       	and	r5, r5
    7e40:	09 f4       	brne	.+2      	; 0x7e44 <_Z10DrawSticksPiS_S_b+0x292>
    7e42:	ce c1       	rjmp	.+924    	; 0x81e0 <_Z10DrawSticksPiS_S_b+0x62e>
        const uint8_t TRIM3_X = RECT_LEFT_POSX + RECT_SIZE / 2 - TRIM_SIZE / 2;
        const uint8_t TRIM3_Y = RECT_LEFT_POSY + RECT_SIZE + TRIM_HEIGHT;

        int8_t tr[4];

        tr[0] = CurModel.Mode[FLY_MODE].trimmers[0] / 6 + TRIM0_X + 16;
    7e44:	20 91 68 09 	lds	r18, 0x0968
    7e48:	36 ef       	ldi	r19, 0xF6	; 246
    7e4a:	b3 2e       	mov	r11, r19
    7e4c:	3b 2d       	mov	r19, r11
    7e4e:	23 03       	mulsu	r18, r19
    7e50:	d0 01       	movw	r26, r0
    7e52:	11 24       	eor	r1, r1
    7e54:	a3 57       	subi	r26, 0x73	; 115
    7e56:	b5 4f       	sbci	r27, 0xF5	; 245
    7e58:	8c 91       	ld	r24, X
    7e5a:	46 e0       	ldi	r20, 0x06	; 6
    7e5c:	f4 2e       	mov	r15, r20
    7e5e:	6f 2d       	mov	r22, r15
    7e60:	0e 94 f6 47 	call	0x8fec	; 0x8fec <__divmodqi4>
    7e64:	d8 2e       	mov	r13, r24

        gfx_DrawLine(TRIM0_X, TRIM0_Y, TRIM0_X + TRIM_SIZE, TRIM0_Y, COLOR_FRONT);
    7e66:	26 e5       	ldi	r18, 0x56	; 86
    7e68:	47 e8       	ldi	r20, 0x87	; 135
    7e6a:	66 e5       	ldi	r22, 0x56	; 86
    7e6c:	87 e6       	ldi	r24, 0x67	; 103
    7e6e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
        
        gfx_DrawPixel(TRIM0_X,      TRIM0_Y - 1, COLOR_FRONT);
    7e72:	41 e0       	ldi	r20, 0x01	; 1
    7e74:	50 e0       	ldi	r21, 0x00	; 0
    7e76:	65 e5       	ldi	r22, 0x55	; 85
    7e78:	87 e6       	ldi	r24, 0x67	; 103
    7e7a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X,      TRIM0_Y - 2, COLOR_FRONT);
    7e7e:	41 e0       	ldi	r20, 0x01	; 1
    7e80:	50 e0       	ldi	r21, 0x00	; 0
    7e82:	64 e5       	ldi	r22, 0x54	; 84
    7e84:	87 e6       	ldi	r24, 0x67	; 103
    7e86:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X +  4, TRIM0_Y - 1, COLOR_FRONT);
    7e8a:	41 e0       	ldi	r20, 0x01	; 1
    7e8c:	50 e0       	ldi	r21, 0x00	; 0
    7e8e:	65 e5       	ldi	r22, 0x55	; 85
    7e90:	8b e6       	ldi	r24, 0x6B	; 107
    7e92:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X +  8, TRIM0_Y - 1, COLOR_FRONT);
    7e96:	41 e0       	ldi	r20, 0x01	; 1
    7e98:	50 e0       	ldi	r21, 0x00	; 0
    7e9a:	65 e5       	ldi	r22, 0x55	; 85
    7e9c:	8f e6       	ldi	r24, 0x6F	; 111
    7e9e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X + 12, TRIM0_Y - 1, COLOR_FRONT);
    7ea2:	41 e0       	ldi	r20, 0x01	; 1
    7ea4:	50 e0       	ldi	r21, 0x00	; 0
    7ea6:	65 e5       	ldi	r22, 0x55	; 85
    7ea8:	83 e7       	ldi	r24, 0x73	; 115
    7eaa:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X + 16, TRIM0_Y - 1, COLOR_FRONT);
    7eae:	41 e0       	ldi	r20, 0x01	; 1
    7eb0:	50 e0       	ldi	r21, 0x00	; 0
    7eb2:	65 e5       	ldi	r22, 0x55	; 85
    7eb4:	87 e7       	ldi	r24, 0x77	; 119
    7eb6:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X + 16, TRIM0_Y - 2, COLOR_FRONT);
    7eba:	41 e0       	ldi	r20, 0x01	; 1
    7ebc:	50 e0       	ldi	r21, 0x00	; 0
    7ebe:	64 e5       	ldi	r22, 0x54	; 84
    7ec0:	87 e7       	ldi	r24, 0x77	; 119
    7ec2:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X + 20, TRIM0_Y - 1, COLOR_FRONT);
    7ec6:	41 e0       	ldi	r20, 0x01	; 1
    7ec8:	50 e0       	ldi	r21, 0x00	; 0
    7eca:	65 e5       	ldi	r22, 0x55	; 85
    7ecc:	8b e7       	ldi	r24, 0x7B	; 123
    7ece:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X + 24, TRIM0_Y - 1, COLOR_FRONT);
    7ed2:	41 e0       	ldi	r20, 0x01	; 1
    7ed4:	50 e0       	ldi	r21, 0x00	; 0
    7ed6:	65 e5       	ldi	r22, 0x55	; 85
    7ed8:	8f e7       	ldi	r24, 0x7F	; 127
    7eda:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X + 28, TRIM0_Y - 1, COLOR_FRONT);
    7ede:	41 e0       	ldi	r20, 0x01	; 1
    7ee0:	50 e0       	ldi	r21, 0x00	; 0
    7ee2:	65 e5       	ldi	r22, 0x55	; 85
    7ee4:	83 e8       	ldi	r24, 0x83	; 131
    7ee6:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X + 32, TRIM0_Y - 1, COLOR_FRONT);
    7eea:	41 e0       	ldi	r20, 0x01	; 1
    7eec:	50 e0       	ldi	r21, 0x00	; 0
    7eee:	65 e5       	ldi	r22, 0x55	; 85
    7ef0:	87 e8       	ldi	r24, 0x87	; 135
    7ef2:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM0_X + 32, TRIM0_Y - 2, COLOR_FRONT);
    7ef6:	41 e0       	ldi	r20, 0x01	; 1
    7ef8:	50 e0       	ldi	r21, 0x00	; 0
    7efa:	64 e5       	ldi	r22, 0x54	; 84
    7efc:	87 e8       	ldi	r24, 0x87	; 135
    7efe:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        
        gfx_DrawPixel(tr[0],     TRIM0_Y - 3, COLOR_FRONT);
    7f02:	41 e0       	ldi	r20, 0x01	; 1
    7f04:	50 e0       	ldi	r21, 0x00	; 0
    7f06:	63 e5       	ldi	r22, 0x53	; 83
    7f08:	87 e7       	ldi	r24, 0x77	; 119
    7f0a:	8d 0d       	add	r24, r13
    7f0c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawLine (tr[0] - 1, TRIM0_Y - 4, tr[0] + 1, TRIM0_Y - 4, COLOR_FRONT);
    7f10:	48 e7       	ldi	r20, 0x78	; 120
    7f12:	4d 0d       	add	r20, r13
    7f14:	22 e5       	ldi	r18, 0x52	; 82
    7f16:	62 e5       	ldi	r22, 0x52	; 82
    7f18:	86 e7       	ldi	r24, 0x76	; 118
    7f1a:	8d 0d       	add	r24, r13
    7f1c:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
        gfx_DrawLine (tr[0] - 2, TRIM0_Y - 5, tr[0] + 2, TRIM0_Y - 5, COLOR_FRONT);
    7f20:	49 e7       	ldi	r20, 0x79	; 121
    7f22:	4d 0d       	add	r20, r13
    7f24:	21 e5       	ldi	r18, 0x51	; 81
    7f26:	61 e5       	ldi	r22, 0x51	; 81
    7f28:	85 e7       	ldi	r24, 0x75	; 117
    7f2a:	8d 0d       	add	r24, r13
    7f2c:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>

        tr[1] = CurModel.Mode[FLY_MODE].trimmers[1] / -6 + TRIM1_Y + 16;
    7f30:	20 91 68 09 	lds	r18, 0x0968
    7f34:	3b 2d       	mov	r19, r11
    7f36:	23 03       	mulsu	r18, r19
    7f38:	d0 01       	movw	r26, r0
    7f3a:	11 24       	eor	r1, r1
    7f3c:	a2 57       	subi	r26, 0x72	; 114
    7f3e:	b5 4f       	sbci	r27, 0xF5	; 245
    7f40:	8c 91       	ld	r24, X
    7f42:	5a ef       	ldi	r21, 0xFA	; 250
    7f44:	d5 2e       	mov	r13, r21
    7f46:	6d 2d       	mov	r22, r13
    7f48:	0e 94 f6 47 	call	0x8fec	; 0x8fec <__divmodqi4>
    7f4c:	c8 2e       	mov	r12, r24

        gfx_DrawLine(TRIM1_X, TRIM1_Y, TRIM1_X, TRIM1_Y + TRIM_SIZE, COLOR_FRONT);
    7f4e:	26 e4       	ldi	r18, 0x46	; 70
    7f50:	47 e5       	ldi	r20, 0x57	; 87
    7f52:	66 e2       	ldi	r22, 0x26	; 38
    7f54:	87 e5       	ldi	r24, 0x57	; 87
    7f56:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>

        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y,      COLOR_FRONT);
    7f5a:	41 e0       	ldi	r20, 0x01	; 1
    7f5c:	50 e0       	ldi	r21, 0x00	; 0
    7f5e:	66 e2       	ldi	r22, 0x26	; 38
    7f60:	88 e5       	ldi	r24, 0x58	; 88
    7f62:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 2, TRIM1_Y,      COLOR_FRONT);
    7f66:	41 e0       	ldi	r20, 0x01	; 1
    7f68:	50 e0       	ldi	r21, 0x00	; 0
    7f6a:	66 e2       	ldi	r22, 0x26	; 38
    7f6c:	89 e5       	ldi	r24, 0x59	; 89
    7f6e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y +  4, COLOR_FRONT);
    7f72:	41 e0       	ldi	r20, 0x01	; 1
    7f74:	50 e0       	ldi	r21, 0x00	; 0
    7f76:	6a e2       	ldi	r22, 0x2A	; 42
    7f78:	88 e5       	ldi	r24, 0x58	; 88
    7f7a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y +  8, COLOR_FRONT);
    7f7e:	41 e0       	ldi	r20, 0x01	; 1
    7f80:	50 e0       	ldi	r21, 0x00	; 0
    7f82:	6e e2       	ldi	r22, 0x2E	; 46
    7f84:	88 e5       	ldi	r24, 0x58	; 88
    7f86:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y + 12, COLOR_FRONT);
    7f8a:	41 e0       	ldi	r20, 0x01	; 1
    7f8c:	50 e0       	ldi	r21, 0x00	; 0
    7f8e:	62 e3       	ldi	r22, 0x32	; 50
    7f90:	88 e5       	ldi	r24, 0x58	; 88
    7f92:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y + 16, COLOR_FRONT);
    7f96:	41 e0       	ldi	r20, 0x01	; 1
    7f98:	50 e0       	ldi	r21, 0x00	; 0
    7f9a:	66 e3       	ldi	r22, 0x36	; 54
    7f9c:	88 e5       	ldi	r24, 0x58	; 88
    7f9e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 2, TRIM1_Y + 16, COLOR_FRONT);
    7fa2:	41 e0       	ldi	r20, 0x01	; 1
    7fa4:	50 e0       	ldi	r21, 0x00	; 0
    7fa6:	66 e3       	ldi	r22, 0x36	; 54
    7fa8:	89 e5       	ldi	r24, 0x59	; 89
    7faa:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y + 20, COLOR_FRONT);
    7fae:	41 e0       	ldi	r20, 0x01	; 1
    7fb0:	50 e0       	ldi	r21, 0x00	; 0
    7fb2:	6a e3       	ldi	r22, 0x3A	; 58
    7fb4:	88 e5       	ldi	r24, 0x58	; 88
    7fb6:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y + 24, COLOR_FRONT);
    7fba:	41 e0       	ldi	r20, 0x01	; 1
    7fbc:	50 e0       	ldi	r21, 0x00	; 0
    7fbe:	6e e3       	ldi	r22, 0x3E	; 62
    7fc0:	88 e5       	ldi	r24, 0x58	; 88
    7fc2:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y + 28, COLOR_FRONT);
    7fc6:	41 e0       	ldi	r20, 0x01	; 1
    7fc8:	50 e0       	ldi	r21, 0x00	; 0
    7fca:	62 e4       	ldi	r22, 0x42	; 66
    7fcc:	88 e5       	ldi	r24, 0x58	; 88
    7fce:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y + 32, COLOR_FRONT);
    7fd2:	41 e0       	ldi	r20, 0x01	; 1
    7fd4:	50 e0       	ldi	r21, 0x00	; 0
    7fd6:	66 e4       	ldi	r22, 0x46	; 70
    7fd8:	88 e5       	ldi	r24, 0x58	; 88
    7fda:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM1_X + 2, TRIM1_Y + 32, COLOR_FRONT);
    7fde:	41 e0       	ldi	r20, 0x01	; 1
    7fe0:	50 e0       	ldi	r21, 0x00	; 0
    7fe2:	66 e4       	ldi	r22, 0x46	; 70
    7fe4:	89 e5       	ldi	r24, 0x59	; 89
    7fe6:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        
        gfx_DrawPixel(tr[0],     TRIM0_Y - 3, COLOR_FRONT);
        gfx_DrawLine (tr[0] - 1, TRIM0_Y - 4, tr[0] + 1, TRIM0_Y - 4, COLOR_FRONT);
        gfx_DrawLine (tr[0] - 2, TRIM0_Y - 5, tr[0] + 2, TRIM0_Y - 5, COLOR_FRONT);

        tr[1] = CurModel.Mode[FLY_MODE].trimmers[1] / -6 + TRIM1_Y + 16;
    7fea:	66 e3       	ldi	r22, 0x36	; 54
    7fec:	6c 0d       	add	r22, r12
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y + 24, COLOR_FRONT);
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y + 28, COLOR_FRONT);
        gfx_DrawPixel(TRIM1_X + 1, TRIM1_Y + 32, COLOR_FRONT);
        gfx_DrawPixel(TRIM1_X + 2, TRIM1_Y + 32, COLOR_FRONT);

        gfx_DrawPixel(TRIM1_X + 3, tr[1], COLOR_FRONT);
    7fee:	41 e0       	ldi	r20, 0x01	; 1
    7ff0:	50 e0       	ldi	r21, 0x00	; 0
    7ff2:	8a e5       	ldi	r24, 0x5A	; 90
    7ff4:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawLine (TRIM1_X + 4, tr[1] - 1, TRIM1_X + 4, tr[1] + 1, COLOR_FRONT);
    7ff8:	27 e3       	ldi	r18, 0x37	; 55
    7ffa:	2c 0d       	add	r18, r12
    7ffc:	65 e3       	ldi	r22, 0x35	; 53
    7ffe:	6c 0d       	add	r22, r12
    8000:	4b e5       	ldi	r20, 0x5B	; 91
    8002:	8b e5       	ldi	r24, 0x5B	; 91
    8004:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
        gfx_DrawLine (TRIM1_X + 5, tr[1] - 2, TRIM1_X + 5, tr[1] + 2, COLOR_FRONT);
    8008:	28 e3       	ldi	r18, 0x38	; 56
    800a:	2c 0d       	add	r18, r12
    800c:	64 e3       	ldi	r22, 0x34	; 52
    800e:	6c 0d       	add	r22, r12
    8010:	4c e5       	ldi	r20, 0x5C	; 92
    8012:	8c e5       	ldi	r24, 0x5C	; 92
    8014:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>

        tr[2] = CurModel.Mode[FLY_MODE].trimmers[2]/ -6 + TRIM1_Y + 16;
    8018:	20 91 68 09 	lds	r18, 0x0968
    801c:	3b 2d       	mov	r19, r11
    801e:	23 03       	mulsu	r18, r19
    8020:	d0 01       	movw	r26, r0
    8022:	11 24       	eor	r1, r1
    8024:	a1 57       	subi	r26, 0x71	; 113
    8026:	b5 4f       	sbci	r27, 0xF5	; 245
    8028:	8c 91       	ld	r24, X
    802a:	6d 2d       	mov	r22, r13
    802c:	0e 94 f6 47 	call	0x8fec	; 0x8fec <__divmodqi4>
    8030:	d8 2e       	mov	r13, r24

        gfx_DrawLine(TRIM2_X, TRIM1_Y, TRIM2_X, TRIM1_Y + TRIM_SIZE, COLOR_FRONT);
    8032:	26 e4       	ldi	r18, 0x46	; 70
    8034:	48 e4       	ldi	r20, 0x48	; 72
    8036:	66 e2       	ldi	r22, 0x26	; 38
    8038:	88 e4       	ldi	r24, 0x48	; 72
    803a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>

        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y,      COLOR_FRONT);
    803e:	41 e0       	ldi	r20, 0x01	; 1
    8040:	50 e0       	ldi	r21, 0x00	; 0
    8042:	66 e2       	ldi	r22, 0x26	; 38
    8044:	87 e4       	ldi	r24, 0x47	; 71
    8046:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 2, TRIM1_Y,      COLOR_FRONT);
    804a:	41 e0       	ldi	r20, 0x01	; 1
    804c:	50 e0       	ldi	r21, 0x00	; 0
    804e:	66 e2       	ldi	r22, 0x26	; 38
    8050:	86 e4       	ldi	r24, 0x46	; 70
    8052:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y +  4, COLOR_FRONT);
    8056:	41 e0       	ldi	r20, 0x01	; 1
    8058:	50 e0       	ldi	r21, 0x00	; 0
    805a:	6a e2       	ldi	r22, 0x2A	; 42
    805c:	87 e4       	ldi	r24, 0x47	; 71
    805e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y +  8, COLOR_FRONT);
    8062:	41 e0       	ldi	r20, 0x01	; 1
    8064:	50 e0       	ldi	r21, 0x00	; 0
    8066:	6e e2       	ldi	r22, 0x2E	; 46
    8068:	87 e4       	ldi	r24, 0x47	; 71
    806a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y + 12, COLOR_FRONT);
    806e:	41 e0       	ldi	r20, 0x01	; 1
    8070:	50 e0       	ldi	r21, 0x00	; 0
    8072:	62 e3       	ldi	r22, 0x32	; 50
    8074:	87 e4       	ldi	r24, 0x47	; 71
    8076:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y + 16, COLOR_FRONT);
    807a:	41 e0       	ldi	r20, 0x01	; 1
    807c:	50 e0       	ldi	r21, 0x00	; 0
    807e:	66 e3       	ldi	r22, 0x36	; 54
    8080:	87 e4       	ldi	r24, 0x47	; 71
    8082:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 2, TRIM1_Y + 16, COLOR_FRONT);
    8086:	41 e0       	ldi	r20, 0x01	; 1
    8088:	50 e0       	ldi	r21, 0x00	; 0
    808a:	66 e3       	ldi	r22, 0x36	; 54
    808c:	86 e4       	ldi	r24, 0x46	; 70
    808e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y + 20, COLOR_FRONT);
    8092:	41 e0       	ldi	r20, 0x01	; 1
    8094:	50 e0       	ldi	r21, 0x00	; 0
    8096:	6a e3       	ldi	r22, 0x3A	; 58
    8098:	87 e4       	ldi	r24, 0x47	; 71
    809a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y + 24, COLOR_FRONT);
    809e:	41 e0       	ldi	r20, 0x01	; 1
    80a0:	50 e0       	ldi	r21, 0x00	; 0
    80a2:	6e e3       	ldi	r22, 0x3E	; 62
    80a4:	87 e4       	ldi	r24, 0x47	; 71
    80a6:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y + 28, COLOR_FRONT);
    80aa:	41 e0       	ldi	r20, 0x01	; 1
    80ac:	50 e0       	ldi	r21, 0x00	; 0
    80ae:	62 e4       	ldi	r22, 0x42	; 66
    80b0:	87 e4       	ldi	r24, 0x47	; 71
    80b2:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y + 32, COLOR_FRONT);
    80b6:	41 e0       	ldi	r20, 0x01	; 1
    80b8:	50 e0       	ldi	r21, 0x00	; 0
    80ba:	66 e4       	ldi	r22, 0x46	; 70
    80bc:	87 e4       	ldi	r24, 0x47	; 71
    80be:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM2_X - 2, TRIM1_Y + 32, COLOR_FRONT);
    80c2:	41 e0       	ldi	r20, 0x01	; 1
    80c4:	50 e0       	ldi	r21, 0x00	; 0
    80c6:	66 e4       	ldi	r22, 0x46	; 70
    80c8:	86 e4       	ldi	r24, 0x46	; 70
    80ca:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>

        gfx_DrawPixel(TRIM1_X + 3, tr[1], COLOR_FRONT);
        gfx_DrawLine (TRIM1_X + 4, tr[1] - 1, TRIM1_X + 4, tr[1] + 1, COLOR_FRONT);
        gfx_DrawLine (TRIM1_X + 5, tr[1] - 2, TRIM1_X + 5, tr[1] + 2, COLOR_FRONT);

        tr[2] = CurModel.Mode[FLY_MODE].trimmers[2]/ -6 + TRIM1_Y + 16;
    80ce:	66 e3       	ldi	r22, 0x36	; 54
    80d0:	6d 0d       	add	r22, r13
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y + 24, COLOR_FRONT);
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y + 28, COLOR_FRONT);
        gfx_DrawPixel(TRIM2_X - 1, TRIM1_Y + 32, COLOR_FRONT);
        gfx_DrawPixel(TRIM2_X - 2, TRIM1_Y + 32, COLOR_FRONT);
        
        gfx_DrawPixel(TRIM2_X - 3, tr[2], COLOR_FRONT);
    80d2:	41 e0       	ldi	r20, 0x01	; 1
    80d4:	50 e0       	ldi	r21, 0x00	; 0
    80d6:	85 e4       	ldi	r24, 0x45	; 69
    80d8:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawLine (TRIM2_X - 4, tr[2] - 1, TRIM2_X - 4, tr[2] + 1, COLOR_FRONT);
    80dc:	27 e3       	ldi	r18, 0x37	; 55
    80de:	2d 0d       	add	r18, r13
    80e0:	65 e3       	ldi	r22, 0x35	; 53
    80e2:	6d 0d       	add	r22, r13
    80e4:	44 e4       	ldi	r20, 0x44	; 68
    80e6:	84 e4       	ldi	r24, 0x44	; 68
    80e8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
        gfx_DrawLine (TRIM2_X - 5, tr[2] - 2, TRIM2_X - 5, tr[2] + 2, COLOR_FRONT);
    80ec:	28 e3       	ldi	r18, 0x38	; 56
    80ee:	2d 0d       	add	r18, r13
    80f0:	64 e3       	ldi	r22, 0x34	; 52
    80f2:	6d 0d       	add	r22, r13
    80f4:	43 e4       	ldi	r20, 0x43	; 67
    80f6:	83 e4       	ldi	r24, 0x43	; 67
    80f8:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>

        tr[3] = CurModel.Mode[FLY_MODE].trimmers[3] / 6 + TRIM3_X + 16;
    80fc:	20 91 68 09 	lds	r18, 0x0968
    8100:	3b 2d       	mov	r19, r11
    8102:	23 03       	mulsu	r18, r19
    8104:	f0 01       	movw	r30, r0
    8106:	11 24       	eor	r1, r1
    8108:	e0 57       	subi	r30, 0x70	; 112
    810a:	f5 4f       	sbci	r31, 0xF5	; 245
    810c:	80 81       	ld	r24, Z
    810e:	6f 2d       	mov	r22, r15
    8110:	0e 94 f6 47 	call	0x8fec	; 0x8fec <__divmodqi4>
    8114:	f8 2e       	mov	r15, r24

        gfx_DrawLine(TRIM3_X, TRIM3_Y, TRIM3_X + TRIM_SIZE, TRIM3_Y, COLOR_FRONT);
    8116:	26 e5       	ldi	r18, 0x56	; 86
    8118:	48 e3       	ldi	r20, 0x38	; 56
    811a:	66 e5       	ldi	r22, 0x56	; 86
    811c:	88 e1       	ldi	r24, 0x18	; 24
    811e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
        
        gfx_DrawPixel(TRIM3_X,      TRIM3_Y - 1, COLOR_FRONT);
    8122:	41 e0       	ldi	r20, 0x01	; 1
    8124:	50 e0       	ldi	r21, 0x00	; 0
    8126:	65 e5       	ldi	r22, 0x55	; 85
    8128:	88 e1       	ldi	r24, 0x18	; 24
    812a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X,      TRIM3_Y - 2, COLOR_FRONT);
    812e:	41 e0       	ldi	r20, 0x01	; 1
    8130:	50 e0       	ldi	r21, 0x00	; 0
    8132:	64 e5       	ldi	r22, 0x54	; 84
    8134:	88 e1       	ldi	r24, 0x18	; 24
    8136:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X +  4, TRIM3_Y - 1, COLOR_FRONT);
    813a:	41 e0       	ldi	r20, 0x01	; 1
    813c:	50 e0       	ldi	r21, 0x00	; 0
    813e:	65 e5       	ldi	r22, 0x55	; 85
    8140:	8c e1       	ldi	r24, 0x1C	; 28
    8142:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X +  8, TRIM3_Y - 1, COLOR_FRONT);
    8146:	41 e0       	ldi	r20, 0x01	; 1
    8148:	50 e0       	ldi	r21, 0x00	; 0
    814a:	65 e5       	ldi	r22, 0x55	; 85
    814c:	80 e2       	ldi	r24, 0x20	; 32
    814e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X + 12, TRIM3_Y - 1, COLOR_FRONT);
    8152:	41 e0       	ldi	r20, 0x01	; 1
    8154:	50 e0       	ldi	r21, 0x00	; 0
    8156:	65 e5       	ldi	r22, 0x55	; 85
    8158:	84 e2       	ldi	r24, 0x24	; 36
    815a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X + 16, TRIM3_Y - 1, COLOR_FRONT);
    815e:	41 e0       	ldi	r20, 0x01	; 1
    8160:	50 e0       	ldi	r21, 0x00	; 0
    8162:	65 e5       	ldi	r22, 0x55	; 85
    8164:	88 e2       	ldi	r24, 0x28	; 40
    8166:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X + 16, TRIM3_Y - 2, COLOR_FRONT);
    816a:	41 e0       	ldi	r20, 0x01	; 1
    816c:	50 e0       	ldi	r21, 0x00	; 0
    816e:	64 e5       	ldi	r22, 0x54	; 84
    8170:	88 e2       	ldi	r24, 0x28	; 40
    8172:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X + 20, TRIM3_Y - 1, COLOR_FRONT);
    8176:	41 e0       	ldi	r20, 0x01	; 1
    8178:	50 e0       	ldi	r21, 0x00	; 0
    817a:	65 e5       	ldi	r22, 0x55	; 85
    817c:	8c e2       	ldi	r24, 0x2C	; 44
    817e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X + 24, TRIM3_Y - 1, COLOR_FRONT);
    8182:	41 e0       	ldi	r20, 0x01	; 1
    8184:	50 e0       	ldi	r21, 0x00	; 0
    8186:	65 e5       	ldi	r22, 0x55	; 85
    8188:	80 e3       	ldi	r24, 0x30	; 48
    818a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X + 28, TRIM3_Y - 1, COLOR_FRONT);
    818e:	41 e0       	ldi	r20, 0x01	; 1
    8190:	50 e0       	ldi	r21, 0x00	; 0
    8192:	65 e5       	ldi	r22, 0x55	; 85
    8194:	84 e3       	ldi	r24, 0x34	; 52
    8196:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X + 32, TRIM3_Y - 1, COLOR_FRONT);
    819a:	41 e0       	ldi	r20, 0x01	; 1
    819c:	50 e0       	ldi	r21, 0x00	; 0
    819e:	65 e5       	ldi	r22, 0x55	; 85
    81a0:	88 e3       	ldi	r24, 0x38	; 56
    81a2:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawPixel(TRIM3_X + 32, TRIM3_Y - 2, COLOR_FRONT);
    81a6:	41 e0       	ldi	r20, 0x01	; 1
    81a8:	50 e0       	ldi	r21, 0x00	; 0
    81aa:	64 e5       	ldi	r22, 0x54	; 84
    81ac:	88 e3       	ldi	r24, 0x38	; 56
    81ae:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>

        gfx_DrawPixel(tr[3], TRIM3_Y - 3, COLOR_FRONT);
    81b2:	41 e0       	ldi	r20, 0x01	; 1
    81b4:	50 e0       	ldi	r21, 0x00	; 0
    81b6:	63 e5       	ldi	r22, 0x53	; 83
    81b8:	88 e2       	ldi	r24, 0x28	; 40
    81ba:	8f 0d       	add	r24, r15
    81bc:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <_Z13gfx_DrawPixelhh8ColorIdx>
        gfx_DrawLine(tr[3] - 1, TRIM3_Y - 4, tr[3] + 1, TRIM3_Y - 4, COLOR_FRONT);
    81c0:	49 e2       	ldi	r20, 0x29	; 41
    81c2:	4f 0d       	add	r20, r15
    81c4:	22 e5       	ldi	r18, 0x52	; 82
    81c6:	62 e5       	ldi	r22, 0x52	; 82
    81c8:	87 e2       	ldi	r24, 0x27	; 39
    81ca:	8f 0d       	add	r24, r15
    81cc:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
        gfx_DrawLine(tr[3] - 2, TRIM3_Y - 5, tr[3] + 2, TRIM3_Y - 5, COLOR_FRONT);
    81d0:	4a e2       	ldi	r20, 0x2A	; 42
    81d2:	4f 0d       	add	r20, r15
    81d4:	21 e5       	ldi	r18, 0x51	; 81
    81d6:	61 e5       	ldi	r22, 0x51	; 81
    81d8:	86 e2       	ldi	r24, 0x26	; 38
    81da:	8f 0d       	add	r24, r15
    81dc:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
    }
}
    81e0:	0f 90       	pop	r0
    81e2:	0f 90       	pop	r0
    81e4:	0f 90       	pop	r0
    81e6:	df 91       	pop	r29
    81e8:	cf 91       	pop	r28
    81ea:	1f 91       	pop	r17
    81ec:	0f 91       	pop	r16
    81ee:	ff 90       	pop	r15
    81f0:	ef 90       	pop	r14
    81f2:	df 90       	pop	r13
    81f4:	cf 90       	pop	r12
    81f6:	bf 90       	pop	r11
    81f8:	af 90       	pop	r10
    81fa:	9f 90       	pop	r9
    81fc:	8f 90       	pop	r8
    81fe:	7f 90       	pop	r7
    8200:	6f 90       	pop	r6
    8202:	5f 90       	pop	r5
    8204:	4f 90       	pop	r4
    8206:	3f 90       	pop	r3
    8208:	2f 90       	pop	r2
    820a:	08 95       	ret

0000820c <_Z9DrawRadiohh>:
//
// Service Functions
//

void DrawRadio(const uint8_t X, const uint8_t Y)
{
    820c:	7f 92       	push	r7
    820e:	8f 92       	push	r8
    8210:	9f 92       	push	r9
    8212:	af 92       	push	r10
    8214:	bf 92       	push	r11
    8216:	cf 92       	push	r12
    8218:	df 92       	push	r13
    821a:	ef 92       	push	r14
    821c:	ff 92       	push	r15
    821e:	0f 93       	push	r16
    8220:	1f 93       	push	r17
    8222:	cf 93       	push	r28
    8224:	df 93       	push	r29
    8226:	78 2e       	mov	r7, r24
    8228:	f6 2e       	mov	r15, r22
    uint8_t PosX1 = X, PosX2 = X;
    822a:	b8 2e       	mov	r11, r24

    const uint8_t Pause  = 2;
    const uint8_t Height = 6;
    const uint8_t EndPos = 160;
    
    for(uint8_t i = 0; i < CurModel.num_ch; ++i)
    822c:	81 2c       	mov	r8, r1
    {
        PosX2 += Pause;
        gfx_DrawLine(PosX1, Y, PosX2, Y, COLOR_FRONT);
        
        PosX1 = PosX2;
        gfx_DrawLine(PosX1, Y, PosX2, Y - Height, COLOR_FRONT);
    822e:	5a ef       	ldi	r21, 0xFA	; 250
    8230:	95 2e       	mov	r9, r21
    8232:	96 0e       	add	r9, r22
        
        PosX2 += output[i] / TimerClockPerUSec(100); // Длинна импульса в пикселях
    8234:	68 ec       	ldi	r22, 0xC8	; 200
    8236:	c6 2e       	mov	r12, r22
    8238:	d1 2c       	mov	r13, r1

    const uint8_t Pause  = 2;
    const uint8_t Height = 6;
    const uint8_t EndPos = 160;
    
    for(uint8_t i = 0; i < CurModel.num_ch; ++i)
    823a:	c8 2d       	mov	r28, r8
    823c:	d0 e0       	ldi	r29, 0x00	; 0
    823e:	e0 91 9a 09 	lds	r30, 0x099A
    8242:	ff 27       	eor	r31, r31
    8244:	e7 fd       	sbrc	r30, 7
    8246:	f0 95       	com	r31
    8248:	ce 17       	cp	r28, r30
    824a:	df 07       	cpc	r29, r31
    824c:	64 f5       	brge	.+88     	; 0x82a6 <_Z9DrawRadiohh+0x9a>
    {
        PosX2 += Pause;
    824e:	32 e0       	ldi	r19, 0x02	; 2
    8250:	a3 2e       	mov	r10, r19
    8252:	ab 0c       	add	r10, r11
        gfx_DrawLine(PosX1, Y, PosX2, Y, COLOR_FRONT);
    8254:	e1 2c       	mov	r14, r1
    8256:	01 e0       	ldi	r16, 0x01	; 1
    8258:	10 e0       	ldi	r17, 0x00	; 0
    825a:	2f 2d       	mov	r18, r15
    825c:	4a 2d       	mov	r20, r10
    825e:	6f 2d       	mov	r22, r15
    8260:	8b 2d       	mov	r24, r11
    8262:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
        
        PosX1 = PosX2;
        gfx_DrawLine(PosX1, Y, PosX2, Y - Height, COLOR_FRONT);
    8266:	29 2d       	mov	r18, r9
    8268:	4a 2d       	mov	r20, r10
    826a:	6f 2d       	mov	r22, r15
    826c:	8a 2d       	mov	r24, r10
    826e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
        
        PosX2 += output[i] / TimerClockPerUSec(100); // Длинна импульса в пикселях
    8272:	fe 01       	movw	r30, r28
    8274:	ee 0f       	add	r30, r30
    8276:	ff 1f       	adc	r31, r31
    8278:	e7 59       	subi	r30, 0x97	; 151
    827a:	f6 4f       	sbci	r31, 0xF6	; 246
    827c:	80 81       	ld	r24, Z
    827e:	91 81       	ldd	r25, Z+1	; 0x01
    8280:	b6 01       	movw	r22, r12
    8282:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    8286:	ba 2c       	mov	r11, r10
    8288:	b6 0e       	add	r11, r22
        gfx_DrawLine(PosX1, Y - Height, PosX2, Y - Height, COLOR_FRONT);
    828a:	29 2d       	mov	r18, r9
    828c:	4b 2d       	mov	r20, r11
    828e:	69 2d       	mov	r22, r9
    8290:	8a 2d       	mov	r24, r10
    8292:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
        
        PosX1 = PosX2;
        gfx_DrawLine(PosX1, Y - Height, PosX2, Y, COLOR_FRONT);
    8296:	2f 2d       	mov	r18, r15
    8298:	4b 2d       	mov	r20, r11
    829a:	69 2d       	mov	r22, r9
    829c:	8b 2d       	mov	r24, r11
    829e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>

    const uint8_t Pause  = 2;
    const uint8_t Height = 6;
    const uint8_t EndPos = 160;
    
    for(uint8_t i = 0; i < CurModel.num_ch; ++i)
    82a2:	83 94       	inc	r8
    82a4:	ca cf       	rjmp	.-108    	; 0x823a <_Z9DrawRadiohh+0x2e>
        PosX1 = PosX2;
        gfx_DrawLine(PosX1, Y - Height, PosX2, Y, COLOR_FRONT);
    }

    PosX1 = PosX2;
    PosX2 = X + EndPos;
    82a6:	40 ea       	ldi	r20, 0xA0	; 160
    82a8:	47 0d       	add	r20, r7

    gfx_DrawLine(PosX1, Y, PosX2, Y, COLOR_FRONT);
    82aa:	e1 2c       	mov	r14, r1
    82ac:	01 e0       	ldi	r16, 0x01	; 1
    82ae:	10 e0       	ldi	r17, 0x00	; 0
    82b0:	2f 2d       	mov	r18, r15
    82b2:	6f 2d       	mov	r22, r15
    82b4:	8b 2d       	mov	r24, r11
    82b6:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z12gfx_DrawLinehhhh8ColorIdxb>
}
    82ba:	df 91       	pop	r29
    82bc:	cf 91       	pop	r28
    82be:	1f 91       	pop	r17
    82c0:	0f 91       	pop	r16
    82c2:	ff 90       	pop	r15
    82c4:	ef 90       	pop	r14
    82c6:	df 90       	pop	r13
    82c8:	cf 90       	pop	r12
    82ca:	bf 90       	pop	r11
    82cc:	af 90       	pop	r10
    82ce:	9f 90       	pop	r9
    82d0:	8f 90       	pop	r8
    82d2:	7f 90       	pop	r7
    82d4:	08 95       	ret

000082d6 <_Z10MainScreenv>:
        gfx_DrawLine(tr[3] - 2, TRIM3_Y - 5, tr[3] + 2, TRIM3_Y - 5, COLOR_FRONT);
    }
}

void MainScreen()
{
    82d6:	8f 92       	push	r8
    82d8:	9f 92       	push	r9
    82da:	af 92       	push	r10
    82dc:	bf 92       	push	r11
    82de:	cf 92       	push	r12
    82e0:	df 92       	push	r13
    82e2:	ef 92       	push	r14
    82e4:	ff 92       	push	r15
    82e6:	0f 93       	push	r16
    82e8:	1f 93       	push	r17
    82ea:	cf 93       	push	r28
    82ec:	df 93       	push	r29
    82ee:	cd b7       	in	r28, 0x3d	; 61
    82f0:	de b7       	in	r29, 0x3e	; 62
    82f2:	ef 97       	sbiw	r28, 0x3f	; 63
    82f4:	0f b6       	in	r0, 0x3f	; 63
    82f6:	f8 94       	cli
    82f8:	de bf       	out	0x3e, r29	; 62
    82fa:	0f be       	out	0x3f, r0	; 63
    82fc:	cd bf       	out	0x3d, r28	; 61
    char str[32];

    gfx_ClearBuf();
    82fe:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <_Z12gfx_ClearBufv>

    // Номер модели
    sprintf(str, "%d", Settings.ModelNum + 1);
    8302:	80 91 81 0c 	lds	r24, 0x0C81
    8306:	99 27       	eor	r25, r25
    8308:	87 fd       	sbrc	r24, 7
    830a:	90 95       	com	r25
    830c:	01 96       	adiw	r24, 0x01	; 1
    830e:	9f 93       	push	r25
    8310:	8f 93       	push	r24
    8312:	88 e6       	ldi	r24, 0x68	; 104
    8314:	98 e0       	ldi	r25, 0x08	; 8
    8316:	9f 93       	push	r25
    8318:	8f 93       	push	r24
    831a:	ae 01       	movw	r20, r28
    831c:	4f 5f       	subi	r20, 0xFF	; 255
    831e:	5f 4f       	sbci	r21, 0xFF	; 255
    8320:	5a 01       	movw	r10, r20
    8322:	bf 92       	push	r11
    8324:	4f 93       	push	r20
    8326:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    gfx_PrintString(2, 2, str, COLOR_FRONT, Font_8x12);
    832a:	e1 2c       	mov	r14, r1
    832c:	f1 2c       	mov	r15, r1
    832e:	04 ec       	ldi	r16, 0xC4	; 196
    8330:	1c e0       	ldi	r17, 0x0C	; 12
    8332:	21 e0       	ldi	r18, 0x01	; 1
    8334:	30 e0       	ldi	r19, 0x00	; 0
    8336:	a5 01       	movw	r20, r10
    8338:	62 e0       	ldi	r22, 0x02	; 2
    833a:	82 e0       	ldi	r24, 0x02	; 2
    833c:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    
    if(CurModel.type == TYPE_HELI)
    8340:	0f 90       	pop	r0
    8342:	0f 90       	pop	r0
    8344:	0f 90       	pop	r0
    8346:	0f 90       	pop	r0
    8348:	0f 90       	pop	r0
    834a:	0f 90       	pop	r0
    834c:	80 91 94 09 	lds	r24, 0x0994
    8350:	81 30       	cpi	r24, 0x01	; 1
    8352:	81 f4       	brne	.+32     	; 0x8374 <_Z10MainScreenv+0x9e>
    {
        // Значек верта
        gfx_PrintChar(12, 5, 125, COLOR_FRONT, Font_8x8);
    8354:	0a ec       	ldi	r16, 0xCA	; 202
    8356:	1c e0       	ldi	r17, 0x0C	; 12
    8358:	21 e0       	ldi	r18, 0x01	; 1
    835a:	30 e0       	ldi	r19, 0x00	; 0
    835c:	4d e7       	ldi	r20, 0x7D	; 125
    835e:	65 e0       	ldi	r22, 0x05	; 5
    8360:	8c e0       	ldi	r24, 0x0C	; 12
    8362:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
        gfx_PrintChar(20, 5, 126, COLOR_FRONT, Font_8x8);
    8366:	21 e0       	ldi	r18, 0x01	; 1
    8368:	30 e0       	ldi	r19, 0x00	; 0
    836a:	4e e7       	ldi	r20, 0x7E	; 126
    836c:	65 e0       	ldi	r22, 0x05	; 5
    836e:	84 e1       	ldi	r24, 0x14	; 20
    8370:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
    }
    if(CurModel.type == TYPE_PLANE)
    8374:	80 91 94 09 	lds	r24, 0x0994
    8378:	81 11       	cpse	r24, r1
    837a:	10 c0       	rjmp	.+32     	; 0x839c <_Z10MainScreenv+0xc6>
    {
        // Значек самолета
        gfx_PrintChar(12, 5, 127, COLOR_FRONT, Font_8x8);
    837c:	0a ec       	ldi	r16, 0xCA	; 202
    837e:	1c e0       	ldi	r17, 0x0C	; 12
    8380:	21 e0       	ldi	r18, 0x01	; 1
    8382:	30 e0       	ldi	r19, 0x00	; 0
    8384:	4f e7       	ldi	r20, 0x7F	; 127
    8386:	65 e0       	ldi	r22, 0x05	; 5
    8388:	8c e0       	ldi	r24, 0x0C	; 12
    838a:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
        gfx_PrintChar(20, 5, 128, COLOR_FRONT, Font_8x8);
    838e:	21 e0       	ldi	r18, 0x01	; 1
    8390:	30 e0       	ldi	r19, 0x00	; 0
    8392:	40 e8       	ldi	r20, 0x80	; 128
    8394:	65 e0       	ldi	r22, 0x05	; 5
    8396:	84 e1       	ldi	r24, 0x14	; 20
    8398:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
    }

    // Название модели
    gfx_PrintString(32, 2, CurModel.name, COLOR_FRONT, Font_8x12);
    839c:	e1 2c       	mov	r14, r1
    839e:	f1 2c       	mov	r15, r1
    83a0:	04 ec       	ldi	r16, 0xC4	; 196
    83a2:	1c e0       	ldi	r17, 0x0C	; 12
    83a4:	21 e0       	ldi	r18, 0x01	; 1
    83a6:	30 e0       	ldi	r19, 0x00	; 0
    83a8:	47 e8       	ldi	r20, 0x87	; 135
    83aa:	59 e0       	ldi	r21, 0x09	; 9
    83ac:	62 e0       	ldi	r22, 0x02	; 2
    83ae:	80 e2       	ldi	r24, 0x20	; 32
    83b0:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>

    if(Cut_enable)
    83b4:	80 91 66 09 	lds	r24, 0x0966
    83b8:	88 23       	and	r24, r24
    83ba:	f1 f0       	breq	.+60     	; 0x83f8 <_Z10MainScreenv+0x122>
    {
        // Значек зачеркнутого двигателя
        gfx_PrintChar(90, 1, 129, COLOR_FRONT, Font_8x8);
    83bc:	0a ec       	ldi	r16, 0xCA	; 202
    83be:	1c e0       	ldi	r17, 0x0C	; 12
    83c0:	21 e0       	ldi	r18, 0x01	; 1
    83c2:	30 e0       	ldi	r19, 0x00	; 0
    83c4:	41 e8       	ldi	r20, 0x81	; 129
    83c6:	61 e0       	ldi	r22, 0x01	; 1
    83c8:	8a e5       	ldi	r24, 0x5A	; 90
    83ca:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
        gfx_PrintChar(98, 1, 130, COLOR_FRONT, Font_8x8);
    83ce:	21 e0       	ldi	r18, 0x01	; 1
    83d0:	30 e0       	ldi	r19, 0x00	; 0
    83d2:	42 e8       	ldi	r20, 0x82	; 130
    83d4:	61 e0       	ldi	r22, 0x01	; 1
    83d6:	82 e6       	ldi	r24, 0x62	; 98
    83d8:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
        gfx_PrintChar(90, 9, 131, COLOR_FRONT, Font_8x8);
    83dc:	21 e0       	ldi	r18, 0x01	; 1
    83de:	30 e0       	ldi	r19, 0x00	; 0
    83e0:	43 e8       	ldi	r20, 0x83	; 131
    83e2:	69 e0       	ldi	r22, 0x09	; 9
    83e4:	8a e5       	ldi	r24, 0x5A	; 90
    83e6:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
        gfx_PrintChar(98, 9, 132, COLOR_FRONT, Font_8x8);
    83ea:	21 e0       	ldi	r18, 0x01	; 1
    83ec:	30 e0       	ldi	r19, 0x00	; 0
    83ee:	44 e8       	ldi	r20, 0x84	; 132
    83f0:	69 e0       	ldi	r22, 0x09	; 9
    83f2:	82 e6       	ldi	r24, 0x62	; 98
    83f4:	0e 94 24 20 	call	0x4048	; 0x4048 <_Z13gfx_PrintCharhhc8ColorIdxRK11FontProfile>
    }

    // Draw battery status
    int16_t U_bat = GetBatteryStatus();
    83f8:	0e 94 3a 2b 	call	0x5674	; 0x5674 <_Z16GetBatteryStatusv>
    sprintf(str, "%2i.%02iV", U_bat / 100, U_bat % 100);
    83fc:	64 e6       	ldi	r22, 0x64	; 100
    83fe:	70 e0       	ldi	r23, 0x00	; 0
    8400:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    8404:	9f 93       	push	r25
    8406:	8f 93       	push	r24
    8408:	7f 93       	push	r23
    840a:	6f 93       	push	r22
    840c:	84 e1       	ldi	r24, 0x14	; 20
    840e:	99 e0       	ldi	r25, 0x09	; 9
    8410:	9f 93       	push	r25
    8412:	8f 93       	push	r24
    8414:	bf 92       	push	r11
    8416:	af 92       	push	r10
    8418:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    
    const uint8_t BatWidth  = 7 * Font_4x6.W + 3;
    841c:	d0 90 d6 0c 	lds	r13, 0x0CD6
    8420:	87 e0       	ldi	r24, 0x07	; 7
    8422:	d8 9e       	mul	r13, r24
    8424:	d0 2c       	mov	r13, r0
    8426:	11 24       	eor	r1, r1
    const uint8_t BatHeight = Font_4x6.H + 3;
    8428:	90 91 d7 0c 	lds	r25, 0x0CD7
    842c:	9d 5f       	subi	r25, 0xFD	; 253
    gfx_DrawRectangle(TFT_ScreenWidth - BatWidth, 1, TFT_ScreenWidth - 2, BatHeight, COLOR_FRONT);
    842e:	e1 2c       	mov	r14, r1
    8430:	01 e0       	ldi	r16, 0x01	; 1
    8432:	10 e0       	ldi	r17, 0x00	; 0
    8434:	29 2f       	mov	r18, r25
    8436:	4e e9       	ldi	r20, 0x9E	; 158
    8438:	61 e0       	ldi	r22, 0x01	; 1
    843a:	8d e9       	ldi	r24, 0x9D	; 157
    843c:	8d 19       	sub	r24, r13
    843e:	9f af       	std	Y+63, r25	; 0x3f
    8440:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
    gfx_DrawRectangle(TFT_ScreenWidth - BatWidth - 2, 1 + div2(BatHeight) - 2, TFT_ScreenWidth - BatWidth - 1, 1 + div2(BatHeight) + 2, COLOR_FRONT);
    8444:	9f ad       	ldd	r25, Y+63	; 0x3f
    8446:	69 2f       	mov	r22, r25
    8448:	70 e0       	ldi	r23, 0x00	; 0
    844a:	75 95       	asr	r23
    844c:	67 95       	ror	r22
    844e:	23 e0       	ldi	r18, 0x03	; 3
    8450:	26 0f       	add	r18, r22
    8452:	4c e9       	ldi	r20, 0x9C	; 156
    8454:	4d 19       	sub	r20, r13
    8456:	61 50       	subi	r22, 0x01	; 1
    8458:	8b e9       	ldi	r24, 0x9B	; 155
    845a:	8d 19       	sub	r24, r13
    845c:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <_Z17gfx_DrawRectanglehhhh8ColorIdxb>
    gfx_PrintString(TFT_ScreenWidth - BatWidth + 2, 3, str, COLOR_FRONT, Font_4x6);
    8460:	e1 2c       	mov	r14, r1
    8462:	f1 2c       	mov	r15, r1
    8464:	06 ed       	ldi	r16, 0xD6	; 214
    8466:	1c e0       	ldi	r17, 0x0C	; 12
    8468:	21 e0       	ldi	r18, 0x01	; 1
    846a:	30 e0       	ldi	r19, 0x00	; 0
    846c:	a5 01       	movw	r20, r10
    846e:	63 e0       	ldi	r22, 0x03	; 3
    8470:	8f e9       	ldi	r24, 0x9F	; 159
    8472:	8d 19       	sub	r24, r13
    8474:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>


    // Print fly mode
    gfx_PrintString(2, Font_8x12.H + 4, CurModel.Mode[FLY_MODE].name, COLOR_FRONT, Font_8x8);
    8478:	40 91 68 09 	lds	r20, 0x0968
    847c:	26 ef       	ldi	r18, 0xF6	; 246
    847e:	42 03       	mulsu	r20, r18
    8480:	a0 01       	movw	r20, r0
    8482:	11 24       	eor	r1, r1
    8484:	45 56       	subi	r20, 0x65	; 101
    8486:	56 4f       	sbci	r21, 0xF6	; 246
    8488:	60 91 c5 0c 	lds	r22, 0x0CC5
    848c:	6c 5f       	subi	r22, 0xFC	; 252
    848e:	0a ec       	ldi	r16, 0xCA	; 202
    8490:	1c e0       	ldi	r17, 0x0C	; 12
    8492:	21 e0       	ldi	r18, 0x01	; 1
    8494:	30 e0       	ldi	r19, 0x00	; 0
    8496:	82 e0       	ldi	r24, 0x02	; 2
    8498:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>

    // Draw timer
    const int16_t t    = GetTimerValue();
    849c:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <_Z13GetTimerValuev>
    84a0:	8c 01       	movw	r16, r24
    const int16_t subt = GetTimerSubValue();
    84a2:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <_Z16GetTimerSubValuev>
    min[1] = t / 60 % 10; // Минуты - младший разряд
    sec[0] = t % 60 / 10; // Секунды - старший разряд
    sec[1] = t % 10;      // Секунды - младший разряд
    ms     = subt / 100;  // Миллисекунды

    const uint8_t TimerPosX = ((TFT_ScreenWidth - 7 * Font_12x16.W) / 2);
    84a6:	20 91 be 0c 	lds	r18, 0x0CBE
    84aa:	49 ef       	ldi	r20, 0xF9	; 249
    84ac:	42 03       	mulsu	r20, r18
    84ae:	90 01       	movw	r18, r0
    84b0:	11 24       	eor	r1, r1
    84b2:	20 56       	subi	r18, 0x60	; 96
    84b4:	3f 4f       	sbci	r19, 0xFF	; 255
    84b6:	0f b6       	in	r0, 0x3f	; 63
    84b8:	f8 94       	cli
    84ba:	de bf       	out	0x3e, r29	; 62
    84bc:	0f be       	out	0x3f, r0	; 63
    84be:	cd bf       	out	0x3d, r28	; 61
    84c0:	37 ff       	sbrs	r19, 7
    84c2:	02 c0       	rjmp	.+4      	; 0x84c8 <_Z10MainScreenv+0x1f2>
    84c4:	2f 5f       	subi	r18, 0xFF	; 255
    84c6:	3f 4f       	sbci	r19, 0xFF	; 255
    84c8:	49 01       	movw	r8, r18
    84ca:	95 94       	asr	r9
    84cc:	87 94       	ror	r8
    
    min[0] = t / 600;     // Минуты - старший разряд
    min[1] = t / 60 % 10; // Минуты - младший разряд
    sec[0] = t % 60 / 10; // Секунды - старший разряд
    sec[1] = t % 10;      // Секунды - младший разряд
    ms     = subt / 100;  // Миллисекунды
    84ce:	64 e6       	ldi	r22, 0x64	; 100
    84d0:	70 e0       	ldi	r23, 0x00	; 0
    84d2:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>

    const uint8_t TimerPosX = ((TFT_ScreenWidth - 7 * Font_12x16.W) / 2);
    const uint8_t TimerPosY = (TFT_ScreenHeight - 30);

    sprintf(str, "%d%d:%d%d.%d", min[0], min[1], sec[0], sec[1], ms);
    84d6:	77 27       	eor	r23, r23
    84d8:	67 fd       	sbrc	r22, 7
    84da:	70 95       	com	r23
    84dc:	7f 93       	push	r23
    84de:	6f 93       	push	r22
    int8_t min[2], sec[2], ms;
    
    min[0] = t / 600;     // Минуты - старший разряд
    min[1] = t / 60 % 10; // Минуты - младший разряд
    sec[0] = t % 60 / 10; // Секунды - старший разряд
    sec[1] = t % 10;      // Секунды - младший разряд
    84e0:	ea e0       	ldi	r30, 0x0A	; 10
    84e2:	ce 2e       	mov	r12, r30
    84e4:	d1 2c       	mov	r13, r1
    84e6:	c8 01       	movw	r24, r16
    84e8:	b6 01       	movw	r22, r12
    84ea:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    ms     = subt / 100;  // Миллисекунды

    const uint8_t TimerPosX = ((TFT_ScreenWidth - 7 * Font_12x16.W) / 2);
    const uint8_t TimerPosY = (TFT_ScreenHeight - 30);

    sprintf(str, "%d%d:%d%d.%d", min[0], min[1], sec[0], sec[1], ms);
    84ee:	9f 93       	push	r25
    84f0:	8f 93       	push	r24
    
    int8_t min[2], sec[2], ms;
    
    min[0] = t / 600;     // Минуты - старший разряд
    min[1] = t / 60 % 10; // Минуты - младший разряд
    sec[0] = t % 60 / 10; // Секунды - старший разряд
    84f2:	c8 01       	movw	r24, r16
    84f4:	6c e3       	ldi	r22, 0x3C	; 60
    84f6:	70 e0       	ldi	r23, 0x00	; 0
    84f8:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    84fc:	9b 01       	movw	r18, r22
    84fe:	b6 01       	movw	r22, r12
    8500:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    ms     = subt / 100;  // Миллисекунды

    const uint8_t TimerPosX = ((TFT_ScreenWidth - 7 * Font_12x16.W) / 2);
    const uint8_t TimerPosY = (TFT_ScreenHeight - 30);

    sprintf(str, "%d%d:%d%d.%d", min[0], min[1], sec[0], sec[1], ms);
    8504:	7f 93       	push	r23
    8506:	6f 93       	push	r22
    const int16_t subt = GetTimerSubValue();
    
    int8_t min[2], sec[2], ms;
    
    min[0] = t / 600;     // Минуты - старший разряд
    min[1] = t / 60 % 10; // Минуты - младший разряд
    8508:	c9 01       	movw	r24, r18
    850a:	b6 01       	movw	r22, r12
    850c:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    ms     = subt / 100;  // Миллисекунды

    const uint8_t TimerPosX = ((TFT_ScreenWidth - 7 * Font_12x16.W) / 2);
    const uint8_t TimerPosY = (TFT_ScreenHeight - 30);

    sprintf(str, "%d%d:%d%d.%d", min[0], min[1], sec[0], sec[1], ms);
    8510:	9f 93       	push	r25
    8512:	8f 93       	push	r24
    const int16_t t    = GetTimerValue();
    const int16_t subt = GetTimerSubValue();
    
    int8_t min[2], sec[2], ms;
    
    min[0] = t / 600;     // Минуты - старший разряд
    8514:	c8 01       	movw	r24, r16
    8516:	68 e5       	ldi	r22, 0x58	; 88
    8518:	72 e0       	ldi	r23, 0x02	; 2
    851a:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    ms     = subt / 100;  // Миллисекунды

    const uint8_t TimerPosX = ((TFT_ScreenWidth - 7 * Font_12x16.W) / 2);
    const uint8_t TimerPosY = (TFT_ScreenHeight - 30);

    sprintf(str, "%d%d:%d%d.%d", min[0], min[1], sec[0], sec[1], ms);
    851e:	7f 93       	push	r23
    8520:	6f 93       	push	r22
    8522:	4e e1       	ldi	r20, 0x1E	; 30
    8524:	59 e0       	ldi	r21, 0x09	; 9
    8526:	5f 93       	push	r21
    8528:	4f 93       	push	r20
    852a:	bf 92       	push	r11
    852c:	af 92       	push	r10
    852e:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    gfx_PrintString(TimerPosX, TimerPosY, str, COLOR_FRONT, Font_12x16);
    8532:	e1 2c       	mov	r14, r1
    8534:	f1 2c       	mov	r15, r1
    8536:	0e eb       	ldi	r16, 0xBE	; 190
    8538:	1c e0       	ldi	r17, 0x0C	; 12
    853a:	21 e0       	ldi	r18, 0x01	; 1
    853c:	30 e0       	ldi	r19, 0x00	; 0
    853e:	a5 01       	movw	r20, r10
    8540:	62 e6       	ldi	r22, 0x62	; 98
    8542:	88 2d       	mov	r24, r8
    8544:	0e 94 6f 20 	call	0x40de	; 0x40de <_Z15gfx_PrintStringhhPKc8ColorIdxRK11FontProfile5Align>
    
    enum { Stick_Min = 0, Stick_Max, Stick_Val, StickGroup_Count };
    
    int16_t Sticks[StickGroup_Count][5];
    Sticks[Stick_Min][CTRL_AIL]  = OUTPUT_MIN / 10;
    8548:	80 91 86 04 	lds	r24, 0x0486
    854c:	90 91 87 04 	lds	r25, 0x0487
    8550:	b6 01       	movw	r22, r12
    8552:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    8556:	7a a3       	std	Y+34, r23	; 0x22
    8558:	69 a3       	std	Y+33, r22	; 0x21
    Sticks[Stick_Min][CTRL_ELE]  = OUTPUT_MIN / 10;
    855a:	7c a3       	std	Y+36, r23	; 0x24
    855c:	6b a3       	std	Y+35, r22	; 0x23
    Sticks[Stick_Min][CTRL_THR]  = OUTPUT_MIN / 10;
    855e:	7e a3       	std	Y+38, r23	; 0x26
    8560:	6d a3       	std	Y+37, r22	; 0x25
    Sticks[Stick_Min][CTRL_RUD]  = OUTPUT_MIN / 10;
    8562:	78 a7       	std	Y+40, r23	; 0x28
    8564:	6f a3       	std	Y+39, r22	; 0x27
    Sticks[Stick_Min][CTRL_AUX1] = OUTPUT_MIN / 10;
    8566:	7a a7       	std	Y+42, r23	; 0x2a
    8568:	69 a7       	std	Y+41, r22	; 0x29

    Sticks[Stick_Max][CTRL_AIL]  = OUTPUT_MAX / 10;
    856a:	80 91 84 04 	lds	r24, 0x0484
    856e:	90 91 85 04 	lds	r25, 0x0485
    8572:	b6 01       	movw	r22, r12
    8574:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    8578:	7c a7       	std	Y+44, r23	; 0x2c
    857a:	6b a7       	std	Y+43, r22	; 0x2b
    Sticks[Stick_Max][CTRL_ELE]  = OUTPUT_MAX / 10;
    857c:	7e a7       	std	Y+46, r23	; 0x2e
    857e:	6d a7       	std	Y+45, r22	; 0x2d
    Sticks[Stick_Max][CTRL_THR]  = OUTPUT_MAX / 10;
    8580:	78 ab       	std	Y+48, r23	; 0x30
    8582:	6f a7       	std	Y+47, r22	; 0x2f
    Sticks[Stick_Max][CTRL_RUD]  = OUTPUT_MAX / 10;
    8584:	7a ab       	std	Y+50, r23	; 0x32
    8586:	69 ab       	std	Y+49, r22	; 0x31
    Sticks[Stick_Max][CTRL_AUX1] = OUTPUT_MAX / 10;
    8588:	7c ab       	std	Y+52, r23	; 0x34
    858a:	6b ab       	std	Y+51, r22	; 0x33

    Sticks[Stick_Val][CTRL_AIL]  = output[CTRL_AIL] / 10;
    858c:	80 91 69 09 	lds	r24, 0x0969
    8590:	90 91 6a 09 	lds	r25, 0x096A
    8594:	b6 01       	movw	r22, r12
    8596:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    859a:	7e ab       	std	Y+54, r23	; 0x36
    859c:	6d ab       	std	Y+53, r22	; 0x35
    Sticks[Stick_Val][CTRL_ELE]  = output[CTRL_ELE] / 10;
    859e:	80 91 6b 09 	lds	r24, 0x096B
    85a2:	90 91 6c 09 	lds	r25, 0x096C
    85a6:	b6 01       	movw	r22, r12
    85a8:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    85ac:	78 af       	std	Y+56, r23	; 0x38
    85ae:	6f ab       	std	Y+55, r22	; 0x37
    Sticks[Stick_Val][CTRL_THR]  = output[CTRL_THR] / 10;
    85b0:	80 91 6d 09 	lds	r24, 0x096D
    85b4:	90 91 6e 09 	lds	r25, 0x096E
    85b8:	b6 01       	movw	r22, r12
    85ba:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    85be:	7a af       	std	Y+58, r23	; 0x3a
    85c0:	69 af       	std	Y+57, r22	; 0x39
    Sticks[Stick_Val][CTRL_RUD]  = output[CTRL_RUD] / 10;
    85c2:	80 91 6f 09 	lds	r24, 0x096F
    85c6:	90 91 70 09 	lds	r25, 0x0970
    85ca:	b6 01       	movw	r22, r12
    85cc:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    85d0:	7c af       	std	Y+60, r23	; 0x3c
    85d2:	6b af       	std	Y+59, r22	; 0x3b
    Sticks[Stick_Val][CTRL_AUX1] = output[CTRL_AUX1] / 10;
    85d4:	80 91 71 09 	lds	r24, 0x0971
    85d8:	90 91 72 09 	lds	r25, 0x0972
    85dc:	b6 01       	movw	r22, r12
    85de:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
    85e2:	7e af       	std	Y+62, r23	; 0x3e
    85e4:	6d af       	std	Y+61, r22	; 0x3d
    
    DrawSticks(Sticks[Stick_Min], Sticks[Stick_Max], Sticks[Stick_Val], true);
    85e6:	21 e0       	ldi	r18, 0x01	; 1
    85e8:	ae 01       	movw	r20, r28
    85ea:	4b 5c       	subi	r20, 0xCB	; 203
    85ec:	5f 4f       	sbci	r21, 0xFF	; 255
    85ee:	be 01       	movw	r22, r28
    85f0:	65 5d       	subi	r22, 0xD5	; 213
    85f2:	7f 4f       	sbci	r23, 0xFF	; 255
    85f4:	ce 01       	movw	r24, r28
    85f6:	81 96       	adiw	r24, 0x21	; 33
    85f8:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <_Z10DrawSticksPiS_S_b>

    DrawRadio(6, TFT_ScreenHeight - 6);
    85fc:	6a e7       	ldi	r22, 0x7A	; 122
    85fe:	86 e0       	ldi	r24, 0x06	; 6
    8600:	0e 94 06 41 	call	0x820c	; 0x820c <_Z9DrawRadiohh>

    gfx_Refresh();
    8604:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <_Z11gfx_Refreshv>
    8608:	0f b6       	in	r0, 0x3f	; 63
    860a:	f8 94       	cli
    860c:	de bf       	out	0x3e, r29	; 62
    860e:	0f be       	out	0x3f, r0	; 63
    8610:	cd bf       	out	0x3d, r28	; 61
}
    8612:	ef 96       	adiw	r28, 0x3f	; 63
    8614:	0f b6       	in	r0, 0x3f	; 63
    8616:	f8 94       	cli
    8618:	de bf       	out	0x3e, r29	; 62
    861a:	0f be       	out	0x3f, r0	; 63
    861c:	cd bf       	out	0x3d, r28	; 61
    861e:	df 91       	pop	r29
    8620:	cf 91       	pop	r28
    8622:	1f 91       	pop	r17
    8624:	0f 91       	pop	r16
    8626:	ff 90       	pop	r15
    8628:	ef 90       	pop	r14
    862a:	df 90       	pop	r13
    862c:	cf 90       	pop	r12
    862e:	bf 90       	pop	r11
    8630:	af 90       	pop	r10
    8632:	9f 90       	pop	r9
    8634:	8f 90       	pop	r8
    8636:	08 95       	ret

00008638 <_Z22ControlsRateGetPointerah>:
}


uint8_t* ControlsRateGetPointer(int8_t Control, uint8_t param)
{
    switch(param)
    8638:	63 30       	cpi	r22, 0x03	; 3
    863a:	c1 f1       	breq	.+112    	; 0x86ac <_Z22ControlsRateGetPointerah+0x74>
    863c:	c8 f4       	brcc	.+50     	; 0x8670 <_Z22ControlsRateGetPointerah+0x38>
    863e:	61 30       	cpi	r22, 0x01	; 1
    8640:	39 f1       	breq	.+78     	; 0x8690 <_Z22ControlsRateGetPointerah+0x58>
    8642:	62 30       	cpi	r22, 0x02	; 2
    8644:	09 f0       	breq	.+2      	; 0x8648 <_Z22ControlsRateGetPointerah+0x10>
    8646:	40 c0       	rjmp	.+128    	; 0x86c8 <_Z22ControlsRateGetPointerah+0x90>
    {
        case CTRLS_MINR:
            return &CurModel.Mode[FLY_MODE].Control[Control].minRates;
    8648:	99 27       	eor	r25, r25
    864a:	87 fd       	sbrc	r24, 7
    864c:	90 95       	com	r25
    864e:	01 96       	adiw	r24, 0x01	; 1
    8650:	4d e0       	ldi	r20, 0x0D	; 13
    8652:	48 9f       	mul	r20, r24
    8654:	90 01       	movw	r18, r0
    8656:	49 9f       	mul	r20, r25
    8658:	30 0d       	add	r19, r0
    865a:	11 24       	eor	r1, r1
    865c:	40 91 68 09 	lds	r20, 0x0968
    8660:	56 ef       	ldi	r21, 0xF6	; 246
    8662:	45 03       	mulsu	r20, r21
    8664:	20 0d       	add	r18, r0
    8666:	31 1d       	adc	r19, r1
    8668:	11 24       	eor	r1, r1
    866a:	25 56       	subi	r18, 0x65	; 101
    866c:	36 4f       	sbci	r19, 0xF6	; 246
    866e:	2e c0       	rjmp	.+92     	; 0x86cc <_Z22ControlsRateGetPointerah+0x94>
}


uint8_t* ControlsRateGetPointer(int8_t Control, uint8_t param)
{
    switch(param)
    8670:	66 30       	cpi	r22, 0x06	; 6
    8672:	50 f5       	brcc	.+84     	; 0x86c8 <_Z22ControlsRateGetPointerah+0x90>
        case CTRLS_MAXR:
            return &CurModel.Mode[FLY_MODE].Control[Control].maxRates;

        case CTRLS_MINDR:
        case CTRLS_TCUT:
            return &CurModel.Mode[FLY_MODE].Control[Control].minDRates;
    8674:	20 91 68 09 	lds	r18, 0x0968
    8678:	46 ef       	ldi	r20, 0xF6	; 246
    867a:	24 03       	mulsu	r18, r20
    867c:	90 01       	movw	r18, r0
    867e:	11 24       	eor	r1, r1
    8680:	5d e0       	ldi	r21, 0x0D	; 13
    8682:	85 02       	muls	r24, r21
    8684:	20 0d       	add	r18, r0
    8686:	31 1d       	adc	r19, r1
    8688:	11 24       	eor	r1, r1
    868a:	26 55       	subi	r18, 0x56	; 86
    868c:	36 4f       	sbci	r19, 0xF6	; 246
    868e:	1e c0       	rjmp	.+60     	; 0x86cc <_Z22ControlsRateGetPointerah+0x94>
    {
        case CTRLS_MINR:
            return &CurModel.Mode[FLY_MODE].Control[Control].minRates;

        case CTRLS_MAXR:
            return &CurModel.Mode[FLY_MODE].Control[Control].maxRates;
    8690:	20 91 68 09 	lds	r18, 0x0968
    8694:	46 ef       	ldi	r20, 0xF6	; 246
    8696:	24 03       	mulsu	r18, r20
    8698:	90 01       	movw	r18, r0
    869a:	11 24       	eor	r1, r1
    869c:	5d e0       	ldi	r21, 0x0D	; 13
    869e:	85 02       	muls	r24, r21
    86a0:	20 0d       	add	r18, r0
    86a2:	31 1d       	adc	r19, r1
    86a4:	11 24       	eor	r1, r1
    86a6:	29 55       	subi	r18, 0x59	; 89
    86a8:	36 4f       	sbci	r19, 0xF6	; 246
    86aa:	10 c0       	rjmp	.+32     	; 0x86cc <_Z22ControlsRateGetPointerah+0x94>
        case CTRLS_MINDR:
        case CTRLS_TCUT:
            return &CurModel.Mode[FLY_MODE].Control[Control].minDRates;

        case CTRLS_MAXDR:
            return &CurModel.Mode[FLY_MODE].Control[Control].maxDRates;
    86ac:	20 91 68 09 	lds	r18, 0x0968
    86b0:	46 ef       	ldi	r20, 0xF6	; 246
    86b2:	24 03       	mulsu	r18, r20
    86b4:	90 01       	movw	r18, r0
    86b6:	11 24       	eor	r1, r1
    86b8:	5d e0       	ldi	r21, 0x0D	; 13
    86ba:	85 02       	muls	r24, r21
    86bc:	20 0d       	add	r18, r0
    86be:	31 1d       	adc	r19, r1
    86c0:	11 24       	eor	r1, r1
    86c2:	27 55       	subi	r18, 0x57	; 87
    86c4:	36 4f       	sbci	r19, 0xF6	; 246
    86c6:	02 c0       	rjmp	.+4      	; 0x86cc <_Z22ControlsRateGetPointerah+0x94>
    }

    return NULL;
    86c8:	20 e0       	ldi	r18, 0x00	; 0
    86ca:	30 e0       	ldi	r19, 0x00	; 0
}
    86cc:	c9 01       	movw	r24, r18
    86ce:	08 95       	ret

000086d0 <_Z18ControlsRateGetStrPca>:

char* ControlsRateGetStr(char* Buf, int8_t AddParam)
{
    86d0:	cf 93       	push	r28
    86d2:	df 93       	push	r29
    86d4:	d8 2f       	mov	r29, r24
    86d6:	c9 2f       	mov	r28, r25
    uint8_t* val = ControlsRateGetPointer(CurrentControl, AddParam);
    86d8:	80 91 36 0d 	lds	r24, 0x0D36
    86dc:	0e 94 1c 43 	call	0x8638	; 0x8638 <_Z22ControlsRateGetPointerah>

    if(val)
    86e0:	00 97       	sbiw	r24, 0x00	; 0
    86e2:	99 f0       	breq	.+38     	; 0x870a <_Z18ControlsRateGetStrPca+0x3a>
        sprintf(Buf, "%d", *val);
    86e4:	fc 01       	movw	r30, r24
    86e6:	80 81       	ld	r24, Z
    86e8:	1f 92       	push	r1
    86ea:	8f 93       	push	r24
    86ec:	28 e6       	ldi	r18, 0x68	; 104
    86ee:	38 e0       	ldi	r19, 0x08	; 8
    86f0:	3f 93       	push	r19
    86f2:	2f 93       	push	r18
    86f4:	cf 93       	push	r28
    86f6:	df 93       	push	r29
    86f8:	0e 94 ce 48 	call	0x919c	; 0x919c <sprintf>
    86fc:	0f 90       	pop	r0
    86fe:	0f 90       	pop	r0
    8700:	0f 90       	pop	r0
    8702:	0f 90       	pop	r0
    8704:	0f 90       	pop	r0
    8706:	0f 90       	pop	r0
    8708:	06 c0       	rjmp	.+12     	; 0x8716 <_Z18ControlsRateGetStrPca+0x46>
    else
        sprintf(Buf, "ERROR");
    870a:	60 e5       	ldi	r22, 0x50	; 80
    870c:	76 e0       	ldi	r23, 0x06	; 6
    870e:	8d 2f       	mov	r24, r29
    8710:	9c 2f       	mov	r25, r28
    8712:	0e 94 8a 48 	call	0x9114	; 0x9114 <strcpy>
    
    return Buf;
}
    8716:	8d 2f       	mov	r24, r29
    8718:	9c 2f       	mov	r25, r28
    871a:	df 91       	pop	r29
    871c:	cf 91       	pop	r28
    871e:	08 95       	ret

00008720 <_Z15ControlsRateSeta>:


void ControlsRateSet(int8_t AddParam)
{
    8720:	ef 92       	push	r14
    8722:	ff 92       	push	r15
    8724:	0f 93       	push	r16
    EditNumDlg(ControlsRateGetPointer(CurrentControl, AddParam), PTR_UINT8, 0, 150, 100, "Control:");
    8726:	68 2f       	mov	r22, r24
    8728:	80 91 36 0d 	lds	r24, 0x0D36
    872c:	0e 94 1c 43 	call	0x8638	; 0x8638 <_Z22ControlsRateGetPointerah>
    8730:	ab e2       	ldi	r26, 0x2B	; 43
    8732:	ea 2e       	mov	r14, r26
    8734:	a9 e0       	ldi	r26, 0x09	; 9
    8736:	fa 2e       	mov	r15, r26
    8738:	04 e6       	ldi	r16, 0x64	; 100
    873a:	26 e9       	ldi	r18, 0x96	; 150
    873c:	30 e0       	ldi	r19, 0x00	; 0
    873e:	40 e0       	ldi	r20, 0x00	; 0
    8740:	50 e0       	ldi	r21, 0x00	; 0
    8742:	61 e0       	ldi	r22, 0x01	; 1
    8744:	70 e0       	ldi	r23, 0x00	; 0
    8746:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <_Z10EditNumDlgPv11PointerTypeiihPKc>
}
    874a:	0f 91       	pop	r16
    874c:	ff 90       	pop	r15
    874e:	ef 90       	pop	r14
    8750:	08 95       	ret

00008752 <_Z9DummyMenua>:
//
// Main menu handlers
//

void DummyMenu(int8_t AddParam)
{
    8752:	08 95       	ret

00008754 <_Z8MainMenuv>:

}

void MainMenu()
{
    8754:	0f 93       	push	r16
    8756:	1f 93       	push	r17
    8758:	cf 93       	push	r28
    875a:	df 93       	push	r29
    875c:	cd b7       	in	r28, 0x3d	; 61
    875e:	de b7       	in	r29, 0x3e	; 62
    8760:	ab 97       	sbiw	r28, 0x2b	; 43
    8762:	0f b6       	in	r0, 0x3f	; 63
    8764:	f8 94       	cli
    8766:	de bf       	out	0x3e, r29	; 62
    8768:	0f be       	out	0x3f, r0	; 63
    876a:	cd bf       	out	0x3d, r28	; 61
        {"Model",    ModelMenu,    NULL, 0},
        {"Controls", ControlsMenu, NULL, 0},
        {"Channels", ChannelsMenu, NULL, 0},
        {"Timer",    TimerMenu,    NULL, 0},
        {"Options",  OptionsMenu,  NULL, 0}
    };
    876c:	83 e2       	ldi	r24, 0x23	; 35
    876e:	ed e2       	ldi	r30, 0x2D	; 45
    8770:	f6 e0       	ldi	r31, 0x06	; 6
    8772:	de 01       	movw	r26, r28
    8774:	11 96       	adiw	r26, 0x01	; 1
    8776:	01 90       	ld	r0, Z+
    8778:	0d 92       	st	X+, r0
    877a:	8a 95       	dec	r24
    877c:	e1 f7       	brne	.-8      	; 0x8776 <_Z8MainMenuv+0x22>
    
    CMenu Menu("Main", MainMenuItems, ARRAY_SIZE(MainMenuItems), Font_8x8);
    877e:	0a ec       	ldi	r16, 0xCA	; 202
    8780:	1c e0       	ldi	r17, 0x0C	; 12
    8782:	25 e0       	ldi	r18, 0x05	; 5
    8784:	ae 01       	movw	r20, r28
    8786:	4f 5f       	subi	r20, 0xFF	; 255
    8788:	5f 4f       	sbci	r21, 0xFF	; 255
    878a:	64 e3       	ldi	r22, 0x34	; 52
    878c:	79 e0       	ldi	r23, 0x09	; 9
    878e:	ce 01       	movw	r24, r28
    8790:	84 96       	adiw	r24, 0x24	; 36
    8792:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN5CMenuC1EPKcPKNS_4ItemEhRK11FontProfile>
    
    Menu.Run();
    8796:	ce 01       	movw	r24, r28
    8798:	84 96       	adiw	r24, 0x24	; 36
    879a:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_ZN5CMenu3RunEv>
}
    879e:	ab 96       	adiw	r28, 0x2b	; 43
    87a0:	0f b6       	in	r0, 0x3f	; 63
    87a2:	f8 94       	cli
    87a4:	de bf       	out	0x3e, r29	; 62
    87a6:	0f be       	out	0x3f, r0	; 63
    87a8:	cd bf       	out	0x3d, r28	; 61
    87aa:	df 91       	pop	r29
    87ac:	cf 91       	pop	r28
    87ae:	1f 91       	pop	r17
    87b0:	0f 91       	pop	r16
    87b2:	08 95       	ret

000087b4 <_Z13hwr_InitPortsv>:


void hwr_InitPorts()
{
    // PORTA use for menu buttons
    PORTA = 0xFF;
    87b4:	8f ef       	ldi	r24, 0xFF	; 255
    87b6:	82 b9       	out	0x02, r24	; 2
    DDRA  = 0x00;
    87b8:	11 b8       	out	0x01, r1	; 1

    // PORTB.0, PORTB.1, PORTB.2 and PORTB.3 use by SPI in TFT display, Also use for radio OCR1A
    PORTB = 0xFF;
    87ba:	85 b9       	out	0x05, r24	; 5
    DDRB  = 0xFF;
    87bc:	84 b9       	out	0x04, r24	; 4

    // PORTL.0, PORTL.1 and PORTL.2 use as GPIO in TFT display, other pins for trimmers and more
    PORTL = 0xFF;
    87be:	80 93 0b 01 	sts	0x010B, r24
    DDRL  = 0x07;
    87c2:	97 e0       	ldi	r25, 0x07	; 7
    87c4:	90 93 0a 01 	sts	0x010A, r25

    // PORTG.0, PORTG.1, PORTG.2 for trimmers
    PORTG = 0xFF;
    87c8:	84 bb       	out	0x14, r24	; 20
    DDRG  = 0xF8;
    87ca:	98 ef       	ldi	r25, 0xF8	; 248
    87cc:	93 bb       	out	0x13, r25	; 19

    // PORTD.7 for trimmers
    PORTD = 0xFF;
    87ce:	8b b9       	out	0x0b, r24	; 11
    DDRD  = 0xBF;
    87d0:	9f eb       	ldi	r25, 0xBF	; 191
    87d2:	9a b9       	out	0x0a, r25	; 10

    // PORTC For other keys (SW1, SW2, SW3, TCUT and other)
    PORTC = 0xFF;
    87d4:	88 b9       	out	0x08, r24	; 8
    DDRC  = 0x00;
    87d6:	17 b8       	out	0x07, r1	; 7

    // PORTF use in ADC
    PORTF = 0x00;
    87d8:	11 ba       	out	0x11, r1	; 17
    DDRF  = 0x00;
    87da:	10 ba       	out	0x10, r1	; 16

    PORTH = 0xFF;
    87dc:	80 93 02 01 	sts	0x0102, r24
    DDRH  = 0xFF;
    87e0:	80 93 01 01 	sts	0x0101, r24
    87e4:	08 95       	ret

000087e6 <_Z14hwr_InitUSART0m>:
    OCR3A   = F_CPU / 64 / 50;             // Set CTC compare value to 50Hz at 16MHz AVR clock, with a prescaler of 64
    TCCR3B |= ((1 << CS30) | (1 << CS31)); // Start timer at Fcpu/64  
}

void hwr_InitUSART0(uint32_t BaudRate)
{
    87e6:	9b 01       	movw	r18, r22
    87e8:	ac 01       	movw	r20, r24
    // USART initialization
    // with baud rate = 9600bps
    const uint16_t ubrr_value = F_CPU / 16 / BaudRate - 1;
    87ea:	60 e4       	ldi	r22, 0x40	; 64
    87ec:	72 e4       	ldi	r23, 0x42	; 66
    87ee:	8f e0       	ldi	r24, 0x0F	; 15
    87f0:	90 e0       	ldi	r25, 0x00	; 0
    87f2:	0e 94 2c 48 	call	0x9058	; 0x9058 <__udivmodsi4>
    87f6:	21 50       	subi	r18, 0x01	; 1
    87f8:	31 09       	sbc	r19, r1
    UBRR0L = ubrr_value;
    87fa:	20 93 c4 00 	sts	0x00C4, r18
    UBRR0H = ubrr_value >> 8;
    87fe:	30 93 c5 00 	sts	0x00C5, r19

    // Set Frame Format:
    // Asynchronous mode, No Parity, 1 StopBit, char size 8
    UCSR0C = (3 << UCSZ00);
    8802:	86 e0       	ldi	r24, 0x06	; 6
    8804:	80 93 c2 00 	sts	0x00C2, r24

    //Enable The receiver and transmitter
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    8808:	88 e1       	ldi	r24, 0x18	; 24
    880a:	80 93 c1 00 	sts	0x00C1, r24
    880e:	08 95       	ret

00008810 <_Z11hwr_InitADCv>:
void hwr_InitADC()
{
    // ADC initialization
    // ADC Clock frequency: 250 kHz
    // ADC Voltage Reference: Internal 1.1V Voltage Reference with external capacitor at AREF pin
    ADMUX  = ADC_VREF_TYPE;
    8810:	80 e4       	ldi	r24, 0x40	; 64
    8812:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
    8816:	86 e8       	ldi	r24, 0x86	; 134
    8818:	80 93 7a 00 	sts	0x007A, r24
    881c:	08 95       	ret

0000881e <_Z8read_adch>:
}

uint16_t read_adc(uint8_t adc_input)
{
    ADMUX = adc_input | ADC_VREF_TYPE;
    881e:	80 64       	ori	r24, 0x40	; 64
    8820:	80 93 7c 00 	sts	0x007C, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    8824:	85 e3       	ldi	r24, 0x35	; 53
    8826:	8a 95       	dec	r24
    8828:	f1 f7       	brne	.-4      	; 0x8826 <_Z8read_adch+0x8>
    882a:	00 00       	nop
    _delay_us(10);
    ADCSRA |= 0x40; // Start the AD conversion
    882c:	80 91 7a 00 	lds	r24, 0x007A
    8830:	80 64       	ori	r24, 0x40	; 64
    8832:	80 93 7a 00 	sts	0x007A, r24
  
    while ((ADCSRA & 0x10)==0)
    8836:	80 91 7a 00 	lds	r24, 0x007A
    883a:	84 ff       	sbrs	r24, 4
    883c:	fc cf       	rjmp	.-8      	; 0x8836 <_Z8read_adch+0x18>
        ;

    ADCSRA |= 0x10; // Stop
    883e:	80 91 7a 00 	lds	r24, 0x007A
    8842:	80 61       	ori	r24, 0x10	; 16
    8844:	80 93 7a 00 	sts	0x007A, r24
    return ADCW;
    8848:	80 91 78 00 	lds	r24, 0x0078
    884c:	90 91 79 00 	lds	r25, 0x0079
}
    8850:	08 95       	ret

00008852 <_Z17hwr_SetModulation10Modulation>:

void hwr_SetModulation(const Modulation modulation)
{
    switch (modulation)
    8852:	00 97       	sbiw	r24, 0x00	; 0
    8854:	19 f0       	breq	.+6      	; 0x885c <_Z17hwr_SetModulation10Modulation+0xa>
    8856:	01 97       	sbiw	r24, 0x01	; 1
    8858:	29 f0       	breq	.+10     	; 0x8864 <_Z17hwr_SetModulation10Modulation+0x12>
    885a:	08 95       	ret
    {
        case MODUL_PPM:
            TCCR1A |= (1 << COM1A1) | (0 << COM1A0);
    885c:	80 91 80 00 	lds	r24, 0x0080
    8860:	80 68       	ori	r24, 0x80	; 128
    8862:	03 c0       	rjmp	.+6      	; 0x886a <_Z17hwr_SetModulation10Modulation+0x18>
            break;

        case MODUL_IPPM:
            TCCR1A |= (1 << COM1A1) | (1 << COM1A0);
    8864:	80 91 80 00 	lds	r24, 0x0080
    8868:	80 6c       	ori	r24, 0xC0	; 192
    886a:	80 93 80 00 	sts	0x0080, r24
    886e:	08 95       	ret

00008870 <_Z14hwr_InitTimersv>:
    // Timer 1 Overflow Interrupt: Off
    // Input Capture Interrupt: Off
    // Compare A Match Interrupt: On
    // Compare B Match Interrupt: Off
    // Compare C Match Interrupt: Off
    TCCR1A = (1 << WGM11) | (0 << WGM10);
    8870:	82 e0       	ldi	r24, 0x02	; 2
    8872:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10);
    8876:	9a e1       	ldi	r25, 0x1A	; 26
    8878:	90 93 81 00 	sts	0x0081, r25
    TIMSK1 = (1 << OCIE1A);
    887c:	80 93 6f 00 	sts	0x006F, r24
    ICR1   = 0x1770;
    8880:	80 e7       	ldi	r24, 0x70	; 112
    8882:	97 e1       	ldi	r25, 0x17	; 23
    8884:	90 93 87 00 	sts	0x0087, r25
    8888:	80 93 86 00 	sts	0x0086, r24
    OCR1A  = 0x0268; // F_CPU / 8 * 616 = 0.308 mSec, pause between channels PWM
    888c:	88 e6       	ldi	r24, 0x68	; 104
    888e:	92 e0       	ldi	r25, 0x02	; 2
    8890:	90 93 89 00 	sts	0x0089, r25
    8894:	80 93 88 00 	sts	0x0088, r24

    hwr_SetModulation(DEFAULT_MODULATION);
    8898:	81 e0       	ldi	r24, 0x01	; 1
    889a:	90 e0       	ldi	r25, 0x00	; 0
    889c:	0e 94 29 44 	call	0x8852	; 0x8852 <_Z17hwr_SetModulation10Modulation>

    // Timer/Counter 3 initialization

    TCCR3B |= (1 << WGM32);                // Configure timer 3 for CTC mode
    88a0:	e1 e9       	ldi	r30, 0x91	; 145
    88a2:	f0 e0       	ldi	r31, 0x00	; 0
    88a4:	80 81       	ld	r24, Z
    88a6:	88 60       	ori	r24, 0x08	; 8
    88a8:	80 83       	st	Z, r24
    TIMSK3 |= (1 << OCIE3A);               // Enable CTC interrupt
    88aa:	a1 e7       	ldi	r26, 0x71	; 113
    88ac:	b0 e0       	ldi	r27, 0x00	; 0
    88ae:	8c 91       	ld	r24, X
    88b0:	82 60       	ori	r24, 0x02	; 2
    88b2:	8c 93       	st	X, r24
    OCR3A   = F_CPU / 64 / 50;             // Set CTC compare value to 50Hz at 16MHz AVR clock, with a prescaler of 64
    88b4:	88 e8       	ldi	r24, 0x88	; 136
    88b6:	93 e1       	ldi	r25, 0x13	; 19
    88b8:	90 93 99 00 	sts	0x0099, r25
    88bc:	80 93 98 00 	sts	0x0098, r24
    TCCR3B |= ((1 << CS30) | (1 << CS31)); // Start timer at Fcpu/64  
    88c0:	80 81       	ld	r24, Z
    88c2:	83 60       	ori	r24, 0x03	; 3
    88c4:	80 83       	st	Z, r24
    88c6:	08 95       	ret

000088c8 <_Z11hwr_SetTonej>:
            break;
    }
}

void hwr_SetTone(uint16_t Freq)
{
    88c8:	bc 01       	movw	r22, r24
    // Таймер запускается с разными делителями для разных частот, потому как:
    // при делителе 64 невозможно получить частоту ниже ~750Гц
    // при делителе 256 на частотах > ~1500Гц высока погрешность генерации
    // Деление на 4 аргументов для того, что бы F_CPU/x не превысило word
    // Деление на два в конце, потому как нужен полупериод
    if (Freq > 1000)
    88ca:	69 3e       	cpi	r22, 0xE9	; 233
    88cc:	83 e0       	ldi	r24, 0x03	; 3
    88ce:	78 07       	cpc	r23, r24
    88d0:	78 f0       	brcs	.+30     	; 0x88f0 <_Z11hwr_SetTonej+0x28>
    {
        // Clock source: System Clock
        // Mode: CTC top = OCR2
        // OC2 output: Toggle on compare match
        // Prescaler: clock / 64
        TCCR4A = (0 << COM4B1) | (1 << COM4B0) | (0 << WGM41) | (0 << WGM40);
    88d2:	80 e1       	ldi	r24, 0x10	; 16
    88d4:	80 93 a0 00 	sts	0x00A0, r24
        TCCR4B = (0 << WGM43)  | (1 << WGM42)  | (0 << CS42)  | (1 << CS41) | (1 << CS40);
    88d8:	8b e0       	ldi	r24, 0x0B	; 11
    88da:	80 93 a1 00 	sts	0x00A1, r24
        TCNT4  = 0;
    88de:	10 92 a5 00 	sts	0x00A5, r1
    88e2:	10 92 a4 00 	sts	0x00A4, r1
        OCR4B  = (F_CPU / 64 / 2) / (Freq / 2) / 2;
    88e6:	76 95       	lsr	r23
    88e8:	67 95       	ror	r22
    88ea:	84 e2       	ldi	r24, 0x24	; 36
    88ec:	94 ef       	ldi	r25, 0xF4	; 244
    88ee:	0f c0       	rjmp	.+30     	; 0x890e <_Z11hwr_SetTonej+0x46>
    }
    else
    if (Freq > 0)
    88f0:	61 15       	cp	r22, r1
    88f2:	71 05       	cpc	r23, r1
    88f4:	99 f0       	breq	.+38     	; 0x891c <_Z11hwr_SetTonej+0x54>
    {
        // Clock source: System Clock
        // Mode: CTC top = OCR2
        // OC2 output: Toggle on compare match
        // Prescaler: clock / 256
        TCCR4A = (0 << COM4B1) | (1 << COM4B0) | (0 << WGM41) | (0 << WGM40);
    88f6:	80 e1       	ldi	r24, 0x10	; 16
    88f8:	80 93 a0 00 	sts	0x00A0, r24
        TCCR4B = (0 << WGM43)  | (1 << WGM42)  | (1 << CS42)  | (0 << CS41) | (0 << CS40);
    88fc:	8c e0       	ldi	r24, 0x0C	; 12
    88fe:	80 93 a1 00 	sts	0x00A1, r24
        TCNT4  = 0;
    8902:	10 92 a5 00 	sts	0x00A5, r1
    8906:	10 92 a4 00 	sts	0x00A4, r1
        OCR4B  = F_CPU / 256 / Freq / 2;
    890a:	82 e1       	ldi	r24, 0x12	; 18
    890c:	9a e7       	ldi	r25, 0x7A	; 122
    890e:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    8912:	70 93 ab 00 	sts	0x00AB, r23
    8916:	60 93 aa 00 	sts	0x00AA, r22
    891a:	08 95       	ret
    }
    else
    {
        TCCR4A = 0;
    891c:	10 92 a0 00 	sts	0x00A0, r1
        TCCR4B = 0;
    8920:	10 92 a1 00 	sts	0x00A1, r1
        OCR4B  = 0;
    8924:	10 92 ab 00 	sts	0x00AB, r1
    8928:	10 92 aa 00 	sts	0x00AA, r1

        // Снятие напряжения с пищалки, т.к. по останову таймера оно может быть любым
        REGISTER_BIT(PORTH, bit4) = 0;
    892c:	80 91 02 01 	lds	r24, 0x0102
    8930:	8f 7e       	andi	r24, 0xEF	; 239
    8932:	80 93 02 01 	sts	0x0102, r24
    8936:	08 95       	ret

00008938 <_Z16LCD_WriteCommanda>:
// Private functions
//

void LCD_WriteCommand(const int8_t cmd)
{
  TFT_START_WRITE_COMMAND
    8938:	90 91 0b 01 	lds	r25, 0x010B
    893c:	9b 7f       	andi	r25, 0xFB	; 251
    893e:	90 93 0b 01 	sts	0x010B, r25
    8942:	90 91 0b 01 	lds	r25, 0x010B
    8946:	9e 7f       	andi	r25, 0xFE	; 254
    8948:	90 93 0b 01 	sts	0x010B, r25

  TFT_SPI_WRITE(cmd);
    894c:	8e bd       	out	0x2e, r24	; 46
    894e:	0d b4       	in	r0, 0x2d	; 45
    8950:	07 fe       	sbrs	r0, 7
    8952:	fd cf       	rjmp	.-6      	; 0x894e <_Z16LCD_WriteCommanda+0x16>

  TFT_STOP_WRITE_COMMAND
    8954:	80 91 0b 01 	lds	r24, 0x010B
    8958:	84 60       	ori	r24, 0x04	; 4
    895a:	80 93 0b 01 	sts	0x010B, r24
    895e:	08 95       	ret

00008960 <_Z13LCD_WriteDataa>:
}

void LCD_WriteData(const int8_t data)
{
  TFT_START_WRITE_DATA
    8960:	90 91 0b 01 	lds	r25, 0x010B
    8964:	9b 7f       	andi	r25, 0xFB	; 251
    8966:	90 93 0b 01 	sts	0x010B, r25
    896a:	90 91 0b 01 	lds	r25, 0x010B
    896e:	91 60       	ori	r25, 0x01	; 1
    8970:	90 93 0b 01 	sts	0x010B, r25

  TFT_SPI_WRITE(data);
    8974:	8e bd       	out	0x2e, r24	; 46
    8976:	0d b4       	in	r0, 0x2d	; 45
    8978:	07 fe       	sbrs	r0, 7
    897a:	fd cf       	rjmp	.-6      	; 0x8976 <_Z13LCD_WriteDataa+0x16>

  TFT_STOP_WRITE_DATA
    897c:	80 91 0b 01 	lds	r24, 0x010B
    8980:	84 60       	ori	r24, 0x04	; 4
    8982:	80 93 0b 01 	sts	0x010B, r24
    8986:	08 95       	ret

00008988 <_Z17LCD_SetAddrWindowhhhh>:
}

void LCD_SetAddrWindow(const uint8_t x0, const uint8_t y0, const uint8_t x1, const uint8_t y1)
{
    8988:	1f 93       	push	r17
    898a:	cf 93       	push	r28
    898c:	df 93       	push	r29
    898e:	00 d0       	rcall	.+0      	; 0x8990 <_Z17LCD_SetAddrWindowhhhh+0x8>
    8990:	cd b7       	in	r28, 0x3d	; 61
    8992:	de b7       	in	r29, 0x3e	; 62
    8994:	18 2f       	mov	r17, r24
  // Column addr set
  LCD_WriteCommand(ST7735_CASET);
    8996:	8a e2       	ldi	r24, 0x2A	; 42
    8998:	2a 83       	std	Y+2, r18	; 0x02
    899a:	4b 83       	std	Y+3, r20	; 0x03
    899c:	69 83       	std	Y+1, r22	; 0x01
    899e:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x00);
    89a2:	80 e0       	ldi	r24, 0x00	; 0
    89a4:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(y0); // YSTART
    89a8:	69 81       	ldd	r22, Y+1	; 0x01
    89aa:	86 2f       	mov	r24, r22
    89ac:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x00);
    89b0:	80 e0       	ldi	r24, 0x00	; 0
    89b2:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(y1); // YEND
    89b6:	2a 81       	ldd	r18, Y+2	; 0x02
    89b8:	82 2f       	mov	r24, r18
    89ba:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>

  // Row addr set
  LCD_WriteCommand(ST7735_RASET);
    89be:	8b e2       	ldi	r24, 0x2B	; 43
    89c0:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x00);
    89c4:	80 e0       	ldi	r24, 0x00	; 0
    89c6:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(x0); // XSTART 
    89ca:	81 2f       	mov	r24, r17
    89cc:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x00);
    89d0:	80 e0       	ldi	r24, 0x00	; 0
    89d2:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(x1); // XEND
    89d6:	4b 81       	ldd	r20, Y+3	; 0x03
    89d8:	84 2f       	mov	r24, r20
    89da:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>

  LCD_WriteCommand(ST7735_RAMWR); // write to RAM
    89de:	8c e2       	ldi	r24, 0x2C	; 44
}
    89e0:	0f 90       	pop	r0
    89e2:	0f 90       	pop	r0
    89e4:	0f 90       	pop	r0
    89e6:	df 91       	pop	r29
    89e8:	cf 91       	pop	r28
    89ea:	1f 91       	pop	r17
  LCD_WriteData(0x00);
  LCD_WriteData(x0); // XSTART 
  LCD_WriteData(0x00);
  LCD_WriteData(x1); // XEND

  LCD_WriteCommand(ST7735_RAMWR); // write to RAM
    89ec:	0c 94 9c 44 	jmp	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>

000089f0 <_Z9LCD_Resetv>:
}

void LCD_Reset()
{
  TFT_RST = 0;
    89f0:	eb e0       	ldi	r30, 0x0B	; 11
    89f2:	f1 e0       	ldi	r31, 0x01	; 1
    89f4:	80 81       	ld	r24, Z
    89f6:	8d 7f       	andi	r24, 0xFD	; 253
    89f8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    89fa:	8f e3       	ldi	r24, 0x3F	; 63
    89fc:	9c e9       	ldi	r25, 0x9C	; 156
    89fe:	01 97       	sbiw	r24, 0x01	; 1
    8a00:	f1 f7       	brne	.-4      	; 0x89fe <_Z9LCD_Resetv+0xe>
    8a02:	00 c0       	rjmp	.+0      	; 0x8a04 <_Z9LCD_Resetv+0x14>
    8a04:	00 00       	nop
  _delay_ms(10);

  TFT_RST = 1;
    8a06:	eb e0       	ldi	r30, 0x0B	; 11
    8a08:	f1 e0       	ldi	r31, 0x01	; 1
    8a0a:	80 81       	ld	r24, Z
    8a0c:	82 60       	ori	r24, 0x02	; 2
    8a0e:	80 83       	st	Z, r24
    8a10:	8f e3       	ldi	r24, 0x3F	; 63
    8a12:	9c e9       	ldi	r25, 0x9C	; 156
    8a14:	01 97       	sbiw	r24, 0x01	; 1
    8a16:	f1 f7       	brne	.-4      	; 0x8a14 <_Z9LCD_Resetv+0x24>
    8a18:	00 c0       	rjmp	.+0      	; 0x8a1a <_Z9LCD_Resetv+0x2a>
    8a1a:	00 00       	nop
    8a1c:	08 95       	ret

00008a1e <_Z9LCD_Clearv>:
  LCD_Clear();
  LCD_Refresh();
}

void LCD_Clear()
{
    8a1e:	27 e3       	ldi	r18, 0x37	; 55
    8a20:	3d e0       	ldi	r19, 0x0D	; 13
    8a22:	80 e0       	ldi	r24, 0x00	; 0
    8a24:	90 e0       	ldi	r25, 0x00	; 0
    8a26:	f9 01       	movw	r30, r18
    8a28:	e8 0f       	add	r30, r24
    8a2a:	f9 1f       	adc	r31, r25
  for(uint8_t x = 0; x < TFT_ScreenWidth; ++x)
    for(uint8_t y = 0; y < TFT_ScreenHeight / 8; ++y)
        DisplayBuffer[x][y] = 0;
    8a2c:	10 82       	st	Z, r1
    8a2e:	01 96       	adiw	r24, 0x01	; 1
}

void LCD_Clear()
{
  for(uint8_t x = 0; x < TFT_ScreenWidth; ++x)
    for(uint8_t y = 0; y < TFT_ScreenHeight / 8; ++y)
    8a30:	80 31       	cpi	r24, 0x10	; 16
    8a32:	91 05       	cpc	r25, r1
    8a34:	c1 f7       	brne	.-16     	; 0x8a26 <_Z9LCD_Clearv+0x8>
    8a36:	20 5f       	subi	r18, 0xF0	; 240
    8a38:	3f 4f       	sbci	r19, 0xFF	; 255
  LCD_Refresh();
}

void LCD_Clear()
{
  for(uint8_t x = 0; x < TFT_ScreenWidth; ++x)
    8a3a:	87 e1       	ldi	r24, 0x17	; 23
    8a3c:	27 33       	cpi	r18, 0x37	; 55
    8a3e:	38 07       	cpc	r19, r24
    8a40:	81 f7       	brne	.-32     	; 0x8a22 <_Z9LCD_Clearv+0x4>
    8a42:	08 95       	ret

00008a44 <_Z11LCD_Refreshv>:
    for(uint8_t y = 0; y < TFT_ScreenHeight / 8; ++y)
        DisplayBuffer[x][y] = 0;
}

void LCD_Refresh()
{
    8a44:	6f 92       	push	r6
    8a46:	7f 92       	push	r7
    8a48:	8f 92       	push	r8
    8a4a:	9f 92       	push	r9
    8a4c:	af 92       	push	r10
    8a4e:	bf 92       	push	r11
    8a50:	cf 92       	push	r12
    8a52:	df 92       	push	r13
    8a54:	ef 92       	push	r14
    8a56:	ff 92       	push	r15
    8a58:	0f 93       	push	r16
    8a5a:	1f 93       	push	r17
    8a5c:	cf 93       	push	r28
    8a5e:	df 93       	push	r29
  LCD_SetAddrWindow(0, 0, TFT_ScreenWidth - 1, TFT_ScreenHeight - 1);
    8a60:	2f e7       	ldi	r18, 0x7F	; 127
    8a62:	4f e9       	ldi	r20, 0x9F	; 159
    8a64:	60 e0       	ldi	r22, 0x00	; 0
    8a66:	80 e0       	ldi	r24, 0x00	; 0
    8a68:	0e 94 c4 44 	call	0x8988	; 0x8988 <_Z17LCD_SetAddrWindowhhhh>

  TFT_START_WRITE_DATA
    8a6c:	80 91 0b 01 	lds	r24, 0x010B
    8a70:	8b 7f       	andi	r24, 0xFB	; 251
    8a72:	80 93 0b 01 	sts	0x010B, r24
    8a76:	80 91 0b 01 	lds	r24, 0x010B
    8a7a:	81 60       	ori	r24, 0x01	; 1
    8a7c:	80 93 0b 01 	sts	0x010B, r24
    8a80:	87 e3       	ldi	r24, 0x37	; 55
    8a82:	9d e0       	ldi	r25, 0x0D	; 13
    for(uint8_t y = 0; y < TFT_ScreenHeight / 8; ++y)
        DisplayBuffer[x][y] = 0;
}

void LCD_Refresh()
{
    8a84:	fc 01       	movw	r30, r24
    8a86:	20 e0       	ldi	r18, 0x00	; 0
  uint16_t color;
  for(uint8_t x = 0; x < TFT_ScreenWidth; ++x)
  {
    for(uint8_t y = 0; y < TFT_ScreenHeight / 8; ++y)
    {
      color = COLOR_IDX_TO_RGB[DisplayBuffer[x][y] & 0x01];
    8a88:	30 81       	ld	r19, Z
    8a8a:	31 70       	andi	r19, 0x01	; 1
    8a8c:	c3 2f       	mov	r28, r19
    8a8e:	30 e0       	ldi	r19, 0x00	; 0
    8a90:	d3 2f       	mov	r29, r19
    8a92:	cc 0f       	add	r28, r28
    8a94:	dd 1f       	adc	r29, r29
    8a96:	c2 58       	subi	r28, 0x82	; 130
    8a98:	dd 4f       	sbci	r29, 0xFD	; 253
    8a9a:	38 81       	ld	r19, Y
    8a9c:	49 81       	ldd	r20, Y+1	; 0x01
      TFT_SPI_WRITE(color >> 8);
    8a9e:	4e bd       	out	0x2e, r20	; 46
    8aa0:	0d b4       	in	r0, 0x2d	; 45
    8aa2:	07 fe       	sbrs	r0, 7
    8aa4:	fd cf       	rjmp	.-6      	; 0x8aa0 <_Z11LCD_Refreshv+0x5c>
      TFT_SPI_WRITE(color);
    8aa6:	3e bd       	out	0x2e, r19	; 46
    8aa8:	0d b4       	in	r0, 0x2d	; 45
    8aaa:	07 fe       	sbrs	r0, 7
    8aac:	fd cf       	rjmp	.-6      	; 0x8aa8 <_Z11LCD_Refreshv+0x64>

      color = COLOR_IDX_TO_RGB[(DisplayBuffer[x][y] & 0x02) >> 1];
    8aae:	30 81       	ld	r19, Z
    8ab0:	31 fb       	bst	r19, 1
    8ab2:	00 27       	eor	r16, r16
    8ab4:	00 f9       	bld	r16, 0
    8ab6:	10 e0       	ldi	r17, 0x00	; 0
    8ab8:	00 0f       	add	r16, r16
    8aba:	11 1f       	adc	r17, r17
    8abc:	02 58       	subi	r16, 0x82	; 130
    8abe:	1d 4f       	sbci	r17, 0xFD	; 253
    8ac0:	d8 01       	movw	r26, r16
    8ac2:	3c 91       	ld	r19, X
    8ac4:	11 96       	adiw	r26, 0x01	; 1
    8ac6:	4c 91       	ld	r20, X
      TFT_SPI_WRITE(color >> 8);
    8ac8:	4e bd       	out	0x2e, r20	; 46
    8aca:	0d b4       	in	r0, 0x2d	; 45
    8acc:	07 fe       	sbrs	r0, 7
    8ace:	fd cf       	rjmp	.-6      	; 0x8aca <_Z11LCD_Refreshv+0x86>
      TFT_SPI_WRITE(color);
    8ad0:	3e bd       	out	0x2e, r19	; 46
    8ad2:	0d b4       	in	r0, 0x2d	; 45
    8ad4:	07 fe       	sbrs	r0, 7
    8ad6:	fd cf       	rjmp	.-6      	; 0x8ad2 <_Z11LCD_Refreshv+0x8e>

      color = COLOR_IDX_TO_RGB[(DisplayBuffer[x][y] & 0x04) >> 2];
    8ad8:	30 81       	ld	r19, Z
    8ada:	32 fb       	bst	r19, 2
    8adc:	ee 24       	eor	r14, r14
    8ade:	e0 f8       	bld	r14, 0
    8ae0:	f1 2c       	mov	r15, r1
    8ae2:	ee 0c       	add	r14, r14
    8ae4:	ff 1c       	adc	r15, r15
    8ae6:	a7 01       	movw	r20, r14
    8ae8:	42 58       	subi	r20, 0x82	; 130
    8aea:	5d 4f       	sbci	r21, 0xFD	; 253
    8aec:	da 01       	movw	r26, r20
    8aee:	3c 91       	ld	r19, X
    8af0:	11 96       	adiw	r26, 0x01	; 1
    8af2:	4c 91       	ld	r20, X
      TFT_SPI_WRITE(color >> 8);
    8af4:	4e bd       	out	0x2e, r20	; 46
    8af6:	0d b4       	in	r0, 0x2d	; 45
    8af8:	07 fe       	sbrs	r0, 7
    8afa:	fd cf       	rjmp	.-6      	; 0x8af6 <_Z11LCD_Refreshv+0xb2>
      TFT_SPI_WRITE(color);
    8afc:	3e bd       	out	0x2e, r19	; 46
    8afe:	0d b4       	in	r0, 0x2d	; 45
    8b00:	07 fe       	sbrs	r0, 7
    8b02:	fd cf       	rjmp	.-6      	; 0x8afe <_Z11LCD_Refreshv+0xba>

      color = COLOR_IDX_TO_RGB[(DisplayBuffer[x][y] & 0x08) >> 3];
    8b04:	30 81       	ld	r19, Z
    8b06:	33 fb       	bst	r19, 3
    8b08:	cc 24       	eor	r12, r12
    8b0a:	c0 f8       	bld	r12, 0
    8b0c:	d1 2c       	mov	r13, r1
    8b0e:	cc 0c       	add	r12, r12
    8b10:	dd 1c       	adc	r13, r13
    8b12:	a6 01       	movw	r20, r12
    8b14:	42 58       	subi	r20, 0x82	; 130
    8b16:	5d 4f       	sbci	r21, 0xFD	; 253
    8b18:	da 01       	movw	r26, r20
    8b1a:	3c 91       	ld	r19, X
    8b1c:	11 96       	adiw	r26, 0x01	; 1
    8b1e:	4c 91       	ld	r20, X
      TFT_SPI_WRITE(color >> 8);
    8b20:	4e bd       	out	0x2e, r20	; 46
    8b22:	0d b4       	in	r0, 0x2d	; 45
    8b24:	07 fe       	sbrs	r0, 7
    8b26:	fd cf       	rjmp	.-6      	; 0x8b22 <_Z11LCD_Refreshv+0xde>
      TFT_SPI_WRITE(color);
    8b28:	3e bd       	out	0x2e, r19	; 46
    8b2a:	0d b4       	in	r0, 0x2d	; 45
    8b2c:	07 fe       	sbrs	r0, 7
    8b2e:	fd cf       	rjmp	.-6      	; 0x8b2a <_Z11LCD_Refreshv+0xe6>

      color = COLOR_IDX_TO_RGB[(DisplayBuffer[x][y] & 0x10) >> 4];
    8b30:	30 81       	ld	r19, Z
    8b32:	34 fb       	bst	r19, 4
    8b34:	aa 24       	eor	r10, r10
    8b36:	a0 f8       	bld	r10, 0
    8b38:	b1 2c       	mov	r11, r1
    8b3a:	aa 0c       	add	r10, r10
    8b3c:	bb 1c       	adc	r11, r11
    8b3e:	a5 01       	movw	r20, r10
    8b40:	42 58       	subi	r20, 0x82	; 130
    8b42:	5d 4f       	sbci	r21, 0xFD	; 253
    8b44:	da 01       	movw	r26, r20
    8b46:	3c 91       	ld	r19, X
    8b48:	11 96       	adiw	r26, 0x01	; 1
    8b4a:	4c 91       	ld	r20, X
      TFT_SPI_WRITE(color >> 8);
    8b4c:	4e bd       	out	0x2e, r20	; 46
    8b4e:	0d b4       	in	r0, 0x2d	; 45
    8b50:	07 fe       	sbrs	r0, 7
    8b52:	fd cf       	rjmp	.-6      	; 0x8b4e <_Z11LCD_Refreshv+0x10a>
      TFT_SPI_WRITE(color);
    8b54:	3e bd       	out	0x2e, r19	; 46
    8b56:	0d b4       	in	r0, 0x2d	; 45
    8b58:	07 fe       	sbrs	r0, 7
    8b5a:	fd cf       	rjmp	.-6      	; 0x8b56 <_Z11LCD_Refreshv+0x112>

      color = COLOR_IDX_TO_RGB[(DisplayBuffer[x][y] & 0x20) >> 5];
    8b5c:	30 81       	ld	r19, Z
    8b5e:	35 fb       	bst	r19, 5
    8b60:	88 24       	eor	r8, r8
    8b62:	80 f8       	bld	r8, 0
    8b64:	91 2c       	mov	r9, r1
    8b66:	88 0c       	add	r8, r8
    8b68:	99 1c       	adc	r9, r9
    8b6a:	a4 01       	movw	r20, r8
    8b6c:	42 58       	subi	r20, 0x82	; 130
    8b6e:	5d 4f       	sbci	r21, 0xFD	; 253
    8b70:	da 01       	movw	r26, r20
    8b72:	3c 91       	ld	r19, X
    8b74:	11 96       	adiw	r26, 0x01	; 1
    8b76:	4c 91       	ld	r20, X
      TFT_SPI_WRITE(color >> 8);
    8b78:	4e bd       	out	0x2e, r20	; 46
    8b7a:	0d b4       	in	r0, 0x2d	; 45
    8b7c:	07 fe       	sbrs	r0, 7
    8b7e:	fd cf       	rjmp	.-6      	; 0x8b7a <_Z11LCD_Refreshv+0x136>
      TFT_SPI_WRITE(color);
    8b80:	3e bd       	out	0x2e, r19	; 46
    8b82:	0d b4       	in	r0, 0x2d	; 45
    8b84:	07 fe       	sbrs	r0, 7
    8b86:	fd cf       	rjmp	.-6      	; 0x8b82 <_Z11LCD_Refreshv+0x13e>

      color = COLOR_IDX_TO_RGB[(DisplayBuffer[x][y] & 0x40) >> 6];
    8b88:	30 81       	ld	r19, Z
    8b8a:	36 fb       	bst	r19, 6
    8b8c:	66 24       	eor	r6, r6
    8b8e:	60 f8       	bld	r6, 0
    8b90:	71 2c       	mov	r7, r1
    8b92:	66 0c       	add	r6, r6
    8b94:	77 1c       	adc	r7, r7
    8b96:	a3 01       	movw	r20, r6
    8b98:	42 58       	subi	r20, 0x82	; 130
    8b9a:	5d 4f       	sbci	r21, 0xFD	; 253
    8b9c:	da 01       	movw	r26, r20
    8b9e:	3c 91       	ld	r19, X
    8ba0:	11 96       	adiw	r26, 0x01	; 1
    8ba2:	4c 91       	ld	r20, X
      TFT_SPI_WRITE(color >> 8);
    8ba4:	4e bd       	out	0x2e, r20	; 46
    8ba6:	0d b4       	in	r0, 0x2d	; 45
    8ba8:	07 fe       	sbrs	r0, 7
    8baa:	fd cf       	rjmp	.-6      	; 0x8ba6 <_Z11LCD_Refreshv+0x162>
      TFT_SPI_WRITE(color);
    8bac:	3e bd       	out	0x2e, r19	; 46
    8bae:	0d b4       	in	r0, 0x2d	; 45
    8bb0:	07 fe       	sbrs	r0, 7
    8bb2:	fd cf       	rjmp	.-6      	; 0x8bae <_Z11LCD_Refreshv+0x16a>

      color = COLOR_IDX_TO_RGB[(DisplayBuffer[x][y] & 0x80) >> 7];
    8bb4:	a0 81       	ld	r26, Z
    8bb6:	aa 1f       	adc	r26, r26
    8bb8:	aa 27       	eor	r26, r26
    8bba:	aa 1f       	adc	r26, r26
    8bbc:	b0 e0       	ldi	r27, 0x00	; 0
    8bbe:	aa 0f       	add	r26, r26
    8bc0:	bb 1f       	adc	r27, r27
    8bc2:	a2 58       	subi	r26, 0x82	; 130
    8bc4:	bd 4f       	sbci	r27, 0xFD	; 253
    8bc6:	3c 91       	ld	r19, X
    8bc8:	11 96       	adiw	r26, 0x01	; 1
    8bca:	4c 91       	ld	r20, X
      TFT_SPI_WRITE(color >> 8);
    8bcc:	4e bd       	out	0x2e, r20	; 46
    8bce:	0d b4       	in	r0, 0x2d	; 45
    8bd0:	07 fe       	sbrs	r0, 7
    8bd2:	fd cf       	rjmp	.-6      	; 0x8bce <_Z11LCD_Refreshv+0x18a>
      TFT_SPI_WRITE(color);
    8bd4:	3e bd       	out	0x2e, r19	; 46
    8bd6:	0d b4       	in	r0, 0x2d	; 45
    8bd8:	07 fe       	sbrs	r0, 7
    8bda:	fd cf       	rjmp	.-6      	; 0x8bd6 <_Z11LCD_Refreshv+0x192>
  TFT_START_WRITE_DATA

  uint16_t color;
  for(uint8_t x = 0; x < TFT_ScreenWidth; ++x)
  {
    for(uint8_t y = 0; y < TFT_ScreenHeight / 8; ++y)
    8bdc:	2f 5f       	subi	r18, 0xFF	; 255
    8bde:	31 96       	adiw	r30, 0x01	; 1
    8be0:	20 31       	cpi	r18, 0x10	; 16
    8be2:	09 f0       	breq	.+2      	; 0x8be6 <_Z11LCD_Refreshv+0x1a2>
    8be4:	51 cf       	rjmp	.-350    	; 0x8a88 <_Z11LCD_Refreshv+0x44>
    8be6:	40 96       	adiw	r24, 0x10	; 16
  LCD_SetAddrWindow(0, 0, TFT_ScreenWidth - 1, TFT_ScreenHeight - 1);

  TFT_START_WRITE_DATA

  uint16_t color;
  for(uint8_t x = 0; x < TFT_ScreenWidth; ++x)
    8be8:	b7 e1       	ldi	r27, 0x17	; 23
    8bea:	87 33       	cpi	r24, 0x37	; 55
    8bec:	9b 07       	cpc	r25, r27
    8bee:	09 f0       	breq	.+2      	; 0x8bf2 <_Z11LCD_Refreshv+0x1ae>
    8bf0:	49 cf       	rjmp	.-366    	; 0x8a84 <_Z11LCD_Refreshv+0x40>
      TFT_SPI_WRITE(color >> 8);
      TFT_SPI_WRITE(color);
    }
  }

  TFT_STOP_WRITE_DATA
    8bf2:	80 91 0b 01 	lds	r24, 0x010B
    8bf6:	84 60       	ori	r24, 0x04	; 4
    8bf8:	80 93 0b 01 	sts	0x010B, r24
}
    8bfc:	df 91       	pop	r29
    8bfe:	cf 91       	pop	r28
    8c00:	1f 91       	pop	r17
    8c02:	0f 91       	pop	r16
    8c04:	ff 90       	pop	r15
    8c06:	ef 90       	pop	r14
    8c08:	df 90       	pop	r13
    8c0a:	cf 90       	pop	r12
    8c0c:	bf 90       	pop	r11
    8c0e:	af 90       	pop	r10
    8c10:	9f 90       	pop	r9
    8c12:	8f 90       	pop	r8
    8c14:	7f 90       	pop	r7
    8c16:	6f 90       	pop	r6
    8c18:	08 95       	ret

00008c1a <_Z8LCD_Initv>:
  // SPI Type: Master
  // SPI Clock Rate: Fosc/4
  // SPI Clock Phase: Cycle Half
  // SPI Clock Polarity: Low
  // SPI Data Order: MSB First
  SPCR = 0x50;
    8c1a:	80 e5       	ldi	r24, 0x50	; 80
    8c1c:	8c bd       	out	0x2c, r24	; 44
  SPSR = 0x00;
    8c1e:	1d bc       	out	0x2d, r1	; 45

  LCD_Reset();
    8c20:	0e 94 f8 44 	call	0x89f0	; 0x89f0 <_Z9LCD_Resetv>
  
  LCD_WriteCommand(ST7735_SLPOUT); //Sleep exit 
    8c24:	81 e1       	ldi	r24, 0x11	; 17
    8c26:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
    8c2a:	8f e7       	ldi	r24, 0x7F	; 127
    8c2c:	9b eb       	ldi	r25, 0xBB	; 187
    8c2e:	01 97       	sbiw	r24, 0x01	; 1
    8c30:	f1 f7       	brne	.-4      	; 0x8c2e <_Z8LCD_Initv+0x14>
    8c32:	00 c0       	rjmp	.+0      	; 0x8c34 <_Z8LCD_Initv+0x1a>
    8c34:	00 00       	nop
  _delay_ms(12);

  //ST7735R Frame Rate
  LCD_WriteCommand(ST7735_FRMCTR1);
    8c36:	81 eb       	ldi	r24, 0xB1	; 177
    8c38:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x01);
    8c3c:	81 e0       	ldi	r24, 0x01	; 1
    8c3e:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x2C);
    8c42:	8c e2       	ldi	r24, 0x2C	; 44
    8c44:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x2D); 
    8c48:	8d e2       	ldi	r24, 0x2D	; 45
    8c4a:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>

  LCD_WriteCommand(ST7735_FRMCTR2);
    8c4e:	82 eb       	ldi	r24, 0xB2	; 178
    8c50:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x01);
    8c54:	81 e0       	ldi	r24, 0x01	; 1
    8c56:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x2C);
    8c5a:	8c e2       	ldi	r24, 0x2C	; 44
    8c5c:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x2D); 
    8c60:	8d e2       	ldi	r24, 0x2D	; 45
    8c62:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>

  LCD_WriteCommand(ST7735_FRMCTR3); 
    8c66:	83 eb       	ldi	r24, 0xB3	; 179
    8c68:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x01);
    8c6c:	81 e0       	ldi	r24, 0x01	; 1
    8c6e:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x2C);
    8c72:	8c e2       	ldi	r24, 0x2C	; 44
    8c74:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x2D); 
    8c78:	8d e2       	ldi	r24, 0x2D	; 45
    8c7a:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x01);
    8c7e:	81 e0       	ldi	r24, 0x01	; 1
    8c80:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x2C);
    8c84:	8c e2       	ldi	r24, 0x2C	; 44
    8c86:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x2D); 
    8c8a:	8d e2       	ldi	r24, 0x2D	; 45
    8c8c:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>

  // Column inversion
  LCD_WriteCommand(ST7735_INVCTR);
    8c90:	84 eb       	ldi	r24, 0xB4	; 180
    8c92:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x07); 
    8c96:	87 e0       	ldi	r24, 0x07	; 7
    8c98:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
   
  //ST7735R Power Sequence
  LCD_WriteCommand(ST7735_PWCTR1); 
    8c9c:	80 ec       	ldi	r24, 0xC0	; 192
    8c9e:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0xA2);
    8ca2:	82 ea       	ldi	r24, 0xA2	; 162
    8ca4:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x02);
    8ca8:	82 e0       	ldi	r24, 0x02	; 2
    8caa:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x84); 
    8cae:	84 e8       	ldi	r24, 0x84	; 132
    8cb0:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  
  LCD_WriteCommand(ST7735_PWCTR2);
    8cb4:	81 ec       	ldi	r24, 0xC1	; 193
    8cb6:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0xC5); 
    8cba:	85 ec       	ldi	r24, 0xC5	; 197
    8cbc:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  
  LCD_WriteCommand(ST7735_PWCTR3); 
    8cc0:	82 ec       	ldi	r24, 0xC2	; 194
    8cc2:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x0A);
    8cc6:	8a e0       	ldi	r24, 0x0A	; 10
    8cc8:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x00); 
    8ccc:	80 e0       	ldi	r24, 0x00	; 0
    8cce:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  
  LCD_WriteCommand(ST7735_PWCTR4); 
    8cd2:	83 ec       	ldi	r24, 0xC3	; 195
    8cd4:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x8A);
    8cd8:	8a e8       	ldi	r24, 0x8A	; 138
    8cda:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x2A); 
    8cde:	8a e2       	ldi	r24, 0x2A	; 42
    8ce0:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  
  LCD_WriteCommand(ST7735_PWCTR5); 
    8ce4:	84 ec       	ldi	r24, 0xC4	; 196
    8ce6:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x8A);
    8cea:	8a e8       	ldi	r24, 0x8A	; 138
    8cec:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0xEE); 
    8cf0:	8e ee       	ldi	r24, 0xEE	; 238
    8cf2:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  
  // VCOM
  LCD_WriteCommand(ST7735_VMCTR1);
    8cf6:	85 ec       	ldi	r24, 0xC5	; 197
    8cf8:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x0E); 
    8cfc:	8e e0       	ldi	r24, 0x0E	; 14
    8cfe:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
   
  //MV, MH, MX, RGB mode
  LCD_WriteCommand(ST7735_MADCTL);
    8d02:	86 e3       	ldi	r24, 0x36	; 54
    8d04:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(MADCTL_MY | MADCTL_RGB); 
    8d08:	80 e8       	ldi	r24, 0x80	; 128
    8d0a:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>

  //ST7735R Gamma Sequence
  LCD_WriteCommand(ST7735_GMCTRP1); 
    8d0e:	80 ee       	ldi	r24, 0xE0	; 224
    8d10:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x0f); LCD_WriteData(0x1a); 
    8d14:	8f e0       	ldi	r24, 0x0F	; 15
    8d16:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8d1a:	8a e1       	ldi	r24, 0x1A	; 26
    8d1c:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x0f); LCD_WriteData(0x18); 
    8d20:	8f e0       	ldi	r24, 0x0F	; 15
    8d22:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8d26:	88 e1       	ldi	r24, 0x18	; 24
    8d28:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x2f); LCD_WriteData(0x28); 
    8d2c:	8f e2       	ldi	r24, 0x2F	; 47
    8d2e:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8d32:	88 e2       	ldi	r24, 0x28	; 40
    8d34:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x20); LCD_WriteData(0x22); 
    8d38:	80 e2       	ldi	r24, 0x20	; 32
    8d3a:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8d3e:	82 e2       	ldi	r24, 0x22	; 34
    8d40:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x1f); LCD_WriteData(0x1b); 
    8d44:	8f e1       	ldi	r24, 0x1F	; 31
    8d46:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8d4a:	8b e1       	ldi	r24, 0x1B	; 27
    8d4c:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x23); LCD_WriteData(0x37);
    8d50:	83 e2       	ldi	r24, 0x23	; 35
    8d52:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8d56:	87 e3       	ldi	r24, 0x37	; 55
    8d58:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x00); 
    8d5c:	80 e0       	ldi	r24, 0x00	; 0
    8d5e:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x07); 
    8d62:	87 e0       	ldi	r24, 0x07	; 7
    8d64:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x02); LCD_WriteData(0x10); 
    8d68:	82 e0       	ldi	r24, 0x02	; 2
    8d6a:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8d6e:	80 e1       	ldi	r24, 0x10	; 16
    8d70:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  
  LCD_WriteCommand(ST7735_GMCTRN1); 
    8d74:	81 ee       	ldi	r24, 0xE1	; 225
    8d76:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x0f); LCD_WriteData(0x1b); 
    8d7a:	8f e0       	ldi	r24, 0x0F	; 15
    8d7c:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8d80:	8b e1       	ldi	r24, 0x1B	; 27
    8d82:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x0f); LCD_WriteData(0x17); 
    8d86:	8f e0       	ldi	r24, 0x0F	; 15
    8d88:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8d8c:	87 e1       	ldi	r24, 0x17	; 23
    8d8e:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x33); LCD_WriteData(0x2c); 
    8d92:	83 e3       	ldi	r24, 0x33	; 51
    8d94:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8d98:	8c e2       	ldi	r24, 0x2C	; 44
    8d9a:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x29); LCD_WriteData(0x2e); 
    8d9e:	89 e2       	ldi	r24, 0x29	; 41
    8da0:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8da4:	8e e2       	ldi	r24, 0x2E	; 46
    8da6:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x30); LCD_WriteData(0x30); 
    8daa:	80 e3       	ldi	r24, 0x30	; 48
    8dac:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8db0:	80 e3       	ldi	r24, 0x30	; 48
    8db2:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x39); LCD_WriteData(0x3f); 
    8db6:	89 e3       	ldi	r24, 0x39	; 57
    8db8:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8dbc:	8f e3       	ldi	r24, 0x3F	; 63
    8dbe:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x00); LCD_WriteData(0x07); 
    8dc2:	80 e0       	ldi	r24, 0x00	; 0
    8dc4:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8dc8:	87 e0       	ldi	r24, 0x07	; 7
    8dca:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x03); LCD_WriteData(0x10);  
    8dce:	83 e0       	ldi	r24, 0x03	; 3
    8dd0:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8dd4:	80 e1       	ldi	r24, 0x10	; 16
    8dd6:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>

  LCD_WriteCommand(ST7735_CASET);
    8dda:	8a e2       	ldi	r24, 0x2A	; 42
    8ddc:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x00); LCD_WriteData(0x00);
    8de0:	80 e0       	ldi	r24, 0x00	; 0
    8de2:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8de6:	80 e0       	ldi	r24, 0x00	; 0
    8de8:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x00); LCD_WriteData(0x7f);
    8dec:	80 e0       	ldi	r24, 0x00	; 0
    8dee:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8df2:	8f e7       	ldi	r24, 0x7F	; 127
    8df4:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  
  LCD_WriteCommand(ST7735_RASET);
    8df8:	8b e2       	ldi	r24, 0x2B	; 43
    8dfa:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x00); LCD_WriteData(0x00);
    8dfe:	80 e0       	ldi	r24, 0x00	; 0
    8e00:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8e04:	80 e0       	ldi	r24, 0x00	; 0
    8e06:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  LCD_WriteData(0x00); LCD_WriteData(0x9f);
    8e0a:	80 e0       	ldi	r24, 0x00	; 0
    8e0c:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
    8e10:	8f e9       	ldi	r24, 0x9F	; 159
    8e12:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>

  LCD_WriteCommand(0xF0); //Enable test command  
    8e16:	80 ef       	ldi	r24, 0xF0	; 240
    8e18:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x01);
    8e1c:	81 e0       	ldi	r24, 0x01	; 1
    8e1e:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
  
  LCD_WriteCommand(0xF6); //Disable ram power save mode 
    8e22:	86 ef       	ldi	r24, 0xF6	; 246
    8e24:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x00); 
    8e28:	80 e0       	ldi	r24, 0x00	; 0
    8e2a:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>
   
  LCD_WriteCommand(ST7735_COLMOD); //65k mode 
    8e2e:	8a e3       	ldi	r24, 0x3A	; 58
    8e30:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>
  LCD_WriteData(0x05);
    8e34:	85 e0       	ldi	r24, 0x05	; 5
    8e36:	0e 94 b0 44 	call	0x8960	; 0x8960 <_Z13LCD_WriteDataa>

  //Display on
  LCD_WriteCommand(ST7735_DISPON);
    8e3a:	89 e2       	ldi	r24, 0x29	; 41
    8e3c:	0e 94 9c 44 	call	0x8938	; 0x8938 <_Z16LCD_WriteCommanda>

  LCD_Clear();
    8e40:	0e 94 0f 45 	call	0x8a1e	; 0x8a1e <_Z9LCD_Clearv>
  LCD_Refresh();
    8e44:	0c 94 22 45 	jmp	0x8a44	; 0x8a44 <_Z11LCD_Refreshv>

00008e48 <_Z13LCD_DrawPixelhh8ColorIdx>:
    8e48:	80 3a       	cpi	r24, 0xA0	; 160
    8e4a:	40 f5       	brcc	.+80     	; 0x8e9c <_Z13LCD_DrawPixelhh8ColorIdx+0x54>
    8e4c:	67 fd       	sbrc	r22, 7
    8e4e:	26 c0       	rjmp	.+76     	; 0x8e9c <_Z13LCD_DrawPixelhh8ColorIdx+0x54>
    8e50:	e6 2f       	mov	r30, r22
    8e52:	f0 e0       	ldi	r31, 0x00	; 0
    8e54:	93 e0       	ldi	r25, 0x03	; 3
    8e56:	f5 95       	asr	r31
    8e58:	e7 95       	ror	r30
    8e5a:	9a 95       	dec	r25
    8e5c:	e1 f7       	brne	.-8      	; 0x8e56 <_Z13LCD_DrawPixelhh8ColorIdx+0xe>
    8e5e:	67 70       	andi	r22, 0x07	; 7
    8e60:	90 e1       	ldi	r25, 0x10	; 16
    8e62:	89 9f       	mul	r24, r25
    8e64:	e0 0d       	add	r30, r0
    8e66:	f1 1d       	adc	r31, r1
    8e68:	11 24       	eor	r1, r1
    8e6a:	e9 5c       	subi	r30, 0xC9	; 201
    8e6c:	f2 4f       	sbci	r31, 0xF2	; 242
    8e6e:	81 e0       	ldi	r24, 0x01	; 1
    8e70:	90 e0       	ldi	r25, 0x00	; 0
    8e72:	06 2e       	mov	r0, r22
    8e74:	01 c0       	rjmp	.+2      	; 0x8e78 <_Z13LCD_DrawPixelhh8ColorIdx+0x30>
    8e76:	88 0f       	add	r24, r24
    8e78:	0a 94       	dec	r0
    8e7a:	ea f7       	brpl	.-6      	; 0x8e76 <_Z13LCD_DrawPixelhh8ColorIdx+0x2e>
    8e7c:	80 95       	com	r24
    8e7e:	90 81       	ld	r25, Z
    8e80:	89 23       	and	r24, r25
    8e82:	21 e0       	ldi	r18, 0x01	; 1
    8e84:	30 e0       	ldi	r19, 0x00	; 0
    8e86:	45 2b       	or	r20, r21
    8e88:	11 f4       	brne	.+4      	; 0x8e8e <_Z13LCD_DrawPixelhh8ColorIdx+0x46>
    8e8a:	20 e0       	ldi	r18, 0x00	; 0
    8e8c:	30 e0       	ldi	r19, 0x00	; 0
    8e8e:	06 2e       	mov	r0, r22
    8e90:	01 c0       	rjmp	.+2      	; 0x8e94 <_Z13LCD_DrawPixelhh8ColorIdx+0x4c>
    8e92:	22 0f       	add	r18, r18
    8e94:	0a 94       	dec	r0
    8e96:	ea f7       	brpl	.-6      	; 0x8e92 <_Z13LCD_DrawPixelhh8ColorIdx+0x4a>
    8e98:	28 2b       	or	r18, r24
    8e9a:	20 83       	st	Z, r18
    8e9c:	08 95       	ret

00008e9e <main>:
    8e9e:	0e 94 da 43 	call	0x87b4	; 0x87b4 <_Z13hwr_InitPortsv>
    8ea2:	0e 94 38 44 	call	0x8870	; 0x8870 <_Z14hwr_InitTimersv>
    8ea6:	0e 94 08 44 	call	0x8810	; 0x8810 <_Z11hwr_InitADCv>
    8eaa:	0e 94 c0 20 	call	0x4180	; 0x4180 <_Z8gfx_Initv>
    8eae:	0e 94 6f 25 	call	0x4ade	; 0x4ade <_Z15TX_IsFirstStartv>
    8eb2:	88 23       	and	r24, r24
    8eb4:	d1 f0       	breq	.+52     	; 0x8eea <main+0x4c>
    8eb6:	e1 2c       	mov	r14, r1
    8eb8:	f1 2c       	mov	r15, r1
    8eba:	00 e0       	ldi	r16, 0x00	; 0
    8ebc:	2a ec       	ldi	r18, 0xCA	; 202
    8ebe:	3c e0       	ldi	r19, 0x0C	; 12
    8ec0:	40 e5       	ldi	r20, 0x50	; 80
    8ec2:	56 e0       	ldi	r21, 0x06	; 6
    8ec4:	b9 01       	movw	r22, r18
    8ec6:	86 e5       	ldi	r24, 0x56	; 86
    8ec8:	96 e0       	ldi	r25, 0x06	; 6
    8eca:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx>
    8ece:	01 9b       	sbis	0x00, 1	; 0
    8ed0:	fe cf       	rjmp	.-4      	; 0x8ece <main+0x30>
    8ed2:	07 9b       	sbis	0x00, 7	; 0
    8ed4:	fc cf       	rjmp	.-8      	; 0x8ece <main+0x30>
    8ed6:	04 9b       	sbis	0x00, 4	; 0
    8ed8:	fa cf       	rjmp	.-12     	; 0x8ece <main+0x30>
    8eda:	01 9b       	sbis	0x00, 1	; 0
    8edc:	04 c0       	rjmp	.+8      	; 0x8ee6 <main+0x48>
    8ede:	07 9b       	sbis	0x00, 7	; 0
    8ee0:	02 c0       	rjmp	.+4      	; 0x8ee6 <main+0x48>
    8ee2:	04 99       	sbic	0x00, 4	; 0
    8ee4:	fa cf       	rjmp	.-12     	; 0x8eda <main+0x3c>
    8ee6:	0e 94 43 29 	call	0x5286	; 0x5286 <_Z8TX_Resetv>
    8eea:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <_Z21Is_EEPROM_CRC_Correctv>
    8eee:	81 11       	cpse	r24, r1
    8ef0:	1c c0       	rjmp	.+56     	; 0x8f2a <main+0x8c>
    8ef2:	e1 2c       	mov	r14, r1
    8ef4:	f1 2c       	mov	r15, r1
    8ef6:	00 e0       	ldi	r16, 0x00	; 0
    8ef8:	2a ec       	ldi	r18, 0xCA	; 202
    8efa:	3c e0       	ldi	r19, 0x0C	; 12
    8efc:	40 e5       	ldi	r20, 0x50	; 80
    8efe:	56 e0       	ldi	r21, 0x06	; 6
    8f00:	b9 01       	movw	r22, r18
    8f02:	8f e7       	ldi	r24, 0x7F	; 127
    8f04:	96 e0       	ldi	r25, 0x06	; 6
    8f06:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_Z6MsgBoxPKcRK11FontProfileS0_S3_h8ColorIdx>
    8f0a:	01 9b       	sbis	0x00, 1	; 0
    8f0c:	fe cf       	rjmp	.-4      	; 0x8f0a <main+0x6c>
    8f0e:	07 9b       	sbis	0x00, 7	; 0
    8f10:	fc cf       	rjmp	.-8      	; 0x8f0a <main+0x6c>
    8f12:	04 9b       	sbis	0x00, 4	; 0
    8f14:	fa cf       	rjmp	.-12     	; 0x8f0a <main+0x6c>
    8f16:	01 9b       	sbis	0x00, 1	; 0
    8f18:	04 c0       	rjmp	.+8      	; 0x8f22 <main+0x84>
    8f1a:	07 9b       	sbis	0x00, 7	; 0
    8f1c:	02 c0       	rjmp	.+4      	; 0x8f22 <main+0x84>
    8f1e:	04 99       	sbic	0x00, 4	; 0
    8f20:	fa cf       	rjmp	.-12     	; 0x8f16 <main+0x78>
    8f22:	01 9b       	sbis	0x00, 1	; 0
    8f24:	18 c0       	rjmp	.+48     	; 0x8f56 <main+0xb8>
    8f26:	07 9b       	sbis	0x00, 7	; 0
    8f28:	16 c0       	rjmp	.+44     	; 0x8f56 <main+0xb8>
    8f2a:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <_Z7TX_Initv>
    8f2e:	78 94       	sei
    8f30:	0e 94 6b 41 	call	0x82d6	; 0x82d6 <_Z10MainScreenv>
    8f34:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <_Z10AskButtonsv>
    8f38:	c8 2f       	mov	r28, r24
    8f3a:	82 fd       	sbrc	r24, 2
    8f3c:	0e 94 04 2b 	call	0x5608	; 0x5608 <_Z10Timer_Initv>
    8f40:	c0 fd       	sbrc	r28, 0
    8f42:	0e 94 22 2b 	call	0x5644	; 0x5644 <_Z10Timer_Stopv>
    8f46:	c1 fd       	sbrc	r28, 1
    8f48:	0e 94 1e 2b 	call	0x563c	; 0x563c <_Z11Timer_Startv>
    8f4c:	c0 32       	cpi	r28, 0x20	; 32
    8f4e:	81 f7       	brne	.-32     	; 0x8f30 <main+0x92>
    8f50:	0e 94 aa 43 	call	0x8754	; 0x8754 <_Z8MainMenuv>
    8f54:	ed cf       	rjmp	.-38     	; 0x8f30 <main+0x92>
    8f56:	0e 94 43 29 	call	0x5286	; 0x5286 <_Z8TX_Resetv>
    8f5a:	e7 cf       	rjmp	.-50     	; 0x8f2a <main+0x8c>

00008f5c <_ZNK5CMenu19GetMenuVisibleCountEv>:
{
    return GetStatusBarHeight() + GetCaptionHeight();
}

inline uint8_t CMenu::GetMenuVisibleCount() const
{
    8f5c:	fc 01       	movw	r30, r24
    return GetStatusBarFont().H;
}

inline uint8_t CMenu::GetHeaderHeight() const
{
    return GetStatusBarHeight() + GetCaptionHeight();
    8f5e:	20 91 c5 0c 	lds	r18, 0x0CC5
    8f62:	80 91 cb 0c 	lds	r24, 0x0CCB
    8f66:	28 0f       	add	r18, r24
}

inline uint8_t CMenu::GetMenuVisibleCount() const
{
    uint8_t MenuVisibleCount = (TFT_ScreenHeight - GetHeaderHeight() - 2) / GetItemFont().H;
    8f68:	8e e7       	ldi	r24, 0x7E	; 126
    8f6a:	90 e0       	ldi	r25, 0x00	; 0
    8f6c:	82 1b       	sub	r24, r18
    8f6e:	91 09       	sbc	r25, r1
    8f70:	a5 81       	ldd	r26, Z+5	; 0x05
    8f72:	b6 81       	ldd	r27, Z+6	; 0x06
    8f74:	11 96       	adiw	r26, 0x01	; 1
    8f76:	6c 91       	ld	r22, X
    8f78:	70 e0       	ldi	r23, 0x00	; 0
    8f7a:	0e 94 18 48 	call	0x9030	; 0x9030 <__divmodhi4>
{
    return Font_8x12.H;
}
uint8_t CMenu::GetItemsCount() const
{
    return m_ItemsCount;
    8f7e:	94 81       	ldd	r25, Z+4	; 0x04
    8f80:	86 2f       	mov	r24, r22
    8f82:	96 17       	cp	r25, r22
    8f84:	08 f4       	brcc	.+2      	; 0x8f88 <_ZNK5CMenu19GetMenuVisibleCountEv+0x2c>
    8f86:	89 2f       	mov	r24, r25
    uint8_t MenuVisibleCount = (TFT_ScreenHeight - GetHeaderHeight() - 2) / GetItemFont().H;
    if(MenuVisibleCount > GetItemsCount())
        MenuVisibleCount = GetItemsCount();

    return MenuVisibleCount;
}
    8f88:	08 95       	ret

00008f8a <__mulhisi3>:
    8f8a:	0e 94 cd 47 	call	0x8f9a	; 0x8f9a <__umulhisi3>
    8f8e:	33 23       	and	r19, r19
    8f90:	12 f4       	brpl	.+4      	; 0x8f96 <__mulhisi3+0xc>
    8f92:	8a 1b       	sub	r24, r26
    8f94:	9b 0b       	sbc	r25, r27
    8f96:	0c 94 de 47 	jmp	0x8fbc	; 0x8fbc <__usmulhisi3_tail>

00008f9a <__umulhisi3>:
    8f9a:	a2 9f       	mul	r26, r18
    8f9c:	b0 01       	movw	r22, r0
    8f9e:	b3 9f       	mul	r27, r19
    8fa0:	c0 01       	movw	r24, r0
    8fa2:	a3 9f       	mul	r26, r19
    8fa4:	70 0d       	add	r23, r0
    8fa6:	81 1d       	adc	r24, r1
    8fa8:	11 24       	eor	r1, r1
    8faa:	91 1d       	adc	r25, r1
    8fac:	b2 9f       	mul	r27, r18
    8fae:	70 0d       	add	r23, r0
    8fb0:	81 1d       	adc	r24, r1
    8fb2:	11 24       	eor	r1, r1
    8fb4:	91 1d       	adc	r25, r1
    8fb6:	08 95       	ret

00008fb8 <__usmulhisi3>:
    8fb8:	0e 94 cd 47 	call	0x8f9a	; 0x8f9a <__umulhisi3>

00008fbc <__usmulhisi3_tail>:
    8fbc:	b7 ff       	sbrs	r27, 7
    8fbe:	08 95       	ret
    8fc0:	82 1b       	sub	r24, r18
    8fc2:	93 0b       	sbc	r25, r19
    8fc4:	08 95       	ret

00008fc6 <__muluhisi3>:
    8fc6:	0e 94 cd 47 	call	0x8f9a	; 0x8f9a <__umulhisi3>
    8fca:	a5 9f       	mul	r26, r21
    8fcc:	90 0d       	add	r25, r0
    8fce:	b4 9f       	mul	r27, r20
    8fd0:	90 0d       	add	r25, r0
    8fd2:	a4 9f       	mul	r26, r20
    8fd4:	80 0d       	add	r24, r0
    8fd6:	91 1d       	adc	r25, r1
    8fd8:	11 24       	eor	r1, r1
    8fda:	08 95       	ret

00008fdc <__mulshisi3>:
    8fdc:	b7 ff       	sbrs	r27, 7
    8fde:	0c 94 e3 47 	jmp	0x8fc6	; 0x8fc6 <__muluhisi3>

00008fe2 <__mulohisi3>:
    8fe2:	0e 94 e3 47 	call	0x8fc6	; 0x8fc6 <__muluhisi3>
    8fe6:	82 1b       	sub	r24, r18
    8fe8:	93 0b       	sbc	r25, r19
    8fea:	08 95       	ret

00008fec <__divmodqi4>:
    8fec:	87 fb       	bst	r24, 7
    8fee:	08 2e       	mov	r0, r24
    8ff0:	06 26       	eor	r0, r22
    8ff2:	87 fd       	sbrc	r24, 7
    8ff4:	81 95       	neg	r24
    8ff6:	67 fd       	sbrc	r22, 7
    8ff8:	61 95       	neg	r22
    8ffa:	0e 94 73 48 	call	0x90e6	; 0x90e6 <__udivmodqi4>
    8ffe:	0e f4       	brtc	.+2      	; 0x9002 <__divmodqi4_1>
    9000:	91 95       	neg	r25

00009002 <__divmodqi4_1>:
    9002:	07 fc       	sbrc	r0, 7
    9004:	81 95       	neg	r24

00009006 <__divmodqi4_exit>:
    9006:	08 95       	ret

00009008 <__udivmodhi4>:
    9008:	aa 1b       	sub	r26, r26
    900a:	bb 1b       	sub	r27, r27
    900c:	51 e1       	ldi	r21, 0x11	; 17
    900e:	07 c0       	rjmp	.+14     	; 0x901e <__udivmodhi4_ep>

00009010 <__udivmodhi4_loop>:
    9010:	aa 1f       	adc	r26, r26
    9012:	bb 1f       	adc	r27, r27
    9014:	a6 17       	cp	r26, r22
    9016:	b7 07       	cpc	r27, r23
    9018:	10 f0       	brcs	.+4      	; 0x901e <__udivmodhi4_ep>
    901a:	a6 1b       	sub	r26, r22
    901c:	b7 0b       	sbc	r27, r23

0000901e <__udivmodhi4_ep>:
    901e:	88 1f       	adc	r24, r24
    9020:	99 1f       	adc	r25, r25
    9022:	5a 95       	dec	r21
    9024:	a9 f7       	brne	.-22     	; 0x9010 <__udivmodhi4_loop>
    9026:	80 95       	com	r24
    9028:	90 95       	com	r25
    902a:	bc 01       	movw	r22, r24
    902c:	cd 01       	movw	r24, r26
    902e:	08 95       	ret

00009030 <__divmodhi4>:
    9030:	97 fb       	bst	r25, 7
    9032:	07 2e       	mov	r0, r23
    9034:	16 f4       	brtc	.+4      	; 0x903a <__divmodhi4+0xa>
    9036:	00 94       	com	r0
    9038:	07 d0       	rcall	.+14     	; 0x9048 <__divmodhi4_neg1>
    903a:	77 fd       	sbrc	r23, 7
    903c:	09 d0       	rcall	.+18     	; 0x9050 <__divmodhi4_neg2>
    903e:	0e 94 04 48 	call	0x9008	; 0x9008 <__udivmodhi4>
    9042:	07 fc       	sbrc	r0, 7
    9044:	05 d0       	rcall	.+10     	; 0x9050 <__divmodhi4_neg2>
    9046:	3e f4       	brtc	.+14     	; 0x9056 <__divmodhi4_exit>

00009048 <__divmodhi4_neg1>:
    9048:	90 95       	com	r25
    904a:	81 95       	neg	r24
    904c:	9f 4f       	sbci	r25, 0xFF	; 255
    904e:	08 95       	ret

00009050 <__divmodhi4_neg2>:
    9050:	70 95       	com	r23
    9052:	61 95       	neg	r22
    9054:	7f 4f       	sbci	r23, 0xFF	; 255

00009056 <__divmodhi4_exit>:
    9056:	08 95       	ret

00009058 <__udivmodsi4>:
    9058:	a1 e2       	ldi	r26, 0x21	; 33
    905a:	1a 2e       	mov	r1, r26
    905c:	aa 1b       	sub	r26, r26
    905e:	bb 1b       	sub	r27, r27
    9060:	fd 01       	movw	r30, r26
    9062:	0d c0       	rjmp	.+26     	; 0x907e <__udivmodsi4_ep>

00009064 <__udivmodsi4_loop>:
    9064:	aa 1f       	adc	r26, r26
    9066:	bb 1f       	adc	r27, r27
    9068:	ee 1f       	adc	r30, r30
    906a:	ff 1f       	adc	r31, r31
    906c:	a2 17       	cp	r26, r18
    906e:	b3 07       	cpc	r27, r19
    9070:	e4 07       	cpc	r30, r20
    9072:	f5 07       	cpc	r31, r21
    9074:	20 f0       	brcs	.+8      	; 0x907e <__udivmodsi4_ep>
    9076:	a2 1b       	sub	r26, r18
    9078:	b3 0b       	sbc	r27, r19
    907a:	e4 0b       	sbc	r30, r20
    907c:	f5 0b       	sbc	r31, r21

0000907e <__udivmodsi4_ep>:
    907e:	66 1f       	adc	r22, r22
    9080:	77 1f       	adc	r23, r23
    9082:	88 1f       	adc	r24, r24
    9084:	99 1f       	adc	r25, r25
    9086:	1a 94       	dec	r1
    9088:	69 f7       	brne	.-38     	; 0x9064 <__udivmodsi4_loop>
    908a:	60 95       	com	r22
    908c:	70 95       	com	r23
    908e:	80 95       	com	r24
    9090:	90 95       	com	r25
    9092:	9b 01       	movw	r18, r22
    9094:	ac 01       	movw	r20, r24
    9096:	bd 01       	movw	r22, r26
    9098:	cf 01       	movw	r24, r30
    909a:	08 95       	ret

0000909c <__divmodsi4>:
    909c:	05 2e       	mov	r0, r21
    909e:	97 fb       	bst	r25, 7
    90a0:	1e f4       	brtc	.+6      	; 0x90a8 <__divmodsi4+0xc>
    90a2:	00 94       	com	r0
    90a4:	0e 94 65 48 	call	0x90ca	; 0x90ca <__negsi2>
    90a8:	57 fd       	sbrc	r21, 7
    90aa:	07 d0       	rcall	.+14     	; 0x90ba <__divmodsi4_neg2>
    90ac:	0e 94 2c 48 	call	0x9058	; 0x9058 <__udivmodsi4>
    90b0:	07 fc       	sbrc	r0, 7
    90b2:	03 d0       	rcall	.+6      	; 0x90ba <__divmodsi4_neg2>
    90b4:	4e f4       	brtc	.+18     	; 0x90c8 <__divmodsi4_exit>
    90b6:	0c 94 65 48 	jmp	0x90ca	; 0x90ca <__negsi2>

000090ba <__divmodsi4_neg2>:
    90ba:	50 95       	com	r21
    90bc:	40 95       	com	r20
    90be:	30 95       	com	r19
    90c0:	21 95       	neg	r18
    90c2:	3f 4f       	sbci	r19, 0xFF	; 255
    90c4:	4f 4f       	sbci	r20, 0xFF	; 255
    90c6:	5f 4f       	sbci	r21, 0xFF	; 255

000090c8 <__divmodsi4_exit>:
    90c8:	08 95       	ret

000090ca <__negsi2>:
    90ca:	90 95       	com	r25
    90cc:	80 95       	com	r24
    90ce:	70 95       	com	r23
    90d0:	61 95       	neg	r22
    90d2:	7f 4f       	sbci	r23, 0xFF	; 255
    90d4:	8f 4f       	sbci	r24, 0xFF	; 255
    90d6:	9f 4f       	sbci	r25, 0xFF	; 255
    90d8:	08 95       	ret

000090da <__tablejump2__>:
    90da:	ee 0f       	add	r30, r30
    90dc:	ff 1f       	adc	r31, r31

000090de <__tablejump__>:
    90de:	05 90       	lpm	r0, Z+
    90e0:	f4 91       	lpm	r31, Z
    90e2:	e0 2d       	mov	r30, r0
    90e4:	19 94       	eijmp

000090e6 <__udivmodqi4>:
    90e6:	99 1b       	sub	r25, r25
    90e8:	79 e0       	ldi	r23, 0x09	; 9
    90ea:	04 c0       	rjmp	.+8      	; 0x90f4 <__udivmodqi4_ep>

000090ec <__udivmodqi4_loop>:
    90ec:	99 1f       	adc	r25, r25
    90ee:	96 17       	cp	r25, r22
    90f0:	08 f0       	brcs	.+2      	; 0x90f4 <__udivmodqi4_ep>
    90f2:	96 1b       	sub	r25, r22

000090f4 <__udivmodqi4_ep>:
    90f4:	88 1f       	adc	r24, r24
    90f6:	7a 95       	dec	r23
    90f8:	c9 f7       	brne	.-14     	; 0x90ec <__udivmodqi4_loop>
    90fa:	80 95       	com	r24
    90fc:	08 95       	ret

000090fe <strchr>:
    90fe:	fc 01       	movw	r30, r24
    9100:	81 91       	ld	r24, Z+
    9102:	86 17       	cp	r24, r22
    9104:	21 f0       	breq	.+8      	; 0x910e <strchr+0x10>
    9106:	88 23       	and	r24, r24
    9108:	d9 f7       	brne	.-10     	; 0x9100 <strchr+0x2>
    910a:	99 27       	eor	r25, r25
    910c:	08 95       	ret
    910e:	31 97       	sbiw	r30, 0x01	; 1
    9110:	cf 01       	movw	r24, r30
    9112:	08 95       	ret

00009114 <strcpy>:
    9114:	fb 01       	movw	r30, r22
    9116:	dc 01       	movw	r26, r24
    9118:	01 90       	ld	r0, Z+
    911a:	0d 92       	st	X+, r0
    911c:	00 20       	and	r0, r0
    911e:	e1 f7       	brne	.-8      	; 0x9118 <strcpy+0x4>
    9120:	08 95       	ret

00009122 <snprintf>:
    9122:	0f 93       	push	r16
    9124:	1f 93       	push	r17
    9126:	cf 93       	push	r28
    9128:	df 93       	push	r29
    912a:	cd b7       	in	r28, 0x3d	; 61
    912c:	de b7       	in	r29, 0x3e	; 62
    912e:	2e 97       	sbiw	r28, 0x0e	; 14
    9130:	0f b6       	in	r0, 0x3f	; 63
    9132:	f8 94       	cli
    9134:	de bf       	out	0x3e, r29	; 62
    9136:	0f be       	out	0x3f, r0	; 63
    9138:	cd bf       	out	0x3d, r28	; 61
    913a:	0e 89       	ldd	r16, Y+22	; 0x16
    913c:	1f 89       	ldd	r17, Y+23	; 0x17
    913e:	88 8d       	ldd	r24, Y+24	; 0x18
    9140:	99 8d       	ldd	r25, Y+25	; 0x19
    9142:	26 e0       	ldi	r18, 0x06	; 6
    9144:	2c 83       	std	Y+4, r18	; 0x04
    9146:	1a 83       	std	Y+2, r17	; 0x02
    9148:	09 83       	std	Y+1, r16	; 0x01
    914a:	97 ff       	sbrs	r25, 7
    914c:	02 c0       	rjmp	.+4      	; 0x9152 <snprintf+0x30>
    914e:	80 e0       	ldi	r24, 0x00	; 0
    9150:	90 e8       	ldi	r25, 0x80	; 128
    9152:	01 97       	sbiw	r24, 0x01	; 1
    9154:	9e 83       	std	Y+6, r25	; 0x06
    9156:	8d 83       	std	Y+5, r24	; 0x05
    9158:	ae 01       	movw	r20, r28
    915a:	44 5e       	subi	r20, 0xE4	; 228
    915c:	5f 4f       	sbci	r21, 0xFF	; 255
    915e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    9160:	7b 8d       	ldd	r23, Y+27	; 0x1b
    9162:	ce 01       	movw	r24, r28
    9164:	01 96       	adiw	r24, 0x01	; 1
    9166:	0e 94 fd 48 	call	0x91fa	; 0x91fa <vfprintf>
    916a:	4d 81       	ldd	r20, Y+5	; 0x05
    916c:	5e 81       	ldd	r21, Y+6	; 0x06
    916e:	57 fd       	sbrc	r21, 7
    9170:	0a c0       	rjmp	.+20     	; 0x9186 <snprintf+0x64>
    9172:	2f 81       	ldd	r18, Y+7	; 0x07
    9174:	38 85       	ldd	r19, Y+8	; 0x08
    9176:	42 17       	cp	r20, r18
    9178:	53 07       	cpc	r21, r19
    917a:	0c f4       	brge	.+2      	; 0x917e <snprintf+0x5c>
    917c:	9a 01       	movw	r18, r20
    917e:	f8 01       	movw	r30, r16
    9180:	e2 0f       	add	r30, r18
    9182:	f3 1f       	adc	r31, r19
    9184:	10 82       	st	Z, r1
    9186:	2e 96       	adiw	r28, 0x0e	; 14
    9188:	0f b6       	in	r0, 0x3f	; 63
    918a:	f8 94       	cli
    918c:	de bf       	out	0x3e, r29	; 62
    918e:	0f be       	out	0x3f, r0	; 63
    9190:	cd bf       	out	0x3d, r28	; 61
    9192:	df 91       	pop	r29
    9194:	cf 91       	pop	r28
    9196:	1f 91       	pop	r17
    9198:	0f 91       	pop	r16
    919a:	08 95       	ret

0000919c <sprintf>:
    919c:	0f 93       	push	r16
    919e:	1f 93       	push	r17
    91a0:	cf 93       	push	r28
    91a2:	df 93       	push	r29
    91a4:	cd b7       	in	r28, 0x3d	; 61
    91a6:	de b7       	in	r29, 0x3e	; 62
    91a8:	2e 97       	sbiw	r28, 0x0e	; 14
    91aa:	0f b6       	in	r0, 0x3f	; 63
    91ac:	f8 94       	cli
    91ae:	de bf       	out	0x3e, r29	; 62
    91b0:	0f be       	out	0x3f, r0	; 63
    91b2:	cd bf       	out	0x3d, r28	; 61
    91b4:	0e 89       	ldd	r16, Y+22	; 0x16
    91b6:	1f 89       	ldd	r17, Y+23	; 0x17
    91b8:	86 e0       	ldi	r24, 0x06	; 6
    91ba:	8c 83       	std	Y+4, r24	; 0x04
    91bc:	1a 83       	std	Y+2, r17	; 0x02
    91be:	09 83       	std	Y+1, r16	; 0x01
    91c0:	8f ef       	ldi	r24, 0xFF	; 255
    91c2:	9f e7       	ldi	r25, 0x7F	; 127
    91c4:	9e 83       	std	Y+6, r25	; 0x06
    91c6:	8d 83       	std	Y+5, r24	; 0x05
    91c8:	ae 01       	movw	r20, r28
    91ca:	46 5e       	subi	r20, 0xE6	; 230
    91cc:	5f 4f       	sbci	r21, 0xFF	; 255
    91ce:	68 8d       	ldd	r22, Y+24	; 0x18
    91d0:	79 8d       	ldd	r23, Y+25	; 0x19
    91d2:	ce 01       	movw	r24, r28
    91d4:	01 96       	adiw	r24, 0x01	; 1
    91d6:	0e 94 fd 48 	call	0x91fa	; 0x91fa <vfprintf>
    91da:	ef 81       	ldd	r30, Y+7	; 0x07
    91dc:	f8 85       	ldd	r31, Y+8	; 0x08
    91de:	e0 0f       	add	r30, r16
    91e0:	f1 1f       	adc	r31, r17
    91e2:	10 82       	st	Z, r1
    91e4:	2e 96       	adiw	r28, 0x0e	; 14
    91e6:	0f b6       	in	r0, 0x3f	; 63
    91e8:	f8 94       	cli
    91ea:	de bf       	out	0x3e, r29	; 62
    91ec:	0f be       	out	0x3f, r0	; 63
    91ee:	cd bf       	out	0x3d, r28	; 61
    91f0:	df 91       	pop	r29
    91f2:	cf 91       	pop	r28
    91f4:	1f 91       	pop	r17
    91f6:	0f 91       	pop	r16
    91f8:	08 95       	ret

000091fa <vfprintf>:
    91fa:	2f 92       	push	r2
    91fc:	3f 92       	push	r3
    91fe:	4f 92       	push	r4
    9200:	5f 92       	push	r5
    9202:	6f 92       	push	r6
    9204:	7f 92       	push	r7
    9206:	8f 92       	push	r8
    9208:	9f 92       	push	r9
    920a:	af 92       	push	r10
    920c:	bf 92       	push	r11
    920e:	cf 92       	push	r12
    9210:	df 92       	push	r13
    9212:	ef 92       	push	r14
    9214:	ff 92       	push	r15
    9216:	0f 93       	push	r16
    9218:	1f 93       	push	r17
    921a:	cf 93       	push	r28
    921c:	df 93       	push	r29
    921e:	cd b7       	in	r28, 0x3d	; 61
    9220:	de b7       	in	r29, 0x3e	; 62
    9222:	2c 97       	sbiw	r28, 0x0c	; 12
    9224:	0f b6       	in	r0, 0x3f	; 63
    9226:	f8 94       	cli
    9228:	de bf       	out	0x3e, r29	; 62
    922a:	0f be       	out	0x3f, r0	; 63
    922c:	cd bf       	out	0x3d, r28	; 61
    922e:	7c 01       	movw	r14, r24
    9230:	6b 01       	movw	r12, r22
    9232:	8a 01       	movw	r16, r20
    9234:	fc 01       	movw	r30, r24
    9236:	17 82       	std	Z+7, r1	; 0x07
    9238:	16 82       	std	Z+6, r1	; 0x06
    923a:	83 81       	ldd	r24, Z+3	; 0x03
    923c:	81 ff       	sbrs	r24, 1
    923e:	bd c1       	rjmp	.+890    	; 0x95ba <vfprintf+0x3c0>
    9240:	ce 01       	movw	r24, r28
    9242:	01 96       	adiw	r24, 0x01	; 1
    9244:	4c 01       	movw	r8, r24
    9246:	f7 01       	movw	r30, r14
    9248:	93 81       	ldd	r25, Z+3	; 0x03
    924a:	f6 01       	movw	r30, r12
    924c:	93 fd       	sbrc	r25, 3
    924e:	85 91       	lpm	r24, Z+
    9250:	93 ff       	sbrs	r25, 3
    9252:	81 91       	ld	r24, Z+
    9254:	6f 01       	movw	r12, r30
    9256:	88 23       	and	r24, r24
    9258:	09 f4       	brne	.+2      	; 0x925c <vfprintf+0x62>
    925a:	ab c1       	rjmp	.+854    	; 0x95b2 <vfprintf+0x3b8>
    925c:	85 32       	cpi	r24, 0x25	; 37
    925e:	39 f4       	brne	.+14     	; 0x926e <vfprintf+0x74>
    9260:	93 fd       	sbrc	r25, 3
    9262:	85 91       	lpm	r24, Z+
    9264:	93 ff       	sbrs	r25, 3
    9266:	81 91       	ld	r24, Z+
    9268:	6f 01       	movw	r12, r30
    926a:	85 32       	cpi	r24, 0x25	; 37
    926c:	29 f4       	brne	.+10     	; 0x9278 <vfprintf+0x7e>
    926e:	b7 01       	movw	r22, r14
    9270:	90 e0       	ldi	r25, 0x00	; 0
    9272:	0e 94 49 4b 	call	0x9692	; 0x9692 <fputc>
    9276:	e7 cf       	rjmp	.-50     	; 0x9246 <vfprintf+0x4c>
    9278:	51 2c       	mov	r5, r1
    927a:	31 2c       	mov	r3, r1
    927c:	20 e0       	ldi	r18, 0x00	; 0
    927e:	20 32       	cpi	r18, 0x20	; 32
    9280:	a0 f4       	brcc	.+40     	; 0x92aa <vfprintf+0xb0>
    9282:	8b 32       	cpi	r24, 0x2B	; 43
    9284:	69 f0       	breq	.+26     	; 0x92a0 <vfprintf+0xa6>
    9286:	30 f4       	brcc	.+12     	; 0x9294 <vfprintf+0x9a>
    9288:	80 32       	cpi	r24, 0x20	; 32
    928a:	59 f0       	breq	.+22     	; 0x92a2 <vfprintf+0xa8>
    928c:	83 32       	cpi	r24, 0x23	; 35
    928e:	69 f4       	brne	.+26     	; 0x92aa <vfprintf+0xb0>
    9290:	20 61       	ori	r18, 0x10	; 16
    9292:	2c c0       	rjmp	.+88     	; 0x92ec <vfprintf+0xf2>
    9294:	8d 32       	cpi	r24, 0x2D	; 45
    9296:	39 f0       	breq	.+14     	; 0x92a6 <vfprintf+0xac>
    9298:	80 33       	cpi	r24, 0x30	; 48
    929a:	39 f4       	brne	.+14     	; 0x92aa <vfprintf+0xb0>
    929c:	21 60       	ori	r18, 0x01	; 1
    929e:	26 c0       	rjmp	.+76     	; 0x92ec <vfprintf+0xf2>
    92a0:	22 60       	ori	r18, 0x02	; 2
    92a2:	24 60       	ori	r18, 0x04	; 4
    92a4:	23 c0       	rjmp	.+70     	; 0x92ec <vfprintf+0xf2>
    92a6:	28 60       	ori	r18, 0x08	; 8
    92a8:	21 c0       	rjmp	.+66     	; 0x92ec <vfprintf+0xf2>
    92aa:	27 fd       	sbrc	r18, 7
    92ac:	27 c0       	rjmp	.+78     	; 0x92fc <vfprintf+0x102>
    92ae:	30 ed       	ldi	r19, 0xD0	; 208
    92b0:	38 0f       	add	r19, r24
    92b2:	3a 30       	cpi	r19, 0x0A	; 10
    92b4:	78 f4       	brcc	.+30     	; 0x92d4 <vfprintf+0xda>
    92b6:	26 ff       	sbrs	r18, 6
    92b8:	06 c0       	rjmp	.+12     	; 0x92c6 <vfprintf+0xcc>
    92ba:	fa e0       	ldi	r31, 0x0A	; 10
    92bc:	5f 9e       	mul	r5, r31
    92be:	30 0d       	add	r19, r0
    92c0:	11 24       	eor	r1, r1
    92c2:	53 2e       	mov	r5, r19
    92c4:	13 c0       	rjmp	.+38     	; 0x92ec <vfprintf+0xf2>
    92c6:	8a e0       	ldi	r24, 0x0A	; 10
    92c8:	38 9e       	mul	r3, r24
    92ca:	30 0d       	add	r19, r0
    92cc:	11 24       	eor	r1, r1
    92ce:	33 2e       	mov	r3, r19
    92d0:	20 62       	ori	r18, 0x20	; 32
    92d2:	0c c0       	rjmp	.+24     	; 0x92ec <vfprintf+0xf2>
    92d4:	8e 32       	cpi	r24, 0x2E	; 46
    92d6:	21 f4       	brne	.+8      	; 0x92e0 <vfprintf+0xe6>
    92d8:	26 fd       	sbrc	r18, 6
    92da:	6b c1       	rjmp	.+726    	; 0x95b2 <vfprintf+0x3b8>
    92dc:	20 64       	ori	r18, 0x40	; 64
    92de:	06 c0       	rjmp	.+12     	; 0x92ec <vfprintf+0xf2>
    92e0:	8c 36       	cpi	r24, 0x6C	; 108
    92e2:	11 f4       	brne	.+4      	; 0x92e8 <vfprintf+0xee>
    92e4:	20 68       	ori	r18, 0x80	; 128
    92e6:	02 c0       	rjmp	.+4      	; 0x92ec <vfprintf+0xf2>
    92e8:	88 36       	cpi	r24, 0x68	; 104
    92ea:	41 f4       	brne	.+16     	; 0x92fc <vfprintf+0x102>
    92ec:	f6 01       	movw	r30, r12
    92ee:	93 fd       	sbrc	r25, 3
    92f0:	85 91       	lpm	r24, Z+
    92f2:	93 ff       	sbrs	r25, 3
    92f4:	81 91       	ld	r24, Z+
    92f6:	6f 01       	movw	r12, r30
    92f8:	81 11       	cpse	r24, r1
    92fa:	c1 cf       	rjmp	.-126    	; 0x927e <vfprintf+0x84>
    92fc:	98 2f       	mov	r25, r24
    92fe:	9f 7d       	andi	r25, 0xDF	; 223
    9300:	95 54       	subi	r25, 0x45	; 69
    9302:	93 30       	cpi	r25, 0x03	; 3
    9304:	28 f4       	brcc	.+10     	; 0x9310 <vfprintf+0x116>
    9306:	0c 5f       	subi	r16, 0xFC	; 252
    9308:	1f 4f       	sbci	r17, 0xFF	; 255
    930a:	ff e3       	ldi	r31, 0x3F	; 63
    930c:	f9 83       	std	Y+1, r31	; 0x01
    930e:	0d c0       	rjmp	.+26     	; 0x932a <vfprintf+0x130>
    9310:	83 36       	cpi	r24, 0x63	; 99
    9312:	31 f0       	breq	.+12     	; 0x9320 <vfprintf+0x126>
    9314:	83 37       	cpi	r24, 0x73	; 115
    9316:	71 f0       	breq	.+28     	; 0x9334 <vfprintf+0x13a>
    9318:	83 35       	cpi	r24, 0x53	; 83
    931a:	09 f0       	breq	.+2      	; 0x931e <vfprintf+0x124>
    931c:	5b c0       	rjmp	.+182    	; 0x93d4 <vfprintf+0x1da>
    931e:	22 c0       	rjmp	.+68     	; 0x9364 <vfprintf+0x16a>
    9320:	f8 01       	movw	r30, r16
    9322:	80 81       	ld	r24, Z
    9324:	89 83       	std	Y+1, r24	; 0x01
    9326:	0e 5f       	subi	r16, 0xFE	; 254
    9328:	1f 4f       	sbci	r17, 0xFF	; 255
    932a:	44 24       	eor	r4, r4
    932c:	43 94       	inc	r4
    932e:	51 2c       	mov	r5, r1
    9330:	54 01       	movw	r10, r8
    9332:	15 c0       	rjmp	.+42     	; 0x935e <vfprintf+0x164>
    9334:	38 01       	movw	r6, r16
    9336:	f2 e0       	ldi	r31, 0x02	; 2
    9338:	6f 0e       	add	r6, r31
    933a:	71 1c       	adc	r7, r1
    933c:	f8 01       	movw	r30, r16
    933e:	a0 80       	ld	r10, Z
    9340:	b1 80       	ldd	r11, Z+1	; 0x01
    9342:	26 ff       	sbrs	r18, 6
    9344:	03 c0       	rjmp	.+6      	; 0x934c <vfprintf+0x152>
    9346:	65 2d       	mov	r22, r5
    9348:	70 e0       	ldi	r23, 0x00	; 0
    934a:	02 c0       	rjmp	.+4      	; 0x9350 <vfprintf+0x156>
    934c:	6f ef       	ldi	r22, 0xFF	; 255
    934e:	7f ef       	ldi	r23, 0xFF	; 255
    9350:	c5 01       	movw	r24, r10
    9352:	2c 87       	std	Y+12, r18	; 0x0c
    9354:	0e 94 3e 4b 	call	0x967c	; 0x967c <strnlen>
    9358:	2c 01       	movw	r4, r24
    935a:	83 01       	movw	r16, r6
    935c:	2c 85       	ldd	r18, Y+12	; 0x0c
    935e:	2f 77       	andi	r18, 0x7F	; 127
    9360:	22 2e       	mov	r2, r18
    9362:	17 c0       	rjmp	.+46     	; 0x9392 <vfprintf+0x198>
    9364:	38 01       	movw	r6, r16
    9366:	f2 e0       	ldi	r31, 0x02	; 2
    9368:	6f 0e       	add	r6, r31
    936a:	71 1c       	adc	r7, r1
    936c:	f8 01       	movw	r30, r16
    936e:	a0 80       	ld	r10, Z
    9370:	b1 80       	ldd	r11, Z+1	; 0x01
    9372:	26 ff       	sbrs	r18, 6
    9374:	03 c0       	rjmp	.+6      	; 0x937c <vfprintf+0x182>
    9376:	65 2d       	mov	r22, r5
    9378:	70 e0       	ldi	r23, 0x00	; 0
    937a:	02 c0       	rjmp	.+4      	; 0x9380 <vfprintf+0x186>
    937c:	6f ef       	ldi	r22, 0xFF	; 255
    937e:	7f ef       	ldi	r23, 0xFF	; 255
    9380:	c5 01       	movw	r24, r10
    9382:	2c 87       	std	Y+12, r18	; 0x0c
    9384:	0e 94 33 4b 	call	0x9666	; 0x9666 <strnlen_P>
    9388:	2c 01       	movw	r4, r24
    938a:	2c 85       	ldd	r18, Y+12	; 0x0c
    938c:	20 68       	ori	r18, 0x80	; 128
    938e:	22 2e       	mov	r2, r18
    9390:	83 01       	movw	r16, r6
    9392:	23 fc       	sbrc	r2, 3
    9394:	1b c0       	rjmp	.+54     	; 0x93cc <vfprintf+0x1d2>
    9396:	83 2d       	mov	r24, r3
    9398:	90 e0       	ldi	r25, 0x00	; 0
    939a:	48 16       	cp	r4, r24
    939c:	59 06       	cpc	r5, r25
    939e:	b0 f4       	brcc	.+44     	; 0x93cc <vfprintf+0x1d2>
    93a0:	b7 01       	movw	r22, r14
    93a2:	80 e2       	ldi	r24, 0x20	; 32
    93a4:	90 e0       	ldi	r25, 0x00	; 0
    93a6:	0e 94 49 4b 	call	0x9692	; 0x9692 <fputc>
    93aa:	3a 94       	dec	r3
    93ac:	f4 cf       	rjmp	.-24     	; 0x9396 <vfprintf+0x19c>
    93ae:	f5 01       	movw	r30, r10
    93b0:	27 fc       	sbrc	r2, 7
    93b2:	85 91       	lpm	r24, Z+
    93b4:	27 fe       	sbrs	r2, 7
    93b6:	81 91       	ld	r24, Z+
    93b8:	5f 01       	movw	r10, r30
    93ba:	b7 01       	movw	r22, r14
    93bc:	90 e0       	ldi	r25, 0x00	; 0
    93be:	0e 94 49 4b 	call	0x9692	; 0x9692 <fputc>
    93c2:	31 10       	cpse	r3, r1
    93c4:	3a 94       	dec	r3
    93c6:	f1 e0       	ldi	r31, 0x01	; 1
    93c8:	4f 1a       	sub	r4, r31
    93ca:	51 08       	sbc	r5, r1
    93cc:	41 14       	cp	r4, r1
    93ce:	51 04       	cpc	r5, r1
    93d0:	71 f7       	brne	.-36     	; 0x93ae <vfprintf+0x1b4>
    93d2:	e5 c0       	rjmp	.+458    	; 0x959e <vfprintf+0x3a4>
    93d4:	84 36       	cpi	r24, 0x64	; 100
    93d6:	11 f0       	breq	.+4      	; 0x93dc <vfprintf+0x1e2>
    93d8:	89 36       	cpi	r24, 0x69	; 105
    93da:	39 f5       	brne	.+78     	; 0x942a <vfprintf+0x230>
    93dc:	f8 01       	movw	r30, r16
    93de:	27 ff       	sbrs	r18, 7
    93e0:	07 c0       	rjmp	.+14     	; 0x93f0 <vfprintf+0x1f6>
    93e2:	60 81       	ld	r22, Z
    93e4:	71 81       	ldd	r23, Z+1	; 0x01
    93e6:	82 81       	ldd	r24, Z+2	; 0x02
    93e8:	93 81       	ldd	r25, Z+3	; 0x03
    93ea:	0c 5f       	subi	r16, 0xFC	; 252
    93ec:	1f 4f       	sbci	r17, 0xFF	; 255
    93ee:	08 c0       	rjmp	.+16     	; 0x9400 <vfprintf+0x206>
    93f0:	60 81       	ld	r22, Z
    93f2:	71 81       	ldd	r23, Z+1	; 0x01
    93f4:	88 27       	eor	r24, r24
    93f6:	77 fd       	sbrc	r23, 7
    93f8:	80 95       	com	r24
    93fa:	98 2f       	mov	r25, r24
    93fc:	0e 5f       	subi	r16, 0xFE	; 254
    93fe:	1f 4f       	sbci	r17, 0xFF	; 255
    9400:	2f 76       	andi	r18, 0x6F	; 111
    9402:	b2 2e       	mov	r11, r18
    9404:	97 ff       	sbrs	r25, 7
    9406:	09 c0       	rjmp	.+18     	; 0x941a <vfprintf+0x220>
    9408:	90 95       	com	r25
    940a:	80 95       	com	r24
    940c:	70 95       	com	r23
    940e:	61 95       	neg	r22
    9410:	7f 4f       	sbci	r23, 0xFF	; 255
    9412:	8f 4f       	sbci	r24, 0xFF	; 255
    9414:	9f 4f       	sbci	r25, 0xFF	; 255
    9416:	20 68       	ori	r18, 0x80	; 128
    9418:	b2 2e       	mov	r11, r18
    941a:	2a e0       	ldi	r18, 0x0A	; 10
    941c:	30 e0       	ldi	r19, 0x00	; 0
    941e:	a4 01       	movw	r20, r8
    9420:	0e 94 7b 4b 	call	0x96f6	; 0x96f6 <__ultoa_invert>
    9424:	a8 2e       	mov	r10, r24
    9426:	a8 18       	sub	r10, r8
    9428:	44 c0       	rjmp	.+136    	; 0x94b2 <vfprintf+0x2b8>
    942a:	85 37       	cpi	r24, 0x75	; 117
    942c:	29 f4       	brne	.+10     	; 0x9438 <vfprintf+0x23e>
    942e:	2f 7e       	andi	r18, 0xEF	; 239
    9430:	b2 2e       	mov	r11, r18
    9432:	2a e0       	ldi	r18, 0x0A	; 10
    9434:	30 e0       	ldi	r19, 0x00	; 0
    9436:	25 c0       	rjmp	.+74     	; 0x9482 <vfprintf+0x288>
    9438:	f2 2f       	mov	r31, r18
    943a:	f9 7f       	andi	r31, 0xF9	; 249
    943c:	bf 2e       	mov	r11, r31
    943e:	8f 36       	cpi	r24, 0x6F	; 111
    9440:	c1 f0       	breq	.+48     	; 0x9472 <vfprintf+0x278>
    9442:	18 f4       	brcc	.+6      	; 0x944a <vfprintf+0x250>
    9444:	88 35       	cpi	r24, 0x58	; 88
    9446:	79 f0       	breq	.+30     	; 0x9466 <vfprintf+0x26c>
    9448:	b4 c0       	rjmp	.+360    	; 0x95b2 <vfprintf+0x3b8>
    944a:	80 37       	cpi	r24, 0x70	; 112
    944c:	19 f0       	breq	.+6      	; 0x9454 <vfprintf+0x25a>
    944e:	88 37       	cpi	r24, 0x78	; 120
    9450:	21 f0       	breq	.+8      	; 0x945a <vfprintf+0x260>
    9452:	af c0       	rjmp	.+350    	; 0x95b2 <vfprintf+0x3b8>
    9454:	2f 2f       	mov	r18, r31
    9456:	20 61       	ori	r18, 0x10	; 16
    9458:	b2 2e       	mov	r11, r18
    945a:	b4 fe       	sbrs	r11, 4
    945c:	0d c0       	rjmp	.+26     	; 0x9478 <vfprintf+0x27e>
    945e:	8b 2d       	mov	r24, r11
    9460:	84 60       	ori	r24, 0x04	; 4
    9462:	b8 2e       	mov	r11, r24
    9464:	09 c0       	rjmp	.+18     	; 0x9478 <vfprintf+0x27e>
    9466:	24 ff       	sbrs	r18, 4
    9468:	0a c0       	rjmp	.+20     	; 0x947e <vfprintf+0x284>
    946a:	9f 2f       	mov	r25, r31
    946c:	96 60       	ori	r25, 0x06	; 6
    946e:	b9 2e       	mov	r11, r25
    9470:	06 c0       	rjmp	.+12     	; 0x947e <vfprintf+0x284>
    9472:	28 e0       	ldi	r18, 0x08	; 8
    9474:	30 e0       	ldi	r19, 0x00	; 0
    9476:	05 c0       	rjmp	.+10     	; 0x9482 <vfprintf+0x288>
    9478:	20 e1       	ldi	r18, 0x10	; 16
    947a:	30 e0       	ldi	r19, 0x00	; 0
    947c:	02 c0       	rjmp	.+4      	; 0x9482 <vfprintf+0x288>
    947e:	20 e1       	ldi	r18, 0x10	; 16
    9480:	32 e0       	ldi	r19, 0x02	; 2
    9482:	f8 01       	movw	r30, r16
    9484:	b7 fe       	sbrs	r11, 7
    9486:	07 c0       	rjmp	.+14     	; 0x9496 <vfprintf+0x29c>
    9488:	60 81       	ld	r22, Z
    948a:	71 81       	ldd	r23, Z+1	; 0x01
    948c:	82 81       	ldd	r24, Z+2	; 0x02
    948e:	93 81       	ldd	r25, Z+3	; 0x03
    9490:	0c 5f       	subi	r16, 0xFC	; 252
    9492:	1f 4f       	sbci	r17, 0xFF	; 255
    9494:	06 c0       	rjmp	.+12     	; 0x94a2 <vfprintf+0x2a8>
    9496:	60 81       	ld	r22, Z
    9498:	71 81       	ldd	r23, Z+1	; 0x01
    949a:	80 e0       	ldi	r24, 0x00	; 0
    949c:	90 e0       	ldi	r25, 0x00	; 0
    949e:	0e 5f       	subi	r16, 0xFE	; 254
    94a0:	1f 4f       	sbci	r17, 0xFF	; 255
    94a2:	a4 01       	movw	r20, r8
    94a4:	0e 94 7b 4b 	call	0x96f6	; 0x96f6 <__ultoa_invert>
    94a8:	a8 2e       	mov	r10, r24
    94aa:	a8 18       	sub	r10, r8
    94ac:	fb 2d       	mov	r31, r11
    94ae:	ff 77       	andi	r31, 0x7F	; 127
    94b0:	bf 2e       	mov	r11, r31
    94b2:	b6 fe       	sbrs	r11, 6
    94b4:	0b c0       	rjmp	.+22     	; 0x94cc <vfprintf+0x2d2>
    94b6:	2b 2d       	mov	r18, r11
    94b8:	2e 7f       	andi	r18, 0xFE	; 254
    94ba:	a5 14       	cp	r10, r5
    94bc:	50 f4       	brcc	.+20     	; 0x94d2 <vfprintf+0x2d8>
    94be:	b4 fe       	sbrs	r11, 4
    94c0:	0a c0       	rjmp	.+20     	; 0x94d6 <vfprintf+0x2dc>
    94c2:	b2 fc       	sbrc	r11, 2
    94c4:	08 c0       	rjmp	.+16     	; 0x94d6 <vfprintf+0x2dc>
    94c6:	2b 2d       	mov	r18, r11
    94c8:	2e 7e       	andi	r18, 0xEE	; 238
    94ca:	05 c0       	rjmp	.+10     	; 0x94d6 <vfprintf+0x2dc>
    94cc:	7a 2c       	mov	r7, r10
    94ce:	2b 2d       	mov	r18, r11
    94d0:	03 c0       	rjmp	.+6      	; 0x94d8 <vfprintf+0x2de>
    94d2:	7a 2c       	mov	r7, r10
    94d4:	01 c0       	rjmp	.+2      	; 0x94d8 <vfprintf+0x2de>
    94d6:	75 2c       	mov	r7, r5
    94d8:	24 ff       	sbrs	r18, 4
    94da:	0d c0       	rjmp	.+26     	; 0x94f6 <vfprintf+0x2fc>
    94dc:	fe 01       	movw	r30, r28
    94de:	ea 0d       	add	r30, r10
    94e0:	f1 1d       	adc	r31, r1
    94e2:	80 81       	ld	r24, Z
    94e4:	80 33       	cpi	r24, 0x30	; 48
    94e6:	11 f4       	brne	.+4      	; 0x94ec <vfprintf+0x2f2>
    94e8:	29 7e       	andi	r18, 0xE9	; 233
    94ea:	09 c0       	rjmp	.+18     	; 0x94fe <vfprintf+0x304>
    94ec:	22 ff       	sbrs	r18, 2
    94ee:	06 c0       	rjmp	.+12     	; 0x94fc <vfprintf+0x302>
    94f0:	73 94       	inc	r7
    94f2:	73 94       	inc	r7
    94f4:	04 c0       	rjmp	.+8      	; 0x94fe <vfprintf+0x304>
    94f6:	82 2f       	mov	r24, r18
    94f8:	86 78       	andi	r24, 0x86	; 134
    94fa:	09 f0       	breq	.+2      	; 0x94fe <vfprintf+0x304>
    94fc:	73 94       	inc	r7
    94fe:	23 fd       	sbrc	r18, 3
    9500:	13 c0       	rjmp	.+38     	; 0x9528 <vfprintf+0x32e>
    9502:	20 ff       	sbrs	r18, 0
    9504:	06 c0       	rjmp	.+12     	; 0x9512 <vfprintf+0x318>
    9506:	5a 2c       	mov	r5, r10
    9508:	73 14       	cp	r7, r3
    950a:	18 f4       	brcc	.+6      	; 0x9512 <vfprintf+0x318>
    950c:	53 0c       	add	r5, r3
    950e:	57 18       	sub	r5, r7
    9510:	73 2c       	mov	r7, r3
    9512:	73 14       	cp	r7, r3
    9514:	68 f4       	brcc	.+26     	; 0x9530 <vfprintf+0x336>
    9516:	b7 01       	movw	r22, r14
    9518:	80 e2       	ldi	r24, 0x20	; 32
    951a:	90 e0       	ldi	r25, 0x00	; 0
    951c:	2c 87       	std	Y+12, r18	; 0x0c
    951e:	0e 94 49 4b 	call	0x9692	; 0x9692 <fputc>
    9522:	73 94       	inc	r7
    9524:	2c 85       	ldd	r18, Y+12	; 0x0c
    9526:	f5 cf       	rjmp	.-22     	; 0x9512 <vfprintf+0x318>
    9528:	73 14       	cp	r7, r3
    952a:	10 f4       	brcc	.+4      	; 0x9530 <vfprintf+0x336>
    952c:	37 18       	sub	r3, r7
    952e:	01 c0       	rjmp	.+2      	; 0x9532 <vfprintf+0x338>
    9530:	31 2c       	mov	r3, r1
    9532:	24 ff       	sbrs	r18, 4
    9534:	12 c0       	rjmp	.+36     	; 0x955a <vfprintf+0x360>
    9536:	b7 01       	movw	r22, r14
    9538:	80 e3       	ldi	r24, 0x30	; 48
    953a:	90 e0       	ldi	r25, 0x00	; 0
    953c:	2c 87       	std	Y+12, r18	; 0x0c
    953e:	0e 94 49 4b 	call	0x9692	; 0x9692 <fputc>
    9542:	2c 85       	ldd	r18, Y+12	; 0x0c
    9544:	22 ff       	sbrs	r18, 2
    9546:	17 c0       	rjmp	.+46     	; 0x9576 <vfprintf+0x37c>
    9548:	21 ff       	sbrs	r18, 1
    954a:	03 c0       	rjmp	.+6      	; 0x9552 <vfprintf+0x358>
    954c:	88 e5       	ldi	r24, 0x58	; 88
    954e:	90 e0       	ldi	r25, 0x00	; 0
    9550:	02 c0       	rjmp	.+4      	; 0x9556 <vfprintf+0x35c>
    9552:	88 e7       	ldi	r24, 0x78	; 120
    9554:	90 e0       	ldi	r25, 0x00	; 0
    9556:	b7 01       	movw	r22, r14
    9558:	0c c0       	rjmp	.+24     	; 0x9572 <vfprintf+0x378>
    955a:	82 2f       	mov	r24, r18
    955c:	86 78       	andi	r24, 0x86	; 134
    955e:	59 f0       	breq	.+22     	; 0x9576 <vfprintf+0x37c>
    9560:	21 fd       	sbrc	r18, 1
    9562:	02 c0       	rjmp	.+4      	; 0x9568 <vfprintf+0x36e>
    9564:	80 e2       	ldi	r24, 0x20	; 32
    9566:	01 c0       	rjmp	.+2      	; 0x956a <vfprintf+0x370>
    9568:	8b e2       	ldi	r24, 0x2B	; 43
    956a:	27 fd       	sbrc	r18, 7
    956c:	8d e2       	ldi	r24, 0x2D	; 45
    956e:	b7 01       	movw	r22, r14
    9570:	90 e0       	ldi	r25, 0x00	; 0
    9572:	0e 94 49 4b 	call	0x9692	; 0x9692 <fputc>
    9576:	a5 14       	cp	r10, r5
    9578:	38 f4       	brcc	.+14     	; 0x9588 <vfprintf+0x38e>
    957a:	b7 01       	movw	r22, r14
    957c:	80 e3       	ldi	r24, 0x30	; 48
    957e:	90 e0       	ldi	r25, 0x00	; 0
    9580:	0e 94 49 4b 	call	0x9692	; 0x9692 <fputc>
    9584:	5a 94       	dec	r5
    9586:	f7 cf       	rjmp	.-18     	; 0x9576 <vfprintf+0x37c>
    9588:	aa 94       	dec	r10
    958a:	f4 01       	movw	r30, r8
    958c:	ea 0d       	add	r30, r10
    958e:	f1 1d       	adc	r31, r1
    9590:	80 81       	ld	r24, Z
    9592:	b7 01       	movw	r22, r14
    9594:	90 e0       	ldi	r25, 0x00	; 0
    9596:	0e 94 49 4b 	call	0x9692	; 0x9692 <fputc>
    959a:	a1 10       	cpse	r10, r1
    959c:	f5 cf       	rjmp	.-22     	; 0x9588 <vfprintf+0x38e>
    959e:	33 20       	and	r3, r3
    95a0:	09 f4       	brne	.+2      	; 0x95a4 <vfprintf+0x3aa>
    95a2:	51 ce       	rjmp	.-862    	; 0x9246 <vfprintf+0x4c>
    95a4:	b7 01       	movw	r22, r14
    95a6:	80 e2       	ldi	r24, 0x20	; 32
    95a8:	90 e0       	ldi	r25, 0x00	; 0
    95aa:	0e 94 49 4b 	call	0x9692	; 0x9692 <fputc>
    95ae:	3a 94       	dec	r3
    95b0:	f6 cf       	rjmp	.-20     	; 0x959e <vfprintf+0x3a4>
    95b2:	f7 01       	movw	r30, r14
    95b4:	86 81       	ldd	r24, Z+6	; 0x06
    95b6:	97 81       	ldd	r25, Z+7	; 0x07
    95b8:	02 c0       	rjmp	.+4      	; 0x95be <vfprintf+0x3c4>
    95ba:	8f ef       	ldi	r24, 0xFF	; 255
    95bc:	9f ef       	ldi	r25, 0xFF	; 255
    95be:	2c 96       	adiw	r28, 0x0c	; 12
    95c0:	0f b6       	in	r0, 0x3f	; 63
    95c2:	f8 94       	cli
    95c4:	de bf       	out	0x3e, r29	; 62
    95c6:	0f be       	out	0x3f, r0	; 63
    95c8:	cd bf       	out	0x3d, r28	; 61
    95ca:	df 91       	pop	r29
    95cc:	cf 91       	pop	r28
    95ce:	1f 91       	pop	r17
    95d0:	0f 91       	pop	r16
    95d2:	ff 90       	pop	r15
    95d4:	ef 90       	pop	r14
    95d6:	df 90       	pop	r13
    95d8:	cf 90       	pop	r12
    95da:	bf 90       	pop	r11
    95dc:	af 90       	pop	r10
    95de:	9f 90       	pop	r9
    95e0:	8f 90       	pop	r8
    95e2:	7f 90       	pop	r7
    95e4:	6f 90       	pop	r6
    95e6:	5f 90       	pop	r5
    95e8:	4f 90       	pop	r4
    95ea:	3f 90       	pop	r3
    95ec:	2f 90       	pop	r2
    95ee:	08 95       	ret

000095f0 <__eerd_block_m2560>:
    95f0:	dc 01       	movw	r26, r24
    95f2:	cb 01       	movw	r24, r22

000095f4 <__eerd_blraw_m2560>:
    95f4:	fc 01       	movw	r30, r24
    95f6:	f9 99       	sbic	0x1f, 1	; 31
    95f8:	fe cf       	rjmp	.-4      	; 0x95f6 <__eerd_blraw_m2560+0x2>
    95fa:	06 c0       	rjmp	.+12     	; 0x9608 <__eerd_blraw_m2560+0x14>
    95fc:	f2 bd       	out	0x22, r31	; 34
    95fe:	e1 bd       	out	0x21, r30	; 33
    9600:	f8 9a       	sbi	0x1f, 0	; 31
    9602:	31 96       	adiw	r30, 0x01	; 1
    9604:	00 b4       	in	r0, 0x20	; 32
    9606:	0d 92       	st	X+, r0
    9608:	41 50       	subi	r20, 0x01	; 1
    960a:	50 40       	sbci	r21, 0x00	; 0
    960c:	b8 f7       	brcc	.-18     	; 0x95fc <__eerd_blraw_m2560+0x8>
    960e:	08 95       	ret

00009610 <__eerd_byte_m2560>:
    9610:	f9 99       	sbic	0x1f, 1	; 31
    9612:	fe cf       	rjmp	.-4      	; 0x9610 <__eerd_byte_m2560>
    9614:	92 bd       	out	0x22, r25	; 34
    9616:	81 bd       	out	0x21, r24	; 33
    9618:	f8 9a       	sbi	0x1f, 0	; 31
    961a:	99 27       	eor	r25, r25
    961c:	80 b5       	in	r24, 0x20	; 32
    961e:	08 95       	ret

00009620 <__eerd_word_m2560>:
    9620:	a8 e1       	ldi	r26, 0x18	; 24
    9622:	b0 e0       	ldi	r27, 0x00	; 0
    9624:	42 e0       	ldi	r20, 0x02	; 2
    9626:	50 e0       	ldi	r21, 0x00	; 0
    9628:	0c 94 fa 4a 	jmp	0x95f4	; 0x95f4 <__eerd_blraw_m2560>

0000962c <__eewr_block_m2560>:
    962c:	dc 01       	movw	r26, r24
    962e:	cb 01       	movw	r24, r22
    9630:	03 c0       	rjmp	.+6      	; 0x9638 <__eewr_block_m2560+0xc>
    9632:	2d 91       	ld	r18, X+
    9634:	0e 94 21 4b 	call	0x9642	; 0x9642 <__eewr_r18_m2560>
    9638:	41 50       	subi	r20, 0x01	; 1
    963a:	50 40       	sbci	r21, 0x00	; 0
    963c:	d0 f7       	brcc	.-12     	; 0x9632 <__eewr_block_m2560+0x6>
    963e:	08 95       	ret

00009640 <__eewr_byte_m2560>:
    9640:	26 2f       	mov	r18, r22

00009642 <__eewr_r18_m2560>:
    9642:	f9 99       	sbic	0x1f, 1	; 31
    9644:	fe cf       	rjmp	.-4      	; 0x9642 <__eewr_r18_m2560>
    9646:	1f ba       	out	0x1f, r1	; 31
    9648:	92 bd       	out	0x22, r25	; 34
    964a:	81 bd       	out	0x21, r24	; 33
    964c:	20 bd       	out	0x20, r18	; 32
    964e:	0f b6       	in	r0, 0x3f	; 63
    9650:	f8 94       	cli
    9652:	fa 9a       	sbi	0x1f, 2	; 31
    9654:	f9 9a       	sbi	0x1f, 1	; 31
    9656:	0f be       	out	0x3f, r0	; 63
    9658:	01 96       	adiw	r24, 0x01	; 1
    965a:	08 95       	ret

0000965c <__eewr_word_m2560>:
    965c:	0e 94 20 4b 	call	0x9640	; 0x9640 <__eewr_byte_m2560>
    9660:	27 2f       	mov	r18, r23
    9662:	0c 94 21 4b 	jmp	0x9642	; 0x9642 <__eewr_r18_m2560>

00009666 <strnlen_P>:
    9666:	fc 01       	movw	r30, r24
    9668:	05 90       	lpm	r0, Z+
    966a:	61 50       	subi	r22, 0x01	; 1
    966c:	70 40       	sbci	r23, 0x00	; 0
    966e:	01 10       	cpse	r0, r1
    9670:	d8 f7       	brcc	.-10     	; 0x9668 <strnlen_P+0x2>
    9672:	80 95       	com	r24
    9674:	90 95       	com	r25
    9676:	8e 0f       	add	r24, r30
    9678:	9f 1f       	adc	r25, r31
    967a:	08 95       	ret

0000967c <strnlen>:
    967c:	fc 01       	movw	r30, r24
    967e:	61 50       	subi	r22, 0x01	; 1
    9680:	70 40       	sbci	r23, 0x00	; 0
    9682:	01 90       	ld	r0, Z+
    9684:	01 10       	cpse	r0, r1
    9686:	d8 f7       	brcc	.-10     	; 0x967e <strnlen+0x2>
    9688:	80 95       	com	r24
    968a:	90 95       	com	r25
    968c:	8e 0f       	add	r24, r30
    968e:	9f 1f       	adc	r25, r31
    9690:	08 95       	ret

00009692 <fputc>:
    9692:	0f 93       	push	r16
    9694:	1f 93       	push	r17
    9696:	cf 93       	push	r28
    9698:	df 93       	push	r29
    969a:	18 2f       	mov	r17, r24
    969c:	09 2f       	mov	r16, r25
    969e:	eb 01       	movw	r28, r22
    96a0:	8b 81       	ldd	r24, Y+3	; 0x03
    96a2:	81 fd       	sbrc	r24, 1
    96a4:	03 c0       	rjmp	.+6      	; 0x96ac <fputc+0x1a>
    96a6:	8f ef       	ldi	r24, 0xFF	; 255
    96a8:	9f ef       	ldi	r25, 0xFF	; 255
    96aa:	20 c0       	rjmp	.+64     	; 0x96ec <fputc+0x5a>
    96ac:	82 ff       	sbrs	r24, 2
    96ae:	10 c0       	rjmp	.+32     	; 0x96d0 <fputc+0x3e>
    96b0:	4e 81       	ldd	r20, Y+6	; 0x06
    96b2:	5f 81       	ldd	r21, Y+7	; 0x07
    96b4:	2c 81       	ldd	r18, Y+4	; 0x04
    96b6:	3d 81       	ldd	r19, Y+5	; 0x05
    96b8:	42 17       	cp	r20, r18
    96ba:	53 07       	cpc	r21, r19
    96bc:	7c f4       	brge	.+30     	; 0x96dc <fputc+0x4a>
    96be:	e8 81       	ld	r30, Y
    96c0:	f9 81       	ldd	r31, Y+1	; 0x01
    96c2:	9f 01       	movw	r18, r30
    96c4:	2f 5f       	subi	r18, 0xFF	; 255
    96c6:	3f 4f       	sbci	r19, 0xFF	; 255
    96c8:	39 83       	std	Y+1, r19	; 0x01
    96ca:	28 83       	st	Y, r18
    96cc:	10 83       	st	Z, r17
    96ce:	06 c0       	rjmp	.+12     	; 0x96dc <fputc+0x4a>
    96d0:	e8 85       	ldd	r30, Y+8	; 0x08
    96d2:	f9 85       	ldd	r31, Y+9	; 0x09
    96d4:	81 2f       	mov	r24, r17
    96d6:	19 95       	eicall
    96d8:	89 2b       	or	r24, r25
    96da:	29 f7       	brne	.-54     	; 0x96a6 <fputc+0x14>
    96dc:	2e 81       	ldd	r18, Y+6	; 0x06
    96de:	3f 81       	ldd	r19, Y+7	; 0x07
    96e0:	2f 5f       	subi	r18, 0xFF	; 255
    96e2:	3f 4f       	sbci	r19, 0xFF	; 255
    96e4:	3f 83       	std	Y+7, r19	; 0x07
    96e6:	2e 83       	std	Y+6, r18	; 0x06
    96e8:	81 2f       	mov	r24, r17
    96ea:	90 2f       	mov	r25, r16
    96ec:	df 91       	pop	r29
    96ee:	cf 91       	pop	r28
    96f0:	1f 91       	pop	r17
    96f2:	0f 91       	pop	r16
    96f4:	08 95       	ret

000096f6 <__ultoa_invert>:
    96f6:	fa 01       	movw	r30, r20
    96f8:	aa 27       	eor	r26, r26
    96fa:	28 30       	cpi	r18, 0x08	; 8
    96fc:	51 f1       	breq	.+84     	; 0x9752 <__ultoa_invert+0x5c>
    96fe:	20 31       	cpi	r18, 0x10	; 16
    9700:	81 f1       	breq	.+96     	; 0x9762 <__ultoa_invert+0x6c>
    9702:	e8 94       	clt
    9704:	6f 93       	push	r22
    9706:	6e 7f       	andi	r22, 0xFE	; 254
    9708:	6e 5f       	subi	r22, 0xFE	; 254
    970a:	7f 4f       	sbci	r23, 0xFF	; 255
    970c:	8f 4f       	sbci	r24, 0xFF	; 255
    970e:	9f 4f       	sbci	r25, 0xFF	; 255
    9710:	af 4f       	sbci	r26, 0xFF	; 255
    9712:	b1 e0       	ldi	r27, 0x01	; 1
    9714:	3e d0       	rcall	.+124    	; 0x9792 <__ultoa_invert+0x9c>
    9716:	b4 e0       	ldi	r27, 0x04	; 4
    9718:	3c d0       	rcall	.+120    	; 0x9792 <__ultoa_invert+0x9c>
    971a:	67 0f       	add	r22, r23
    971c:	78 1f       	adc	r23, r24
    971e:	89 1f       	adc	r24, r25
    9720:	9a 1f       	adc	r25, r26
    9722:	a1 1d       	adc	r26, r1
    9724:	68 0f       	add	r22, r24
    9726:	79 1f       	adc	r23, r25
    9728:	8a 1f       	adc	r24, r26
    972a:	91 1d       	adc	r25, r1
    972c:	a1 1d       	adc	r26, r1
    972e:	6a 0f       	add	r22, r26
    9730:	71 1d       	adc	r23, r1
    9732:	81 1d       	adc	r24, r1
    9734:	91 1d       	adc	r25, r1
    9736:	a1 1d       	adc	r26, r1
    9738:	20 d0       	rcall	.+64     	; 0x977a <__ultoa_invert+0x84>
    973a:	09 f4       	brne	.+2      	; 0x973e <__ultoa_invert+0x48>
    973c:	68 94       	set
    973e:	3f 91       	pop	r19
    9740:	2a e0       	ldi	r18, 0x0A	; 10
    9742:	26 9f       	mul	r18, r22
    9744:	11 24       	eor	r1, r1
    9746:	30 19       	sub	r19, r0
    9748:	30 5d       	subi	r19, 0xD0	; 208
    974a:	31 93       	st	Z+, r19
    974c:	de f6       	brtc	.-74     	; 0x9704 <__ultoa_invert+0xe>
    974e:	cf 01       	movw	r24, r30
    9750:	08 95       	ret
    9752:	46 2f       	mov	r20, r22
    9754:	47 70       	andi	r20, 0x07	; 7
    9756:	40 5d       	subi	r20, 0xD0	; 208
    9758:	41 93       	st	Z+, r20
    975a:	b3 e0       	ldi	r27, 0x03	; 3
    975c:	0f d0       	rcall	.+30     	; 0x977c <__ultoa_invert+0x86>
    975e:	c9 f7       	brne	.-14     	; 0x9752 <__ultoa_invert+0x5c>
    9760:	f6 cf       	rjmp	.-20     	; 0x974e <__ultoa_invert+0x58>
    9762:	46 2f       	mov	r20, r22
    9764:	4f 70       	andi	r20, 0x0F	; 15
    9766:	40 5d       	subi	r20, 0xD0	; 208
    9768:	4a 33       	cpi	r20, 0x3A	; 58
    976a:	18 f0       	brcs	.+6      	; 0x9772 <__ultoa_invert+0x7c>
    976c:	49 5d       	subi	r20, 0xD9	; 217
    976e:	31 fd       	sbrc	r19, 1
    9770:	40 52       	subi	r20, 0x20	; 32
    9772:	41 93       	st	Z+, r20
    9774:	02 d0       	rcall	.+4      	; 0x977a <__ultoa_invert+0x84>
    9776:	a9 f7       	brne	.-22     	; 0x9762 <__ultoa_invert+0x6c>
    9778:	ea cf       	rjmp	.-44     	; 0x974e <__ultoa_invert+0x58>
    977a:	b4 e0       	ldi	r27, 0x04	; 4
    977c:	a6 95       	lsr	r26
    977e:	97 95       	ror	r25
    9780:	87 95       	ror	r24
    9782:	77 95       	ror	r23
    9784:	67 95       	ror	r22
    9786:	ba 95       	dec	r27
    9788:	c9 f7       	brne	.-14     	; 0x977c <__ultoa_invert+0x86>
    978a:	00 97       	sbiw	r24, 0x00	; 0
    978c:	61 05       	cpc	r22, r1
    978e:	71 05       	cpc	r23, r1
    9790:	08 95       	ret
    9792:	9b 01       	movw	r18, r22
    9794:	ac 01       	movw	r20, r24
    9796:	0a 2e       	mov	r0, r26
    9798:	06 94       	lsr	r0
    979a:	57 95       	ror	r21
    979c:	47 95       	ror	r20
    979e:	37 95       	ror	r19
    97a0:	27 95       	ror	r18
    97a2:	ba 95       	dec	r27
    97a4:	c9 f7       	brne	.-14     	; 0x9798 <__ultoa_invert+0xa2>
    97a6:	62 0f       	add	r22, r18
    97a8:	73 1f       	adc	r23, r19
    97aa:	84 1f       	adc	r24, r20
    97ac:	95 1f       	adc	r25, r21
    97ae:	a0 1d       	adc	r26, r0
    97b0:	08 95       	ret

000097b2 <_exit>:
    97b2:	f8 94       	cli

000097b4 <__stop_program>:
    97b4:	ff cf       	rjmp	.-2      	; 0x97b4 <__stop_program>
